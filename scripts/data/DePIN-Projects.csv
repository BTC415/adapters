name,id,url,category,chain,token,coinGeckoID,description,subcategories,ninja,foundingYear,twitter,discord,telegram,blog,github,linkedin,verified,isActive,isApp
0G Labs,3klhti,https://0g.ai/,BLOCKCHAIN_INFRA,,,,0G is an infinitely scalable data availability layer and data storage system that provides the necessary infrastructure to scale Web3 and bring novel use cases on-chain.,,ZZ,,https://x.com/0G_labs,1210423309808963594,https://t.me/web3_0glabs,,,,,TRUE,FALSE
0Knowledge,sq9otq,https://0kn.io/,BLOCKCHAIN_INFRA,ETHEREUM,0KN,0-knowledge-network,"0 Knowledge Network is building the first metadata-private smart contract platform, combining the power of zero-knowledge proofs and post-quantum mix networks.",ZK,,,https://x.com/0Knowledge_net,,https://t.me/Entry_Portal_0KN,https://medium.com/@0knowledgee,https://github.com/31333337,,,TRUE,FALSE
0x0.ai,vqpvwd,https://0x0.ai/,AI,ETHEREUM,0X0,0x0-ai-ai-smart-contract,0x0 is a comprehensive privacy solution featuring a variety of AI-based safety tools that redistributes 100% revenue to 0x0 holders.,,,,https://x.com/0x0exchange,1105051738806951976,https://t.me/Portal0x0,https://medium.com/@privacy0x0,https://github.com/0x0exchange,https://www.linkedin.com/company/0x0/,,TRUE,FALSE
0xParc,zf9ws4,https://0xparc.org/,NOT_DEPIN,,,,0xPARC supports applied research and development of cryptography-enabled applications on Ethereum and decentralized platforms.,,,,https://x.com/0xparc,,,,,,,TRUE,FALSE
0xScope,0hgye7,https://www.0xscope.com/,AI,,,,"0xScope is a Web3 AI Data Layer with an established and complete set of standards for collecting, cleaning, and managing relevant on- and off-chain data specifically adapted for Web3 AI training.",,W. L.,,https://x.com/ScopeProtocol,991589244810305596,https://t.me/scope_official,,,https://www.linkedin.com/company/0xscope/,,TRUE,FALSE
0xVPN,4p96w0,https://0xvpn.org/,WIRELESS,ETHEREUM,VPN,0xvpn-org,0xVPN is a censorship resistant Layer-2 protocol with an integrated marketplace for a decentralized Peer-to-Peer Virtual Private Network.,VPN,ZZ,,https://x.com/0xVPN_org,,https://t.me/zerox_vpn_portal,,,,,TRUE,FALSE
1000Houses,2ly60i,https://www.1kh.org/,NOT_DEPIN,,,,1000 Houses or 1KH is a ministry that equips households to launch city-wide disciple-making movements.,,,,,,,https://1000houses.com/blog/,,https://www.linkedin.com/in/mitch-stephen-5a83156/,,TRUE,FALSE
1Hub.ai,w6w2jr,https://1hub.ai/,AI,,1HUB,,"1Hub.ai is building a platform that unifies AI services and provides access to custom models through a decentralized, blockchain-synchronized computation cloud.",,ZZ,,https://x.com/1HubAI,,https://t.me/official_1hub_ai,https://medium.com/@1HubAI,,,,TRUE,FALSE
2appy,s3mmvo,https://www.2appy.it/,NOT_DEPIN,,,,"2appy is a bundled service provider that aggregates electricity, gas, mobile, and fiber into a single bill, offering seamless management and personalized customer service for a simplified and cost-effective experience.",,,,,,,,,,,FALSE,FALSE
2DAI,cv1vse,https://dapp.2dai.io/,AI,ETHEREUM,2DAI,2dai-io,"2DAI is an AIaaS platform that empowers creators to generate images, animations, and drawings using cutting-edge AI technology, accessible across various platforms including Telegram bots, mobile apps, and dApps.",,ZZ,,https://x.com/2DAICommunity,,https://t.me/Token2dAI,,,,,TRUE,FALSE
30sec,e1rwdv,https://30sec.net/#/,HUMAN_CAPITAL,BINANCE,YET,,"30sec is a watch-to-earn app that incentivizes users to actively watch ads, enabling companies to spread brand advertisements efficiently and cost-effectively.",Advertising,ZZ,,https://x.com/30sec_yet,1077442116889882684,https://t.me/info30sec,,,,,TRUE,FALSE
369 AI,lkgvvp,https://three69ai.com/,AI,ETHEREUM,369,,369 AI is a high-performance blockchain for AI applications.,,ZZ,,https://x.com/Three69AI,,https://t.me/Three69AI,,,,,FALSE,FALSE
375ai,cvzsdf,https://www.375.ai/,WIRELESS,SOLANA,375AI,,"375ai is building a decentralized edge data intelligence network, leveraging AI and blockchain to enable real-time data collection, processing, and analysis while ensuring privacy and security.",,,,https://x.com/375ai_,,,,,,,TRUE,FALSE
3DOS,5dho62,https://3dos.io/,ROBOTICS,NATIVE,3DOS,,"3DOS is a decentralized manufacturing network that allows anyone to upload a design and have it 3D printed globally, with on-demand production and blockchain-protected royalties.",,,,https://x.com/3DOSNetwork,1206236320092131338,,,,https://www.linkedin.com/company/3dosio/,,TRUE,FALSE
3Dpass,b7kmt6,https://3dpass.org/,RWA,NATIVE,P3D,3dpass,3Dpass is an open-source Layer 1 decentralized blockchain platform for the tokenization of objects.,L1/L2,EV3 Sal,,https://x.com/3Dpass_genesis,932377852521881659,,https://3dpass.medium.com/,,,,TRUE,FALSE
3NUM,f5qe2h,https://www.3num.co/,WIRELESS,,,,"3NUM is a Web3 mobile number minted as an NFT that protects user identity and provides private, secure messaging.",,,,,953486199799025704,,https://medium.com/@3NUMDAO,https://github.com/3numdao,https://www.linkedin.com/company/3numdao/,,TRUE,FALSE
3RM,fq1s6c,https://www.3rm.co/,PENDING,,,,,,EV3 Sal,,https://x.com/3rm_co,,,,,,,true,false
3TV,jcp53v,https://3tv.chat/,NOT_DEPIN,,,,3TV.chat is a live-streaming app for creators and communities.,,,,https://twitter.com/3tv_chat,963065410050220052,,,,,,true,false
4everland,0tmpgv,https://www.4everland.org/,COMPUTE,,,,"4everland is a decentralized cloud provider integrating storage, computing, and networking resources.",Storage,ZZ,,https://twitter.com/4everland_org,852482727164117022,,,,https://au.linkedin.com/company/4everlandorg,,true,false
5ireChain,oecmcs,https://5ire.org/home,PENDING,,,,,,ZZ,,https://x.com/5ireChain,,,,,,,true,false
6079,v4u52z,https://6079.ai/,AI,,,,6079.ai is an open and distributed protocol for AI inference.,,ZZ,,https://twitter.com/6079ai,,,,,,,true,false
60ghz,zbvzq8,https://60ghz.io/,PENDING,,,,,,W. L.,,https://x.com/60ghz147659,,,,,,,true,false
7007,nwmr9r,https://www.7007.ai/,AI,,TOOT,,"7007 is an AI inference asset protocol that tokenizes AI model outputs on the Ethereum blockchain, ensuring each result is verified and immutable.",,EV3 Sal,,,,,,,,,true,false
AANN.ai,ut3zdh,https://aann.ai/,NOT_DEPIN,,AN,,"AANN.ai Lab is the creator of a next-generation AI-powered social Authenticity Network ""AN"" which is designed to help users elevate, grow, and monetize their online social authenticity.",,ZZ,,https://twitter.com/aann_ai,1129326475510812753,,,,,,true,false
Abacus.AI,ydunf2,https://abacus.ai/,AI,,,,Abacus.AI is an AI-assisted data science platform to build ML systems and AI agents at scale.,Agents,ZZ,,https://twitter.com/abacusai,,,,,,,true,false
Abstract,80wqyx,https://abstract.money/en-US,PENDING,,,,,,vkurup.eth,,https://x.com/AbstractSDK,,,,,,,true,false
Abyss,u02gpt,https://abyssprotocol.ai/,AI,,ABYSS,,"Abyss Protocol is a decentralized platform that combines blockchain and AI, democratizing access to advanced AI technologies through a transparent ecosystem powered by its Proof-of-Intelligence consensus mechanism.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/abyssprotocol,,,,,,,TRUE,FALSE
Access,i4tcnw,https://www.accessprotocol.co/,NOT_DEPIN,SOLANA,ACS,access-protocol,ACCESS Protocol lays the foundation for digital content monetization using a web3 wallet.,,,,,1001837380044587118,,,,,,true,false
Accountable,6xyl8j,https://www.accountable.capital/,NOT_DEPIN,,,,Accountable is building a data platform with live verification of borrower’s assets and trading exposure while fully preserving privacy.,,EV3 Sal,,https://twitter.com/AccountableData,,,,,,,true,false
Acorn,a0dbki,https://acorn.eco/#/,BLOCKCHAIN_INFRA,NATIVE,ACN,acorn-protocol,Acorn Protocol is a data ecosystem that rewards users for contributing and monetizing data value in a vibrant way.,,,,https://twitter.com/AcornProtocol,,,,https://mobile.twitter.com/AcornProtocol/status/1706843598581358812,https://www.linkedin.com/company/acorn,,true,false
Actifit,5479ia,https://actifit.io/,HUMAN_CAPITAL,,AFIT,,"Actifit is a social, cross-chain, move-to-earn gamified platform that rewards users for their daily activities with crypto rewards, combining fitness and DeFi elements across multiple blockchains.",Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/Actifit_fitness,,,,,,,TRUE,FALSE
Acurast,o2w9zn,https://acurast.com/,COMPUTE,NATIVE,ACU,acurast,"Acurast is a decentralized and serverless cloud platform with a trustless, verifiable, and confidential computing environment leveraging mobile hardware to disrupt traditional server infrastructure.",,ZZ,,http://x.com/Acurast,971297576651472916,https://t.me/acurastnetwork,https://acurast.medium.com/,https://github.com/Acurast,,,true,false
Acxyn,ktxx7q,https://www.acxyn.xyz/,BLOCKCHAIN_INFRA,,,,Acxyn is a web3 company that aims to revolutionize the gaming industry as the world's first IP tokenization platform.,Gaming,,,https://twitter.com/Acxynteam,,,,,http://www.linkedin.com/company/acxyn,,true,false
Adapt,ct8tqp,https://www.adaptframework.solutions/,COMPUTE,,,,"Adapt is a developer framework for full-stack decentralized software development, focusing on peer-to-peer data sharing and decentralization of non-blockchain components of web3 dApps.",,,,,979396568597799012,,,,,,true,false
Addresso,a0a6d7,https://www.addresso.com/,NOT_DEPIN,,,,"Addresso is the address book app for the next era of the web, helping users store and organize wallet and smart contract addresses simply, intuitively, and privately.",,EV3 Sal,,,,,,,,,true,false
AdHash,p6m3rb,https://adhash.com/,HUMAN_CAPITAL,,,,"AdHash is a self-hosted advertising platform that allows publishers and advertisers to serve ads, manage campaigns, and collect performance data on-premise.",Advertising,ZZ,,,,https://t.me/adhashprotocol,,https://github.com/AdHashProtocol,https://www.linkedin.com/company/adhashprotocol/,,true,false
Adot,iuet6b,https://www.a.xyz/,NOT_DEPIN,,,,"Adot is a decentralized Web3 search engine that redefines how data is collected, organized, and delivered. It sorts, aggregates, and indexes data from both on-chain and off-chain sources, allowing users to create personalized search functionalities.",,ZZ,,https://twitter.com/Adot_web3,,,,,,,true,false
Advantis,qvo0gi,https://www.advantistoken.com/,AI,ETHEREUM,ADVT,advantis,"Advantis AI empowers crypto enthusiasts with innovative solutions like AI Outlook, Scanner, and University.",,W. L.,,https://twitter.com/AdvantisToken,909875543128821811,https://t.me/advantisai,https://medium.com/@advantisai,,http://www.linkedin.com/company/advantisai,,true,false
AEGIS,ib50zn,https://aiaegis.org/,AI,ETHEREUM,AEGIS,aegis-ai,AEGIS AI is developing a pioneering Blockchain Security with AI-Enabled Audit Solutions,,,,https://twitter.com/AegisAISecurity,,https://t.me/AegisAISecurity,,,,,true,false
AEIR,outbjj,https://www.aeir.ch/,ENERGY,,,,"AEIR is pioneering safe and efficient wireless energy transmission using advanced photonics technology, aiming to eliminate cables and provide secure, long-range wireless charging solutions for a wide range of applications.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/aeir_ch,,,,,,,true,false
AeroNyx,5w860i,https://aeronyx.network/,WIRELESS,,,,"AeroNyx - decentralized DePIN protocol for privacy solutions, using Web3 principles.",,,,https://twitter.com/Aeronyx9,,,,,https://www.linkedin.com/company/aeronyx/,,true,false
Aethero,zualg9,https://www.aethero.com/,COMPUTE,,,,"Aethero builds radiation-hardened edge computers to process data from orbit and let users compress their bandwidth needs, automate tasks like navigation, or manage satellites in a constellation by deploying and training ML applications.",,EV3 Sal,,https://twitter.com/aetherospace,,,,,,,true,false
Aethir Edge,e3bezv,https://www.myedge.io/,COMPUTE,,,,"Aethir Edge is the next evolution of a decentralized, community-powered computing device integrated with Aethir's distributed GPU cloud infrastructure.",,ZZ,,https://twitter.com/AethirEdge,,,,,,,true,false
Aethir,oo2cn2,https://www.aethir.com/,COMPUTE,,ATH,aethir,Aethir is a Scalable Decentralised Cloud Infrastructure (DCI) for Gaming and AI.,,,,https://twitter.com/AethirCloud,993758224438284291,,,,https://www.linkedin.com/company/aethir-limited,,true,false
Agave Zwolf,zd2zu6,https://agavezwolf.com/,RWA,,AGVZ,,"Agave Zwolf is the provider of a token that is backed up by a plant of blue agave which is used to produce Tequila. When a new plant is planted by AgaveZwolf, a new Token is issued.",,,,https://x.com/agave_zwolf,,,,,,,true,false
AgentLayer,bv8282,https://agentlayer.xyz/,AI,,APGN,,"AgentLayer is a Decentralized Autonomous AI Agent Blockchain and Network that empowers users to develop and deploy personalized AI applications ranging from chatbots to image generators. ",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/agent_layer,,,,,,,true,false
Aggregata,lo91tp,https://aggregata.xyz/,AI,,AG,,"Aggregata is a decentralized AI data platform that enables users to monetize their interactions with AI, store data securely, and access cost-effective, censorship-resistant AI tools and resources.",Data,W. L.,,https://twitter.com/Aggregata_xyz,1213332762061185055,,,,,,true,false
AGII,fqcmrn,https://agii.app/,AI,ETHEREUM,AGII,agii,"AGII is an All-in-one AI platform for the Web3 era, offering advanced tools for generating high-quality content across text, images, code, chat, speech-to-text, and voiceover applications.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/theagii,,,,,,,true,false
Agnostic,2pv22r,https://agnostic.engineering/,NOT_DEPIN,,,,Agnostic simplifies blockchain data access and analysis for developers and analysts with SQL query support and seamless integration with EVM-compatible blockchains.,,,,,,,https://medium.com/agnosticeng,,https://www.linkedin.com/company/agnostic/about/,,true,false
Agnostiq,anzeat,https://agnostiq.ai/,COMPUTE,,,,"Agnostiq develops Covalent, an open-source workflow platform for quantum computing and HPC.",,,,https://twitter.com/agnostiqHQ,,,,https://github.com/agnostiqHQ/covalent,https://www.linkedin.com/company/agnostiq/,,true,false
AgriDex,t42uy8,https://agridex.com/,RWA,SOLANA,AgriDex,,Agridex is an RWA Marketplace focused on tokenizing agricultural commodities.,,ZZ,,https://x.com/AgriDexPlatform,940826514717569025,,,,,,true,false
Agritoken,gaa7c0,https://agritoken.com.ph/,RWA,,,,Agritoken is tokenizing crop futures for efficient and transparent agricultural investing.,,,,https://twitter.com/AgriToken,,,,,https://www.linkedin.com/company/agritoken/,,true,false
Agro Global Token,14kc3t,https://agroglobal.network/,RWA,ETHEREUM,AGRO,,"Agro Global Token is a digital currency developed by Agro Global Group, combining blockchain technology with agriculture to enhance efficiency, transparency, and profitability while eliminating intermediaries in the agricultural supply chain.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/agroglobaltoken,,,,,,,true,false
AgroforestDAO,aqym9q,https://agroforestdao.web.app/,RWA,,,,AgroforestDAO is an agricultural project harnessing the power of blockchain and NFTs to incentivize agroforestry practices and community ownership of intergenerational agroecosystems.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/agroforestdao,,,,,,,true,false
Agrotoken,r2yc3l,https://agrotoken.com/es/,BLOCKCHAIN_INFRA,,,,"Agrotoken allows you to do more and better business with agrocommodities, creating a simpler, more efficient and technological ecosystem. We are the new dimension of agribusiness",,,,https://twitter.com/agrotoken,,,,,https://www.linkedin.com/company/agrotoken/,,true,false
AhoyDAO,cqpqpq,https://www.ahoy.org/,BLOCKCHAIN_INFRA,,,,AhoyDAO is a peer-to-peer ecosystem for the marine industry ownership economy.,,,,https://twitter.com/ahoy_dao,,,,https://github.com/ahoy-cli/ahoy,https://www.linkedin.com/company/ahoy-/,,false,false
AI ARENA,1q9nu8,https://www.arenaxlabs.com/,AI,,NRN,,"AI ARENA is an Ethereum native game (dApp) where players all over the world can purchase, train, and battle characters powered by AI.",,EV3 Sal,,,848599369879388170,,,,,,true,false
AI Network,owekxa,https://www.ainetwork.ai/,AI,ETHEREUM,AIN,ai-network,"AI Network is a blockchain protocol-based collaborative computing architecture for AI and metaverse. ",,ZZ,,https://twitter.com/ainetwork_ai,938909864674082826,,,,,,true,false
AI Power Grid,kv3vqp,https://aipowergrid.io/,AI,,AIPG,ai-power-grid,AI Power Grid is an innovative blockchain project designed to incentivize and reward open-source AI participation.,,ZZ,,,1028009972740657184,,,,,,true,false
AI Protocol,3zo6h4,https://www.aiprotocol.info/,AI,,,,"AI Protocol is a protocol that enables the development of a community-driven, secure, and adaptive DePIN for tokenized AI systems.",,ZZ,,https://twitter.com/ProtocolAI1,828681620893466655,,https://medium.com/@protocolai_ready,,https://www.linkedin.com/in/ai-protocol-201214283/,,true,false
AI-DePIN,0us9yt,https://www.ai-depin.org/,PENDING,,,,,,ZZ,,https://x.com/AiDePIN_Org,,,,,,,true,false
AI21 Labs,byddbz,https://www.ai21.com/,AI,,,,AI21 Labs builds Foundation Models and AI Systems for enterprises that accelerate the use of GenAI in production.,,ZZ,,https://twitter.com/AI21Labs,874538902696914944,,,,,,true,false
AIDE,fu3wr3,https://aidepin.co/,BLOCKCHAIN_INFRA,,AIDE,,"AIDE is an AI-powered blockchain platform integrating DePIN and zkSync technologies, fostering community involvement in node operations, rewards earning, and governance while offering indie developers a range of monetization avenues.",,ZZ,,https://x.com/AIDE_DePIN,,,,,,,true,false
AIET,90js4x,,AI,,,,AIET is a decentralized distributed AI training and inference protocol that leverages advanced language models and neural network technologies.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/aietnet,,,,,,,TRUE,FALSE
AIgentX,ovok3r,https://aigentx.xyz/,AI,ETHEREUM,AIX,aigentx,"AIgentX is developing next-gen AI-driven chat solutions that simplify the user experience on Web3, making blockchain technology accessible to everyone.",,EV3 Sal,,https://twitter.com/0xaigentx,1207830252114677842,,,,,,true,false
AiGO,pegrr3,https://aigo.network/,MOBILITY,,AIGO,,AiGO Network is an AI-optimized Decentralized Mobility Data Network designed to aggregate and monetize mobility data from motorcycle and e-bike riders.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/aigo_network,,,,,,,true,false
AIGPU,m8j4ij,https://www.aigpu.co/,COMPUTE,,AIGPU,aigpu-token,"AIGPU provides a decentralized, optimized GPU cloud service for generative AI companies.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://twitter.com/aigputoken,,,,,,,true,false
Aiis,zfup4o,https://aiis.dev/,AI,,,,"Skip complex code. With AI, creating and deploying your own ERC-20 token is as simple as answering a few questions!",,EV3 Sal,,,1170073310000853023,,,,,,true,false
AILayer,119hsh,https://ailayer.xyz/,NOT_DEPIN,NATIVE,AILAYER,,"AILayer is an innovative Bitcoin Layer2 solution, crafted with a focus on AI-driven modular construction.",L1/L2,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/ailayerxyz,,,,,,,true,false
Aimedis,p864om,https://aimedis.com/,AI,POLYGON,AIMX,aimedis-new,"Aimedis is a comprehensive healthcare ecosystem leveraging the power of medical data, metaverse, AI, and Web3 technologies to revolutionize healthcare by optimizing patient care, streamlining data management, and promoting data-driven decisions.",Health,ZZ,,https://twitter.com/AimedisGlobal,1227808395617107998,https://t.me/AimedisOfficialEnglish,,,https://www.linkedin.com/company/aimedis/,,true,false
Aimelia,7x1eif,https://aimelia.network/#/,AI,ETHEREUM,AIME,,"Aimelia Network is a generative coevolution protocol for AI agents that focuses on evaluating AI agents with game theory and bounty rewards, and includes Predx, an AI-powered prediction market for trading event likelihoods.",Prediction Market,EV3 Sal,,https://twitter.com/PredX_AI,949853427771535370,,,,,,true,false
AiONE,oqs9xj,https://ai.one/,AI,BINANCE,AIONE,aione,AiONE is an AI platform that integrates AI into business workflows.,,,,https://twitter.com/aionelab,,https://t.me/aionelab,,,http://www.linkedin.com/company/aionelabs,,false,false
AIOZ,tpqdbi,https://aioz.network/,WIRELESS,ETHEREUM,AIOZ,aioz-network,AIOZ is a decentralized content delivery network.,CDN,W. L.,,https://twitter.com/aioznetwork,,https://t.me/s/aiozofficial,https://medium.com/aioz-network,,https://sg.linkedin.com/company/aioz-ai,,true,false
AIREALM,muunxy,https://www.airealm.tech/,AI,ETHEREUM,AIRM,,"AIREALM is an AI Ecosystem that gathers AI utilities into a single platform, enhancing convenience and innovation for users. The AI REALM suite consists of AI Swap, Chatbot, Chart Bot, and AI Auditor, catering to users of all levels.",,ZZ,,,,,,,,,true,false
AIRian,dq1xo6,https://airian.io/,SENSORS,ETHEREUM,AIR,airian,"AIRian is a decentralized global community platform for runners and marathoners, empowering users to engage in running, join running crews, participate in challenges, and buy AIRian-branded clothing to enrich their running experiences.",Health,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/air_airofficial,,,,,,,true,false
Airlyft,2c4d5r,https://airlyft.one/,NOT_DEPIN,,,,"Discover Thriving Communities, Participate in Engaging Campaigns and Win Irresistible Rewards like NFTS, Tokens and Whitelists.",,,,,906232393986371644,,,,https://www.linkedin.com/products/kyteone-airlyft/,,true,false
AirMoney,5kxriw,https://www.degn.com/,COMPUTE,,,,"AirMoney is a DePIN degn device that empowers users to actively participate in decentralized networks through node operation, trading, staking, and gaming while offering enhanced security, interactivity, and seamless access to decentralized networks.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/airmoneydegn,,,,,,,TRUE,FALSE
AIRO,8q0l7y,https://www.airo.network/,SENSORS,,,,AIRO is a decentralized air quality monitoring network.,Environmental,ZZ,,https://twitter.com/AIRO_MU,1089157531001167958,,https://medium.com/@airo.network,https://github.com/airo,https://www.linkedin.com/company/airo-missions,,true,false
Airwaive,7udlaq,https://airwaive.org/,WIRELESS,,,,"Airwaive leverages satellite and long-range WiFi technology, with an incentive network that rewards hosts for creating local wireless networks, to provide affordable, high-speed internet access even to remote areas.",Satellites,ZZ,,https://twitter.com/airwaive_biz,,,,,,,true,false
AiShare,gg0o75,https://aishare.ai/,AI,,,,"AIShare is a platform that empowers AI innovation and monetization by providing developers access to GPU resources, collaboration tools, and rewards for contributions in AI development.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/ai_shareai,,,,,,,true,false
AIT,ux0c4s,https://ait.tech/,AI,,,,Intersection of AI & blockchain,,EV3 Sal,,,,,,,,,true,false
AIxBlock,cd7riu,https://aixblock.io/,COMPUTE,,,,"AIxBlock is an end-to-end no-code platform to build, deploy, and monetize AI models using decentralized computing resources.",,ZZ,,https://x.com/AIxBlock,,,,,,,true,false
Aizel,xziezz,https://aizelnetwork.com/,AI,,,,Aizel is an on-chain verifiable AI inference network that empowers blockchains with trustless AI abilities.,,ZZ,,https://twitter.com/aizel_network,,,,,,,true,false
Akash,qmmyw0,https://akash.network/,COMPUTE,COSMOS,AKT,akash-network,Akash is an open-source supercloud that enables secure and efficient buying and selling of computing resources.,GPUs,,,https://twitter.com/akashnet_,747885925232672829,,https://medium.com/@akashnet_,https://github.com/akash-network,http://www.linkedin.com/company/akash-network,,true,false
Akave,d5df58,https://www.akave.ai/,COMPUTE,,,,"Akave is a decentralized, modular L2 data storage network that combines Filecoin's robust storage with advanced encryption, offering scalable, cost-effective solutions for managing on-chain and off-chain data.",Storage,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/akavenetwork,,,,,,,TRUE,FALSE
Akord,5fwdog,https://akord.com/,COMPUTE,,,,Akord: decentralized storage solution giving users control over data. A privacy hub and data marketplace.,Storage,,,https://twitter.com/AkordTeam,890229689019432981,,,https://github.com/Akord-com,https://fr.linkedin.com/company/akord-co,,true,false
Alaya AI,ntsyym,https://www.aialaya.io/,AI,,AGT,,"Alaya AI is an open, composable Web3 data sampling and auto-labelling AI infrastructure powered by distributed communities.",Training,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/alaya_ai,,,,,,,TRUE,FALSE
Albedo,iqd05g,https://albedo.com/,NOT_DEPIN,,,,Albedo's low-flying satellites capture visible and thermal imagery at the highest resolution commercially available.,Satellites,,,https://twitter.com/vaxchain,772582514082185227,,,,https://www.linkedin.com/company/albedo-space/,,true,false
Albion Exchange,piemni,https://albion.exchange/,PENDING,,,,,,EV3 Sal,,https://x.com/AlbionExchange,,,,,,,true,false
Aleo,y5j1bu,https://aleo.org/,NOT_DEPIN,,,,Aleo is a privacy-first Layer-1 blockchain that's zero-knowledge by design.,L1/L2,ZZ,,https://twitter.com/AleoHQ,700454073459015690,,,,,,true,false
Aleph Zero,qxdzwc,https://alephzero.org/,NOT_DEPIN,NATIVE,AZERO,,"Aleph Zero is a layer 1 privacy-enhancing blockchain that ensures scalability, low transaction fees, instant finality, and optimal security, powered by a novel consensus protocol and a WASM-based technology stack.",L1/L2,ZZ,,,775720634848116807,,,,,,true,false
Aleph,shwbn0,https://aleph.im/,COMPUTE,ETHEREUM,ALEPH,aleph-im,"Aleph.im is an open-source crosschain network featuring decentralized database including file storage, computing, and a decentralized identity (DID) framework.",,ZZ,,https://twitter.com/aleph_im,,https://t.me/alephim,https://medium.com/aleph-im,,https://www.linkedin.com/company/aleph-im/,,true,false
Alephium,agw79k,https://alephium.org/,BLOCKCHAIN_INFRA,ETHEREUM,ALPH,alephium,"Alephium is a blockchain platform that combines innovative sharding, a stateful sUTXO model, and Proof-of-Less-Work to deliver scalable, secure, and energy-efficient dApps for real-world applications.",,ZZ,,,747741246667227157,,,,,,true,false
Alethea,zzxlj6,https://alethea.ai/,AI,ETHEREUM,ALI,artificial-liquid-intelligence,Alethea AI is a research and development studio building at the intersection of two of the most transformative technologies of our time: Generative AI and Blockchain.,NFTs,,2019,https://twitter.com/real_alethea,https://discord.com/invite/aiprotocol,,,,https://www.linkedin.com/company/realalethea/,,true,false
Alex Archive,nfnvia,https://alex.arweave.dev/,COMPUTE,,,,Alex Archive is a decentralized archival platform that leverages the immutable and permanent data storage of Arweave.,Storage,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/thealexarchive,,,,,,,TRUE,TRUE
Algovera,vnkyd5,https://www.algovera.ai/,AI,,,,"Algovera is a decentralized AI platform that allows individuals and teams to create, use and share personalized AI.",,,,https://twitter.com/algoveraai,893460895999590450,,https://handbook.algovera.ai/blog/,https://github.com/AlgoveraAI/,https://www.linkedin.com/company/algovera/,,true,false
Alkimi,xvizp7,https://www.alkimi.org/,HUMAN_CAPITAL,ETHEREUM,ADS,alkimi,"Alkimi is a blockchain-based advertising exchange built on the fundamentals of lower fees, increased transparency, and reduced carbon emissions.",Advertising,ZZ,,https://twitter.com/AlkimiExchange,789557240075911188,,,,,,true,false
All Stream AI,lvt033,https://www.allstream.ai/#/home,PENDING,,,,,,ZZ,,https://x.com/AllStream_AI,,,,,,,true,false
Allfeat,3bgk7p,https://allfeat.com/,INTELLECTUAL_PROPERTY,NATIVE,,,"Allfeat is an EVM+ Layer 1 blockchain built for the music industry, offering decentralized data structures, smart contracts, and governance to securely manage artist profiles, music releases, and copyrights on-chain.",L1/L2,0x9d73ca4689788f6d4be686e9150d6efe75ffd746,,https://x.com/allfeat_fndn,,,,,,,TRUE,FALSE
AllianceBlock,zgvzl4,https://allianceblock.io/,NOT_DEPIN,ETHEREUM,ALBT,allianceblock,AllianceBlock builds gateways between traditional & decentralized industries with blockchain infrastructure.,,,,https://twitter.com/allianceblock,742466730202234960,https://t.me/allianceblock,https://medium.com/allianceblock/allianceblock-the-next-era-of-allianceblock-eabb78b29ac3,https://github.com/Stichting-AllianceBlock-Foundation/,http://www.linkedin.com/company/allianceblock,,true,false
ALLIN,q9od26,https://www.allin.so/,AI,ETHEREUM,ALLIN,all-in,"All In is an AI-focused project, designed to empower communities and projects to fully utilize AI technology. They offer data analysis and management, process automation, customer services and community management, and content development services.",,ZZ,,,,,,,,,true,false
Allora,qs7j6q,https://allora.network/,AI,,,,"Allora is a self-improving decentralized AI network. It enables applications to leverage smarter, more secure AI through a self-improving network of ML models by crowdsourcing mechanisms, federated learning, and zkML.",,,,https://twitter.com/AlloraNetwork,644591703507861515,,,,,,true,false
Aloega,ki4zze,https://www.aloega.com/,SENSORS,,,,"ALOEGA is a global healthcare blockchain platform to enable decentralized, equitable, and secure sharing of health data.",,EV3 Sal,,https://twitter.com/Aloega_Official,,,,,,,true,false
Aloha,qlf3h3,https://www.alohaprotocol.ai/,AI,ETHEREUM,ALOHA,,"Aloha Protocol is a blockchain-based consensus protocol for AI, ensuring accurate, secure, and transparent natural language processing.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/AlohaProtocol,,,,,,,true,false
Alpha Radar,q4l7ze,https://alpharadarbot.xyz/,AI,ETHEREUM,ARBOT,alpha-radar-bot,"Alpha Radar AI is a powerful AI ecosystem that harnesses advanced AI and LLM technologies. The ecosystem includes a Liquidity scanner, alpha radar bot, GameFi bot, web3.0 LLM, and NFT/Inscription Bot.",,ZZ,,,,,,,,,true,false
AlphaBatem,ta105h,https://alphabatem.com/,BLOCKCHAIN_INFRA,,,,"AlphaBatem is a Metaverse building platform and infrastructure, enabling users to create and host large-scale, interactive experiences with advanced tools for augmented reality, spatial computing, and machine learning.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/alpha_batem,,,,,,,true,true
AlphaMind AI,6cu0k3,,PENDING,,,,,,ZZ,,,,,,,,,true,false
AlphaNeural,ncnx8n,https://alphaneural.io/,AI,SOLANA,ALPHAI,,"AlphaNeural AI is a decentralized marketplace and ecosystem for AI development, enabling secure uploading, buying, selling, and licensing of AI models and datasets while preserving user privacy.",,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/AlphaNeural,,,,,,,TRUE,FALSE
AlphaRushAI,s99udg,https://alpharush.ai/,AI,ETHEREUM,RUSHAI,alpharushai,"AlphaRush AI: Real-time news, analysis, and personalized trading alpha for cryptocurrency trading.",,,,,,,,,,,false,false
Alt Labs,9093bo,https://altlabs.dev/,COMPUTE,,,,Alt Labs is a builder of Web3 infrastructure user-friendly tools and interfaces for decentralized storage networks.,Storage,ZZ,,https://twitter.com/AltLabsAgency,,,https://medium.com/@alt_labs,https://github.com/RVA-ALT-Lab,https://uk.linkedin.com/company/alt-labs,,true,false
Altered State,9limss,https://www.alteredstatemachine.xyz/,AI,ETHEREUM,ASTO,altered-state-token,"Altered State Machine is a decentralized protocol for the creation and training of AI Agents, owned and traded using NFTs.",Agents,ZZ,,https://twitter.com/altstatemachine,864685888830963742,,,,https://www.linkedin.com/company/altered-state-machine/,,true,false
Alterim AI,pw91xa,https://alterim.ai/,AI,TON,ATRM,,"Alterim AI is a Telegram-based mini app that brings digital personas to life, offering users interactive, evolving AI companions with gamified elements for a personalized and engaging experience.",Chatbot,0x395aB080688983b5a2F203B49cE44D66b30360AB,,https://x.com/Alterim_ai,,,,,,,TRUE,FALSE
Althea,nag833,https://www.althea.net/,WIRELESS,GNOSIS,,,Althea is a web stack creating a marketplace for building ISPs and providing bandwidth in communities.,,,,,477147257251299350,,,,,,true,false
AltLayer,r5tb6n,https://altlayer.io/,NOT_DEPIN,,,,AltLayer is a decentralized protocol that facilitates the launch of native and re-staked rollups with both optimistic and zk rollup stacks.,,,,,954273304099815424,,,,,,true,false
ALYT,rb5p0i,https://alyt.ai/,HUMAN_CAPITAL,ETHEREUM,ALYT,,"ALYT is a transformative healthcare ecosystem that integrates AI, blockchain, and Zero-Knowledge Proofs to enhance data security, personalize patient care, and incentivize users to share anonymized health data.",Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/alyt_ai,,,,,,,TRUE,FALSE
AMALGAM,fdh359,,PENDING,,,,,,ZZ,,https://twitter.com/kivanolai,,,,,,,true,false
Ambient,ze30wc,https://ambient.network/,SENSORS,,,,Ambient is a decentralized network of environmental sensors and ambient data.,Environmental,ZZ,,https://twitter.com/AmbientNetwork,1235708084106690590,,,,,,true,false
Amplifi,8p90y1,https://amplifi.world/,WIRELESS,,WMT,,"Amplifi leverages EarthNodes and community-owned AirNodes on the World Mobile network, enabling users to stake tokens to secure the network while reinvesting rewards to expand decentralized telecom infrastructure and earn a share of the revenue.",,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/Amplifiworld,,,,,,,TRUE,TRUE
Anapaya,q0o1zm,https://www.anapaya.net/,NOT_DEPIN,,,,"Move your critical services, such as websites and VPN endpoints, away from the standard internet path, and secure them behind Anapaya GATE.",,EV3 Sal,,,,,,,,,true,false
Anchor,gle4b5,https://www.greymass.com/anchor,NOT_DEPIN,,,,"Anchor Wallet is a developer of smart contract wallets, specializing in quantum resistance and Lamport signatures.",Wallet,,,https://twitter.com/pauli_group,,,,,http://www.linkedin.com/company/pauli-group,,true,false
AnchorZero,s3dnz2,https://www.anchorzero.com/,PENDING,,,,,,ZZ,,https://x.com/anchorzero,,,,,,,true,false
Ancient8,xjogkp,https://www.ancient8.gg/,NOT_DEPIN,ETHEREUM,A8,,"Ancient8 Chain is a gaming-focused, community-driven Ethereum layer 2 network built to enable users to play and build the Metaverse while earning rewards.",L1/L2,ZZ,,https://twitter.com/Ancient8_gg,882274636342116372,https://t.me/ancient8_gg,https://blog.ancient8.gg/,,https://www.linkedin.com/company/ancient8/about/,,true,false
Andrena,tgalub,https://andrena.com/,WIRELESS,,,,Andrena offers high-speed internet distribution services with a focus on reduced costs.,,,,https://twitter.com/andrena_wifi,1237128484724412426,,,,https://www.linkedin.com/company/andrenainternet/,,true,false
Andromeda,g23dwt,https://www.andromedaprotocol.io/,COMPUTE,NATIVE,ANDR,andromeda-2,"Andromeda is developing a decentralized on-chain operating system (aOS) for Web3, streamlining operations with enhanced accessibility and efficiency.",,ZZ,,,932744941162098688,,,,,,true,false
Ankr,hqtk8u,https://www.ankr.com/,BLOCKCHAIN_INFRA,ETHEREUM,ANKR,ankr,"Ankr is a blockchain node infrastructure network enhancing multi-chain tools for Web3, DeFi, and the crypto economy.",RPC/Indexing,,,http://www.twitter.com/getankr,795634526918279179,https://t.me/ankrnetwork,https://medium.com/ankr-network,https://github.com/Ankr-network,http://www.linkedin.com/company/ankr,,true,false
Anomaly,w3efzq,https://www.anomalygames.ai/,AI,,,,Anomaly is an AI-powered gaming app chain that leverages customizable and scalable AI models and roll-up technology to enable developers to create dynamic and personalized gaming experiences.,Gaming,ZZ,,https://twitter.com/anomalygamesinc,,,,,,,true,false
Anon,6mqswi,https://www.anon.com/,NOT_DEPIN,,,,Anon enables developers to securely request and authenticate data from the most popular sites on the internet.,ZK,,,https://twitter.com/anonplatform,,,https://www.linkedin.com/company/anon-dot-com/about/,,,,true,false
Anryze,uvtnws,https://anryze.com/,COMPUTE,,,,Anryze is a decentralized data processing network where complex tasks can be distributed and run simultaneously.,,ZZ,,https://www.twitter.com/anryze,,https://t.me/,,,https://linkedin.com/company/anryze,,false,false
Ansa,i9mqty,https://ansaresearch.ai/,AI,,,,Ansa Research is a research firm focused on distributed infrastructure.,,EV3 Sal,,,,,,,,,true,false
Antic,hs6fc5,https://www.getantic.io/,NOT_DEPIN,,,,Antic: Decentralized co-ownership integration for businesses.,,,,https://twitter.com/Getantic,,,https://medium.com/multeez,,http://www.linkedin.com/company/anticxyz,,true,false
Antimetal,gzcc2r,https://www.antimetal.com/,NOT_DEPIN,ETHEREUM,ACAI,,"Antimetal is an AWS cloud cost optimization platform that utilizes AI to analyze and optimize cloud spending, helping users maximize savings.",,,,https://twitter.com/AntimetalCloud,,,,,,,true,false
Anyone,l9if1e,https://www.anyone.io/,WIRELESS,ETHEREUM,ANyONe,anyone-protocol,"Anyone (formerly Ator) is developing a global anonymous-routing network using a decentralized privacy protocol, on-chain incentives, and signature hardware to enhance internet sovereignty.",,,,https://x.com/AnyoneFDN,1083735132470521907,https://t.me/atorcommunityportal,https://medium.com/@ZeroSumTrayder/ator-protocol-the-next-big-thing-6d67a87243e2,https://github.com/ATOR-Development,,,true,false
AON,ohkyfs,https://aonnet.io/,AI,,,,"AON (AGI Open Network) is an AI application blockchain enabling the rapid construction of blockchain-driven AI applications through an open protocol stack, distributed computing power, and a large model inference API platform.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/aon_aonet,,,,,,,true,false
APhone,p8juld,https://www.aphone.com/,WIRELESS,,PHONE,,"APhone is a decentralized cloud smartphone, powered by Aethir.",,EV3 Sal,,https://twitter.com/aphonelabs,1196486945069596832,,,,,,true,false
API3,agq5jo,https://api3.org/,BLOCKCHAIN_INFRA,,API3,,"API3 is a decentralized data oracle network that facilitates direct integration of APIs with blockchain applications, eliminating the reliance on third-party intermediaries.",,,,,758003776174030948,,,,,,true,false
Apillion,x94xlf,https://apillon.io/,NOT_DEPIN,,,,Apillion is a Web3 development platform enabling developers to build in the Polkadot ecosystem.,,,,https://twitter.com/Apillon,881835505120079912,,,https://github.com/Apillon,https://www.linkedin.com/company/apillon/,,true,false
Apocryph,5rs7v8,https://apocryph.network/,PENDING,,,,,,EV3 Sal,,https://x.com/apocryphcloud,,,,,,,true,false
Apraemio,nx180n,https://www.apraemio.com/,RWA,BINANCE,APRA,,"Apraemio is a gold-backed cryptocurrency project with exclusive rights to access one of the largest gold reserves in Mali, Africa, committed to using blockchain technology to provide investors with a secure and transparent way to invest in gold.",,ZZ,,https://twitter.com/Apraemio_ofc,,,,,,,true,false
Apron,bg8k10,https://apron.network/,NOT_DEPIN,ETHEREUM,APN,apron,"Apron is a decentralized infrastructure service network for DApp developers, users, and operators on blockchain.",,,,https://twitter.com/apronofficial1,785051859655458826,,https://apron-network.medium.com/,https://github.com/Apron-Network/,,,true,false
Aptos,agylzj,https://aptosfoundation.org/,PENDING,,,,,,EV3 Sal,,https://twitter.com/aptos,,,,,,,true,false
Aptron,3kc4z7,https://aptron.org/,AI,,ATN,,"Aptron is building an AI protocol designed to enhance Web3 for retail users and businesses by combining custom Large Language Models with intuitive tools for RWA, GameFi, SocialFi, DePIN, and more.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/aptronai,,,,,,,true,false
Apus,ztd8go,https://www.apus.network/,AI,,,,Apus is a decentralized AI bot creator network that simplifies AI model design using blockchain.,,ZZ,,https://twitter.com/apus_network,1095244414454091878,https://t.me/+AWdHtLSl2m4yM2I1,https://medium.com/@apusnetwork,https://github.com/apuslabs,http://www.linkedin.com/company/apus-network,,true,false
Aqtis,t39a28,https://aqtis.io/,NOT_DEPIN,ETHEREUM,AQTIS,aqtis,"AQTIS is a next-generation DeFi company built on top of their own AI-powered quantitative technology. It harnesses the power of data mining, machine learning, and artificial intelligence to generate yield and distribute it across the AQTIS ecosystem.",,,,https://twitter.com/aqtis_io,1088485685754863616,,,https://aqtis.gitbook.io/aqtis-documentation/,,,true,false
AquaSave,j5agj9,https://aquasave.io/,SENSORS,,,,AquaSave is an ecosystem that uses IoT and blockchain technologies and relies on community participation to analyze and track the status of the planet's water resources.,,W. L.,,https://twitter.com/AquaSaveCrypto,936317978910285844,,https://medium.com/@aquabanknetwork,https://github.com/AquaSave-io,https://www.linkedin.com/company/aquasave-io/,,true,false
Arbitrum,v0j5p5,https://arbitrum.io/,NOT_DEPIN,ETHEREUM,ARB,arbitrum,"Arbitrum: Fast, scalable and cost-efficient Ethereum scaling solution.",L1/L2,,,https://twitter.com/arbitrum,585084330037084172,https://t.me/s/arbitrum,https://medium.com/offchainlabs,,,,true,false
Arbius,oxh2i6,https://arbius.ai/,COMPUTE,ETHEREUM,AIUS,arbius,"Arbius is a decentralized network for machine learning and a token with limited inflation. New coins are generated with GPU power by participating in the network. ",,EV3 Sal,,https://twitter.com/arbius_ai,1207744123445182514,,,,,,true,false
Arc,234u26,https://www.helloarc.ai/,AI,ETHEREUM,ARC,arc,Arc is a cutting-edge Web3 and AI company offering tools for developing decentralized projects.,,,,https://twitter.com/ARCreactorAI,835671167838060584,,https://arc-market.medium.com/,https://github.com/ARC-MARKET/,http://www.linkedin.com/company/arcdefi,,true,false
Arcblock,w4zy3x,https://www.arcblock.io/en,NOT_DEPIN,ETHEREUM,ABT,arcblock,"ArcBlock is a new decentralized developer platform that simplifies the development of Distributed Ledger Technology (DLT), Blockchain, Web3, and AI.",,,,https://twitter.com/ArcBlock_io,,,,https://github.com/arcblock?locale=en,https://www.linkedin.com/company/arcblock/?locale=en,,true,false
Archblock,rq4805,https://www.archblock.com/,BLOCKCHAIN_INFRA,,,,"Archblock is a decentralized alternatives marketplace built on TrueFi's open, transparent and immutable financial infrastructure.",,,,https://twitter.com/archblock_,,,https://www.archblock.com/blog,,https://www.linkedin.com/company/archblock/,,true,false
Architex,qx6nyb,https://architex.ai/,COMPUTE,ETHEREUM,ARCX,architex,"Architex is a mining layer targeting Proof-of-Work (POW) blockchains and AI networks such as Bitcoin, Bittensor, and Morpheus through its decentralized ASIC & GPU hardware infrastructure.",,ZZ,,https://twitter.com/Architex_ai,,,,,,,true,false
Archon,vltnk6,https://archon.network/,COMPUTE,,,,"Archon is a developer of a decentralized protocol enabling scientific research with secure storage, access, and governance.",Storage,ZZ,,,,,,,,,true,false
Arcium,v29y88,https://arcium.com/,COMPUTE,,,,"Arcium is a parallelized confidential computing network that provides developers and applications with a trustless, verifiable, and efficient framework to run encrypted computations.",,EV3 Sal,,https://twitter.com/ArciumHQ,963285822327652403,,,,,,true,false
ArcMind AI,ijwxwo,https://arcmindai.app/,PENDING,,,,,,ZZ,,https://x.com/arcmindai,,,,,,,true,false
Arctail,z931sb,https://www.arctail.com/,NOT_DEPIN,,,,Arctail is builduing a new infrastructure for on-chain finance.,,,,,,,,,,,true,false
ArcX,c5e8w4,https://arcx.gg/,COMPUTE,,,,"ArcX integrates physical arcade machines with blockchain technology, enabling users to deploy and earn tokens by providing gaming computing power.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/arcx_games,,,,,,,true,false
Arden,23pr35,https://www.arden.cc/,NOT_DEPIN,,,,"Arden is a gamified consumer engagement platform that integrates with existing systems to deliver personalized loyalty experiences using blockchain and machine learning for scalable, automated personalization.",,EV3 Sal,,,,,,,,,true,false
ArDrive,e9qw0z,https://ar.io/,COMPUTE,,,,ar.io is a network of decentralized gateways and permanent domains for the Arweave ecosystem.,Storage,W. L.,,https://twitter.com/ar_io_network,908759493943394334,,,https://github.com/ar-io,https://www.linkedin.com/showcase/ar-io/,,true,false
Ares Protocol,obq296,https://www.aresprotocol.io/,BLOCKCHAIN_INFRA,POLKADOT,ARES,ares-protocol,Ares is a decentralized cross-chain oracle platform that provides secure and reliable data services for the Polkadot DeFi ecosystem.,Oracle,ZZ,,https://twitter.com/AresProtocolLab,857112014648115221,https://t.me/AresProtocolLab,https://aresprotocollab.medium.com/,https://github.com/aresprotocols,https://www.linkedin.com/company/aresprotocol/,,true,false
Argon,vc3622,https://www.argonsuite.org/,BLOCKCHAIN_INFRA,,,,Aragon is a software tools provider for direct democracy.,,,,,,,,https://github.com/alex-dp/solana-democracy,,,true,false
Argus,l3bqbb,https://argus.gg/,BLOCKCHAIN_INFRA,,,,"Argus is a game developer and publisher that pioneering a game technology architecture that allows games, marketplaces, public good game infrastructures, and user-generated content/platforms to communicate and interoperate seamlessly.",,,,,1113162492445724723,,,,,,true,false
AristotleAI,gtqv1n,https://www.aristotle-ai.com/,AI,,,,AristotleAI provides personalized learning experiences and insights.,,,,https://twitter.com/0xAristotleAI,,,,,,,true,false
Ark,f918a3,https://ark.io/,NOT_DEPIN,,,,"Ark is a layer-2 protocol enabling cheap, anonymous, off-chain Bitcoin payments.",L1/L2,ZZ,,https://twitter.com/survivetheark,,https://t.me/s/ARK_Trading_Desk?before=3180,https://projectark.medium.com/,https://github.com/ArkEcosystem,https://uk.linkedin.com/company/ark-schools,,true,false
Arkham,zgyen3,https://www.arkhamintelligence.com/,BLOCKCHAIN_INFRA,ETHEREUM,ARKM,arkham,"Arkham is a cutting-edge crypto intelligence platform that specializes in the analysis and deanonymization of blockchain transactions, providing users with detailed insights into the real-world entities behind blockchain activities.",,ZZ,,https://x.com/ArkhamIntel,,,,,,,true,false
Arkreen,wyn0zn,https://arkreen.com/,ENERGY,POLYGON,AKRE,arkreen-token,Arkreen is a Web3-powered digital infrastructure for global distributed renewable energy resources.,,W. L.,,https://x.com/arkreen_network,1022165037235839007,https://t.me/arkreen_network,https://medium.com/@arkreen,https://github.com/arkreen,https://www.linkedin.com/company/arkreen/,,true,false
Armur,ka2bzq,https://armur.ai/,AI,,,,Armur Ai is a web3 cybersecurity product suite/platform that helps secure decentralized applications and blockchain solutions.,,ZZ,,https://twitter.com/armur_ai,1021371417134125106,,https://armur.medium.com/,,https://www.linkedin.com/company/armurai/,,true,false
ARPA,ilm8kz,https://www.arpanetwork.io/en-US,BLOCKCHAIN_INFRA,ETHEREUM,ARPA,arpa,"ARPA Network is a decentralized secure computation network enhancing blockchain security and privacy through its threshold BLS signature infrastructure, supporting applications like verifiable RNG, secure wallets, and cross-chain bridges.",,ZZ,,https://twitter.com/arpaofficial,1008819223998509138,,,,,,true,false
Artifact,ofvxzv,https://www.gotartifact.com/,PENDING,,,,,,EV3 Sal,,,,,,,,,TRUE,FALSE
Artify,22cfnq,https://artifylabs.io/,AI,ETHEREUM,AFY,artify,Artify is a platform for artists to create and sell artwork without any additional costs.,,,,https://twitter.com/artifyerc,,https://t.me/artifylabs,https://medium.com/@artifylabs,,http://www.linkedin.com/company/artifylabs,,false,false
Artrix AI,mcbjkx,https://artrix.ai/,RWA,,ATX,,"Artrix AI is an AI-powered art gallery platform utilizing blockchain to facilitate global art interactions, secure transactions, and promote high-quality art culture.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/aiartrix,,,,,,,true,false
Arttoo,xa5vpi,http://www.arttoo.network/,RWA,,,,Arttoo is a platform that allows for the fractionalized trading of physical artwork.,,,,,,,,,,,true,false
Arweave,0vks67,https://www.arweave.org/,COMPUTE,NATIVE,AR,arweave,Arweave is a permanent and decentralized web inside an open ledger.,Storage,,,https://twitter.com/ArweaveTeam,829732720505520150,,https://arweave.medium.com/,,http://www.linkedin.com/company/arweave,,true,false
Ascend,xhpnwq,https://www.ascend.sh/,SENSORS,,,,Ascend is a social accountability app that allows users to build good habits in a fun and social way while ensuring they get punished if they don't commit.,,EV3 Sal,,https://twitter.com/ascend_sh,,,,,,,true,false
assisterr,u1muwp,https://www.assisterr.ai/,AI,,,,"assisterr is and incentive-driven Network of Community-owned AI Models for Developers, Autonomous AI agents, and Enterprises.",,ZZ,,https://twitter.com/assisterr,1081284500543246448,,,,,,true,false
Astar,j764ic,https://astar.network/,NOT_DEPIN,ETHEREUM,ASTR,astar,Astar Network is a decentralized blockchain platform for Web3 innovations.,,,,,644182966574252073,,,,,,true,false
AsteriskDAO,v4wfgp,https://asteriskdao.xyz/,SCIENCE,,,,AsteriskDAO is a Web3 blockchain organization working to change the paradigm of womxn’s non-reproductive health worldwide by building the first-of-its-kind databases specific to the disorders that affect them the most.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/asteriskdao,,,,,,,true,false
Aston,7wi7uw,https://www.astonlabs.co/,ENERGY,,,,Aston Labs: Decentralized energy & infrastructure network. Aston Tokens = network ownership.,,,,,,,,,http://www.linkedin.com/company/aston-labs-co,,true,false
Astral,55edse,https://astral.global/,BLOCKCHAIN_INFRA,,,,Astral develops open-source tools and infrastructure that allows users to build location-based dapps.,,EV3 Sal,,https://twitter.com/astralprotocol,,,,,,,true,false
Astran,4x50xh,https://astran.io/,NOT_DEPIN,,,,"Astran: Cybersecurity startup with Omnicloud, a decentralized data storage solution.",Software,,,https://twitter.com/astran_,,,,,http://www.linkedin.com/company/astran-io,,true,false
Astria,lgm1f3,https://www.astria.org/,NOT_DEPIN,,,,Astria Developer: Decentralization platform replacing centralized sequencers.,,,,https://twitter.com/AstriaOrg,1163902555080904715,,,https://github.com/astriaorg,http://www.linkedin.com/company/astria-labs,,true,false
Asyrt,x58tx5,,BLOCKCHAIN_INFRA,,,,"Asyrt is developing an automatic invoice verification system using TLSNotary proofs. ",,EV3 Sal,,,,,,,,,true,false
Athena,ttxmp2,https://www.athenadao.co/,NOT_DEPIN,ETHEREUM,ATH,athenadao,AthenaDAO is a Community-Owned Translational Research Engine that focuses on supporting and incubating women’s health research projects during the initial stages of translational research.,,ZZ,,,862703551860047902,,,,,,true,false
Athenas,sjh4mq,https://athenasai.io/,AI,ETHEREUM,ATH,athenas-ai,Athenas AI is a provider of a novel approach for creating a multifunctional AI application using large language models (LLMs).,,ZZ,,https://twitter.com/Athenas_ai,,,,,,,true,false
Athene,ck1ptn,https://athene.network/,BLOCKCHAIN_INFRA,ETHEREUM,ATH,,Athene Network is a Layer 2 Mainnet for Ethereum and a comprehensive ecosystem with its free daily mining coin app.,,ZZ,,https://twitter.com/Athene_Network,,,,,,,true,false
Atlantis,vv9k2c,https://www.atlantians.world/,PENDING,,,,,,ZZ,,https://twitter.com/AtlantisDao1,,,,,,,true,false
Atlas Navi,dc50kw,https://www.atlasnavi.com/,MOBILITY,ETHEREUM,NAVI,atlas-navi,"Atlas Navi is a Drive to Earn navigation app that uses AI and the smartphone camera to avoid traffic by detecting road conditions, accidents, traffic in each lane, police vehicles, and many more.",,ZZ,,https://twitter.com/AtlasNavi,956947036605915147,https://t.me/AtlasNaviApp,,,https://ro.linkedin.com/company/atlasnavi,,true,false
Atlas,dyg01u,https://www.atlasweb3.io/,NOT_DEPIN,,,,"Atlas is a global blockchain infrastructure-as-a-service (IAAS) group offering a broad range of value-added services including distributed high-performance computing, node infrastructure, networking, hardware, API support and storage to drive and maintain the Web 3.0 ecosystem.",,,,https://twitter.com/atlasweb3group,,,,,https://www.linkedin.com/company/atlasweb3/,,true,false
Atom Network,pn9n8b,,COMPUTE,,,,"Atom Network is an open, distributed, peer-to-peer compute network built by leveraging Solana’s “Generalized” state compression.",,ZZ,,https://twitter.com/AtomWeb3,,,,,,,true,false
Atoma,b85vw4,https://www.atoma.network/,AI,,,,Atoma Network is a decentralized platform focused on enabling transparent and collaborative AI development with an emphasis on verifiable inference to establish trust in AI applications.,,EV3 Sal,,https://twitter.com/atoma_network,,,,,,,true,false
ATT,ssz1o4,https://www.attglobal.io/,PENDING,,,,,,EV3 Sal,,https://x.com/aiwayworld,,,,,,,TRUE,FALSE
AuditX,o7wclz,https://auditx.io/,BLOCKCHAIN_INFRA,,AUDITX,,AuditX is a DePIN-powered and AI-driven audit layer for L2 Rollups.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://auditx.io/,,,,,,,true,false
Audius,4xwmst,https://audius.co/,NOT_DEPIN,ETHEREUM,AUDIO,audius,"Audius is a decentralized, community-owned and artist-controlled music-sharing protocol.",,ZZ,,https://twitter.com/audius,557662127305785361,https://t.me/audius,https://blog.audius.co/,,https://www.linkedin.com/company/audius-project/,,true,false
Augment,7al613,https://augment.net/,COMPUTE,NATIVE,AUG,,Augment is a blockchain-based B2B marketplace for accessing GPU computing resources with smart metering and on-chain energy verification.,GPUs,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/augment,,,,,,,true,false
Augrade,obnzup,https://www.augrade.com/,NOT_DEPIN,,,,Augrade is an AI-powered platform to automate design/engineering and enhance manufacturing for heavy industries.,,EV3 Sal,,https://x.com/augrade_inc,,,,,,,true,false
Augur,boagvx,https://www.augur.net/,NOT_DEPIN,ETHEREUM,REP,augur,Augur is a decentralized prediction market platform that utilizes Ethereum smart contracts to create a trustless oracle and forecasting tool where users can speculate on the outcome of events.,Prediction Market,ZZ,,,378030344374583298,,,,,,true,false
Auki,p2unbp,https://www.aukilabs.com/,SENSORS,BASE,AUKI,auki-labs,"Auki is a decentralized machine perception network that enables devices, robots, and AI to collaboratively build spatial awareness, applicable in augmented reality, robotics, smart cities, autonomous delivery drones, and spatial intelligence.",,W. L.,,https://x.com/AukiNetwork,609977179182333967,,https://www.aukilabs.com/community/news,https://github.com/aukilabs,,,true,false
AuraSci,680ftq,https://aurasci.xyz/,SCIENCE,,,,"AuraSci is a platform that pioneers decentralized, interdisciplinary research by uniting global thinkers and innovators, fostering transparency, trust, and collaborative exploration to redefine scientific progress.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/aura_sci,,,,,,,true,false
Aurivis,hkmd2q,https://aurivis.io/,COMPUTE,ETHEREUM,AURI,aurivis,"Aurivis is a decentralized marketplace that enables users to buy or rent GPU computing power, servers, and Web3 infrastructure while offering a revenue-sharing mechanism for token holders to foster a community-driven ecosystem.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/auriviseth,,,,,,,TRUE,FALSE
Aurora,tfu536,https://aurora.dev/,NOT_DEPIN,ETHEREUM,AURORA,aurora-near,"Aurora is a performant, scalable, and carbon neutral solution that executes Ethereum contracts on the NEAR blockchain.",L1/L2,,,https://twitter.com/auroraisnear,856517297141317643,https://t.me/auroraisnear,https://medium.com/aurora-platform,https://github.com/aurora-is-near,http://www.linkedin.com/company/aurora-is-near,,true,false
Autify,hoznm0,https://www.autifynetwork.com/,NOT_DEPIN,,,,Autify Network is developing a decentralized Supply-chain management and traceability platform.,,ZZ,,https://twitter.com/autifynetwork,,,https://autifynetwork.com/the-blog/,,https://www.linkedin.com/company/autify-network/,,true,false
Autochain,dwrle8,https://autochain.info/,MOBILITY,,,,Autochain is a decentralized platform for authenticating vehicle history through blockchain.,,,,https://twitter.com/forethought_ai,,,,,https://www.linkedin.com/company/forethought-ai/,,true,false
AutoGPT,n7zd4p,https://autogpt.net/,AI,,,,"AutoGPT is the vision of the power of AI accessible to everyone, to use and to build on. ",,EV3 Sal,,,,,,,,,true,false
Automata Network,so4way,https://www.ata.network/,BLOCKCHAIN_INFRA,,,,Automata Network is a modular attestation layer that extends machine-level trust to Ethereum by leveraging optimistic rollups and zero-knowledge proofs.,,ZZ,,https://twitter.com/AutomataNetwork,812990347114315786,,,,,,true,false
Autometa,b73ehy,https://www.autometa.network/,SENSORS,NATIVE,ATM,,"Autometa is a platform that empowers users to securely share driving data, earn rewards through Drive-to-Earn, and participate in a privacy-focused automotive ecosystem powered by blockchain technology.",,EV3 Sal,,https://twitter.com/AutometaNetwork,,,,,,,true,false
Autonolas,5wvni1,https://olas.network/,AI,ETHEREUM,OLAS,autonolas,Autonolas is a decentralized network of autonomous AI agents.,Agents,,,https://twitter.com/autonolas,899649805582737479,,,https://github.com/valory-xyz,,,true,false
Autonomous Forest,b5m10o,https://autonomousforest.org/,PENDING,,,,,,EV3 Sal,,https://x.com/forest_ev,,,,,,,true,false
Autonomy,jow0l5,https://www.autonomynetwork.io/,NOT_DEPIN,,,,Autonomy Network is a decentralized automation protocol that allows users to have transactions automatically executed in the future under arbitrary conditions.,,ZZ,,https://twitter.com/AutonomyNetwork,1012829124395532328,,https://blog.autonomynetwork.io/,https://github.com/Autonomy-Network,https://www.linkedin.com/company/autonomynetwork/,,false,false
Autonomys,p9x9o3,https://www.autonomys.net/,PENDING,,,,,,ZZ,,https://twitter.com/AutonomysNet,,,,,,,true,false
AutoPi,8sl5rq,https://www.autopi.io/,WIRELESS,,,,"AutoPi is an industry-leading provider of IoT infrastructure, offering specialized telematics devices and a cloud-based management platform for businesses with fleets.",,ZZ,,,,,,,,,true,false
Avalanche,wl4ipp,https://www.avax.network/,NOT_DEPIN,,AVAX,avalanche-2,"Avalanche is the fastest, most reliable smart contracts platform in the world.",L1/L2,,,https://twitter.com/avax,578992315641626624,,https://www.avax.network/blog,,https://www.linkedin.com/company/avalancheavax/,,true,false
Aventus,6u1zhk,https://aventus.io/,NOT_DEPIN,ETHEREUM,AVT,aventus,"Aventus enables scalable, interoperable, and carbon-neutral solutions for companies.",,,,https://twitter.com/aventusnetwork,,,https://medium.com/aventus,https://github.com/Aventus,https://www.linkedin.com/company/aventus,,true,false
Avian,bfy3ta,https://www.avn.network/en,RWA,NATIVE,AVN,avian,"Avian Network is a dual algorithm, PoW-secured blockchain designed for low-cost and user-friendly asset tokenization and management.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/avianfoundation,,,,,,,true,false
Avive World,hhkxx7,https://www.avive.world/,BLOCKCHAIN_INFRA,ARBITRUM,AVIVE,avive,"Avive World is a geosocial protocol and token-controlled community that emphasizes individual data sovereignty through its ""Sovereign Footprint"" concept, offering members immutable digital identities and exclusive access to content and services.",,ZZ,,,,,,,,,true,false
AWARE,rkfiyk,https://wearaware.co/,BLOCKCHAIN_INFRA,,,,AWARE traces cotton with tracer particles to ensure sustainable textiles.,,,,https://twitter.com/Aware,,,,https://github.com/awareframework,https://www.linkedin.com/company/aware-inc.,,true,false
Axal,xex8ed,https://www.ax.al/,BLOCKCHAIN_INFRA,,,,Axal is an intent coordination network powering autonomous web3 systems.,,EV3 Sal,,https://twitter.com/getaxal,,,,,,,true,false
AXEL,52m3lc,https://www.axel.org/,COMPUTE,NATIVE,AXEL,axel,"AXEL App is a decentralized, distributed device-to-device file management system that allows sharing and storage without compromising privacy. ",Storage,ZZ,,https://x.com/axelunlimited,407699573381791755,,,,,,true,false
Axelar,0fb1s7,https://axelar.network/,NOT_DEPIN,,AXL,,"Axelar provides a decentralized network that connects dApp builders with blockchain ecosystems, applications and users for frictionless cross-chain communication. Axelar consists of a protocol suite, tools, and APIs, designed to break down the barriers to cross-chain communication.",,,,,770814806105128977,,,,,,true,false
Axiom,gljif2,https://www.axiom.xyz/,NOT_DEPIN,,,,"Axiom enables smart contracts to trustlessly compute over Ethereum's entire history using ZK proofs, allowing developers to access comprehensive on-chain data with lower costs and without additional trust assumptions.",ZK,ZZ,,https://twitter.com/axiom_xyz,1028547935195119617,,,,,,true,false
AXIS,56jkto,https://axistoken.io/,BLOCKCHAIN_INFRA,ETHEREUM,AXIS,axis-token,AXIS is a blockchain-powered direct freight network.,,,,https://twitter.com/axis_token,1224009941933756489,https://t.me/laneaxis,,https://github.com/laneaxis/axisToken_smart_contact,,,true,false
Axlflops,irqc43,https://axlflops.ai/,COMPUTE,SOLANA,AIGT,,Axlflops is a decentralized AI computing network providing GPU infrastructure to democratize access to AI computing resources.,,EV3 Sal,,https://twitter.com/Axlflops,,,,,,,true,false
AxonDAO,0iwefi,https://www.axondao.io/,SCIENCE,ETHEREUM,AXGT,axondao-governance-token,AxonDAO is creating a DeSci system and global protocol that pays verified clinical trial participants and therapists in tokens for collecting biometric data.,,ZZ,,https://twitter.com/AxonDAO,909214044085432374,,,,,,true,false
AYDO,3g5b35,https://www.aydo.ai/,SENSORS,,,,Aydo is a decentralized network of smart home devices.,,ZZ,,https://x.com/AYDO_AI,,https://t.me/aydoai,,https://github.com/AYDOAI,,,true,false
aZen,01ooy8,https://azenprotocol.io/#/home,COMPUTE,,aZen,,"aZen DePin is a decentralized infrastructure for ubiquitous computing that uses blockchain to create a shared economy of computing power, connecting and managing resources globally to support various applications with a stable, distributed network.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/azen_protocol,,,,,,,true,false
B-cube.ai,qug1e6,https://www.b-cube.ai/,AI,ETHEREUM,BCUBE,b-cube-ai,"B-cube.ai: AI platform for clients to create, optimize, and automate customized crypto trading strategies.",,,,https://twitter.com/Bcubeai,,,https://bcubeai.medium.com/,https://github.com/b-cube-ai,https://www.linkedin.com/company/11410299/,,true,false
B-Datagray,t47npe,https://www.b-datagray.com/,COMPUTE,,,,B-Datagray is a company developing a Blockchain infrastructure for decentralized GPU/CPU cloud computing.,GPUs,ZZ,,https://twitter.com/b_datagray,,https://t.me/bdatagray,,https://github.com/Datagen-Project,https://www.linkedin.com/company/b-datagray,,true,false
Bacalhau,jtoxcg,https://www.bacalhau.org/,COMPUTE,,,,"Bacalhau: Fast, efficient, secure computation platform.",,,,https://x.com/BacalhauProject,,,,https://github.com/bacalhau-project,https://www.linkedin.com/showcase/bacalhau-project/,,true,false
Bad Idea AI,a1y6iz,https://www.badidea.ai/,AI,ETHEREUM,BAD,bad-idea-ai,Bad Idea AI connects meme coin culture with artificial intelligence.,,,,https://www.twitter.com/badideaai,1106247023474249831,https://t.me/badideaai,,,,,true,false
Badger,2z45bk,https://badger.com/,NOT_DEPIN,ETHEREUM,BADGER,badger,BadgerDAO is a decentralized collective of builders supporting community-driven growth for Bitcoin across DeFi.,,,,,743271185751474307,,,,,,true,false
Bagel,0f91ta,https://www.bagel.net/,AI,,,,"Bagel is an open protocol for humans and autonomous AI agents to collectively build, trade, and license Machine Learning datasets.",,ZZ,,https://twitter.com/bagel_network,,,,,,,true,false
Bair.ai,n6198m,https://bair.ai/,AI,,BAIR,,BAIR.AI is an All-Inclusive Generative AI platform with its custom LLM and Prompt to Earn Model for the Web 4 world,,ZZ,,https://twitter.com/bair_ai,1128757006178717696,,,,,,true,false
BalanceAI,mxlr5s,https://www.balancedao.io/,AI,ETHEREUM,BAI,balance-ai,"BalanceAI Network is a decentralized, blockchain-based protocol that powers a secure AI Agents Marketplace, enabling users to create, connect, and monetize AI models and expertise in a transparent and safe environment.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/balance_ai,,,,,,,true,false
Band,w2g116,https://www.bandprotocol.com/,BLOCKCHAIN_INFRA,,BAND,,Band Protocol is a cross-chain data oracle platform that aggregates and connects real-world data and APIs to smart contracts.,,,,,694023152795385948,,,,,,true,false
Banger,0c6a3p,,PENDING,,,,Marketplace for buying and selling tweets.,,EV3 Sal,,,,https://t.me/rawlodawgins,,,,,true,false
Banksea Finance,v5r18r,https://banksea.finance/,AI,,,,Banksea NFT is the first AI-Driven NFT Oracle & NFT Liquidity Infrastructure.,,,,,856444560371875891,,,,,,true,false
Banyan,jkyr67,https://www.banyan.computer/,COMPUTE,,,,Banyan Operator is a web3 storage platform for on-chain data storage on a robust storage protocol.,Storage,ZZ,,https://twitter.com/BanyanComputer,,,,,https://www.linkedin.com/company/banyancomputer,,true,false
Barterchain,v8cjbl,https://www.barterchain.io/,HUMAN_CAPITAL,,,,"Barterchain is a peer to peer platform, where members can swap their skills and services for free.",,,,https://x.com/barterchainapp,,,,,,,true,false
BasedAF,tc8r0r,https://based-af.com/,NOT_DEPIN,,,,BasedAF is leveraging real-time rendering to create TV shows inside video game worlds.,,EV3 Sal,,https://twitter.com/basedaf_,1044907417407852554,,,,,,true,false
BasedAI,ooffc8,https://www.getbased.ai/,AI,,,,BasedAI is a Decentralized P2P Network for Zero-Knowledge Large Language Models (zk-LLMs).,,EV3 Sal,,https://twitter.com/getbasedai,,,,,,,true,false
Basin,p6wa6a,https://basin.textile.io/,COMPUTE,,,,"Basin is a transformative decentralized storage solution empowering AI/ML builders, decentralized networks, DePINs, and beyond, to innovate, collaborate, and grow faster.",Storage,EV3 Sal,,https://x.com/textileio,,,,,,,true,false
Battle Infinity,qx4wxc,https://battleinfinity.io/,NOT_DEPIN,BINANCE,IBAT,battle-infinity,Battle Infinity: Metaverse gaming platform with P2E battle games in IBAT Battle Arena.,Gaming,,,https://twitter.com/ibatofficial,1226500682337746996,https://t.me/battleinfinity,https://medium.com/tag/battle-infinity,https://github.com/solidproof/projects/blob/main/Battle%20Infinity/SmartContract_Audit_Solidproof_IBAT.pdf,http://www.linkedin.com/company/battle-infinity,,true,false
BAXUS,ddt6ub,https://www.baxus.co/,RWA,,,,"Baxus is an on-chain wine and spirits marketplace harnessing the power of blockchain to give users proof of ownership, authentication, and a safe storage solution.",,EV3 Sal,,https://twitter.com/baxusco,,,,,,,true,false
Bayesian,3045fp,https://bayesian.global/,COMPUTE,BINANCE,BAYE,bayesian,"Bayesian global AI Supercomputing Platform is a decentralized AI and blockchain platform built on the Bayesian Decentralized Computing Network Protocol and offers decentralized data storage, computation, and intelligent model training.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/bayesianbaye,,,,,,,true,false
BAZED,maga37,https://bazed.bet/,NOT_DEPIN,,,,Bazed is a PvP gaming platform using web3 technology.,Gaming,,,https://x.com/bazedarmy,,,,,,,true,false
BBS,x7oewq,https://www.bbsnetwork.io/,NOT_DEPIN,ETHEREUM,BBS,bbs-network,"BBS Network is a blockchain network of Bulletin Board Systems where users can create forums to post, comment, and share ideas while generating revenue from their content.",,ZZ,,,,,,,https://www.linkedin.com/company/bbsnet/?trk=similar-pages,,true,false
BCA,zxdk4m,https://www.bcaprotocol.org/,AI,ETHEREUM,BCA,,"BCA Protocol is a decentralized infrastructure network empowering global internet users to contribute securely and passively to a user-generated database for AI training, enabling users to earn rewards while browsing.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/bca_protocol,,,,,,,true,false
Beacon Protocol,3hpsci,https://beaconprotocol.com/,BLOCKCHAIN_INFRA,,,,"Beacon Protocol connects Web3 and Web2 by providing onchain data aggregation and orchestration, enabling fair monetization and efficient use of high-value offchain data for dApps.",Oracle,Nick Carp,,https://x.com/BeaconProtocol,,,,,,,TRUE,FALSE
Beam Cloud,ernr38,https://www.beam.cloud/,COMPUTE,,,,Beam Cloud is a serverless GPU platform for deploying ML models without managing infrastructure.,,ZZ,,https://twitter.com/beam_cloud,,,,,,,true,false
Beam,mphwz0,https://beam.mw/,NOT_DEPIN,,BEAM,beam,"Beam is an advanced Proof-of-Work (PoW) Layer-1 privacy blockchain, where all transactions are concealed by default and no information about the sender, the receiver, or the amount is visible on-chain.",,,,,481833926697156611,,,,,,true,false
Beamable,5eljih,https://beamable.com/,COMPUTE,,,,"Beamable is a decentralized gaming infrastructure and development platform that enables Unity and Unreal developers to add social, commerce, and content management features, using node-based blockchain architecture for scalability and performance.",Gaming,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/Beamable,,,,,,,true,false
Bear AI,twt5j6,https://bearai.org/,AI,BINANCE,BAI,bearai,"Bear AI is an innovative crypto project designed to empower users with insights to navigate the crypto market. Their AI allows users to ask crypto questions and receive knowledgeable responses, making crypto education accessible and dynamic. ",,ZZ,,,,,,,,,true,false
Beegol,qvuc9n,https://beegol.com/,WIRELESS,,,,Beegol is a machine learning-based platform for monitoring and improving broadband and Wi-Fi customer experience.,,,,,,,,,https://www.linkedin.com/company/beegol/,,true,false
Beluga,c9xfts,https://heybeluga.com/,NOT_DEPIN,,,,Beluga is a trusted crypto platform that onboards and guides new users through their crypto journey.,,,,https://x.com/getbeluga,,,,,http://www.linkedin.com/company/heybeluga,,true,false
Beoble,y4wofx,https://www.beoble.io/,COMPUTE,,,,Wallet to wallet messaging app,,EV3 Sal,,https://x.com/beoble_official,,,,,,,true,false
Bepro,qkto8r,https://bepro.network/,HUMAN_CAPITAL,ETHEREUM,BEPRO,bepro-network,"Bepro is a task-based marketplace created to help organizations and builders. Organizations can easily create and launch tasks, while builders have the opportunity to work on them and earn crypto as payment.",,ZZ,,https://x.com/bepronet,849009081795739669,,,,,,true,false
BerryLab,zkl7d3,https://berrylab.xyz/,PENDING,,,,,,EV3 Sal,,https://x.com/berrylabxyz,,,,,,,true,false
Bethel,opb8ug,https://bethelnet.io/,COMPUTE,POLYGON,BECX,bethel,"Bethel is a hack-proof, blockchain-based secure decentralized file storage platform leveraging Zero-Knowledge Proofs.",Storage,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/BethelPlatform,,,,,,,true,false
BetterTherapy.AI,bxolni,https://bettertherapy.ai/,HUMAN_CAPITAL,KASPA,BTAI,,BetterTherapy.AI is an affordable mental healthcare platform that leverages AI-powered digital twin doctors and incentivizes participation through blockchain-based tokenization of therapy sessions.,Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/BetterTherapyAI,,,,,,,true,false
Beyond Network,65ib9u,https://beyondnetwork.xyz/,AI,,B,,"Beyond Network is a decentralized AI inference protocol that democratizes access to AI by leveraging decentralized compute, enabling users to contribute compute power, run AI applications, and earn rewards.",Inferencing,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/0xBeyondNetwork,,,,,,,TRUE,FALSE
Beyond,3kk637,https://beyond.link/,BLOCKCHAIN_INFRA,ETHEREUM,BP,beyond-protocol,"Beyond Protocol is a blockchain for IoT, providing decentralized security layer and smart contracts.",L1/L2,,,https://twitter.com/beyondprotocol1,,http://t.me/beyondprotocol,https://beyondprotocol.medium.com/,https://github.com/beyondprotocol,http://www.linkedin.com/company/beyond-protocol,,true,false
BFLO,tddg69,,PENDING,,,,,,ZZ,,https://x.com/bflotech,,,,,,,true,false
Big Data,6ms5ds,https://bigdataprotocol.com/,COMPUTE,ETHEREUM,BDP,big-data-protocol,Big Data is a platform for sharing commercial data and services through DeFi protocol and Web3 marketplace.,,ZZ,,https://twitter.com/bigdataprotocol,,https://t.me/bigdataprotocol,https://medium.com/big-data-protocol,,https://linkedin.com/company/big-data-protocol,,true,false
BigCode,3bhj2n,https://www.bigcode-project.org/,NOT_DEPIN,,,,"BigCode Project is an open scientific collaboration run by Hugging Face and ServiceNow Research, focused on open and responsible development of LLMs for code.",,ZZ,,https://twitter.com/BigCodeProject,,,,,,,true,false
Binaryx Platform,8ubvtp,https://www.binaryx.com/,RWA,,,,Binaryx Platform is a fractional real estate investment service that help investors get passive income from fractional ownership of properties worldwide.,Real Estate,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/BinaryxPlatform,,,,,,,TRUE,FALSE
BIO,963ypy,https://www.bio.xyz/,PENDING,,,,,,ZZ,,https://twitter.com/bio_xyz,,,,,,,true,false
Bison,f0ceeu,https://bisonlabs.io/#/dashboard,NOT_DEPIN,,,,Bison is a ZK-STARK roll-up built on Bitcoin via Ordinals that aims to boost Bitcoin's user experience with faster functionality while retaining its security.,ZK,ZZ,,https://twitter.com/bison_labs,1216600727309258782,,,,,,true,false
Bistroo,qpkhj7,https://www.bistroo.io/,HUMAN_CAPITAL,ETHEREUM,BIST,bistroo,Bistroo is a decentralized marketplace for food & beverage delivery.,,ZZ,,https://twitter.com/BistrooIO,,,https://bistroo.medium.com/,https://github.com/bistroo,https://www.linkedin.com/company/bistroo-nl/,,true,false
BitAds,2cgzxh,https://bitads.ai/,NOT_DEPIN,BITTENSOR,,,"BitAds is a Decentralized Advertising Network that leverages the Bittensor Network to offer cost-effective, high-quality advertising through a unique incentive mechanism for miners and validators.",,ZZ,,https://twitter.com/bitads_ai,,,,,,,true,false
Bitai,95ctx1,https://bitai.me/,AI,,,,"Bitai is a Web3 decentralized platform integrating AI, offering AI intelligent multi-account systems, smart contract wallets, trading robots, precise marketing, and decentralized social and media services.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/bitai_me,,,,,,,true,false
BitBoy,u8wsg7,https://www.bitboy.games/,COMPUTE,,,,"BitBoy is a Bitcoin-based gaming console powered by GameFi and DePIN, allowing users to earn points and farm airdrops simply by running the device.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/bitboyone,,,,,,,true,false
BitClouds,6be2h9,https://bitclouds.tech/,COMPUTE,ETHEREUM,BCS,bitclouds,"BitClouds is a decentralized cloud mining platform leveraging DePIN technology to democratize Bitcoin mining by allowing users to rent hashrate easily, ensuring accessibility, transparency, and sustainability.",GPUs,ZZ,,https://x.com/bitclouds_DePIN,,,,,,,true,false
BitDance,vtmopb,http://www.bitdance.fun/,AI,,BTD,,BitDance Network is a Layer 2 for medical AI that enables trusted collection of healthcare data with smart wearable devices and builds a decentralized data market through privacy computing chips in TEE.,Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/RuiZhao1550286,,,,,,,true,false
BitDoctor,ndqqzq,https://bitdoctor.ai/,AI,,,,"Bitdoctor is a comprehensive medical AI that tackles the world's healthcare disparities, providing life-saving diagnoses and vital medical support to the most underserved communities through blockchain and DEPIN.",Health,W. L.,,https://twitter.com/bitdoctorai,,,,,,,true,false
Bitenet,5ctgya,,PENDING,,,,,,ZZ,,https://twitter.com/bitenet_io,,,,,,,true,false
BitGPT,sh1nrt,https://bitgpt.network/,AI,,,,"BitGPT is a decentralized AI platform that integrates AI models into Web3 wallets, enabling collaborative ML, secure distributed storage, and efficient global computing power for enhanced Web3 interactions and personalized dApp experiences.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/BitGPTnetwork,,,,,,,true,false
Bitmind,no3gz8,https://www.bitmindlabs.ai/,AI,BITTENSOR,,,Bitmind is a Bittensor subnetwork for running decentralized deep fake detection models.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/bitmindai,,,,,,,TRUE,FALSE
BitMobile,71hkxg,https://www.bitmobiletech.com/,PENDING,,,,,,EV3 Sal,,https://x.com/BitMobileTech,,,,,,,true,false
bitnost.re,ss8gck,https://bitnost.re/,AI,,,,"Bitnost.re bridges Bittensor AI to Nostr social media protocol, building an access backbone for AI interaction.",,,,https://twitter.com/bitnostre,,,,,,,true,false
Bitping,x0mqmd,https://bitping.com/,COMPUTE,,,,Bitping is a distributed network intelligence solution that enables users to share CPU and bandwidth for ping tests.,,,,https://twitter.com/BitpingApp,,https://t.me/bitping,https://medium.com/@bitping/bitping-creating-a-monitor-24e2814ff148,https://github.com/BitpingApp,http://www.linkedin.com/company/bitping,,true,false
Bitrock,fy70r2,https://bit-rock.io/,NOT_DEPIN,ETHEREUM,BROCK,bitrock,"Bitrock: blockchain with low fees, high speed, and multichain DEX.",,,,https://twitter.com/BitRockChain,1131681197504860231,https://t.me/Bitrockchain,https://bitrockchain.medium.com/,https://github.com/BitrockChain,http://www.linkedin.com/company/discord,,true,false
BitsCrunch,x835xi,https://bitscrunch.com/,NOT_DEPIN,ETHEREUM,BCUT,bitscrunch-token,"bitsCrunch is an AI-enabled, decentralized blockchain data platform that enables developers to seamlessly build reliable dApps.",,ZZ,,https://twitter.com/bitscrunch/,860459595025219585,https://t.me/bitsCrunch/,https://blog.bitscrunch.com/,,https://www.linkedin.com/company/bitscrunch/,,true,false
Bitte,mym1nz,https://www.bitte.ai/,AI,,,,Bitte is developing an AI-powered protocol that allows users to build and execute blockchain transactions via plain-language chat.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/bitteprotocol,,,,,,,true,false
Bittensor,hq4rl7,https://bittensor.com/,AI,NATIVE,TAO,bittensor,Bittensor is a peer-to-peer machine intelligence network.,,,,,799672011265015819,,https://bittensor.medium.com/,https://github.com/topics/bittensor,https://github.com/topics/bittensor,,true,false
BitTorrent,p0ra3q,https://bt.io/,COMPUTE,TON,BTT,bittorrent,"BitTorrent is a scalable, EVM-compatible, proof-of-stake layer-2 blockchain and a scalable, decentralized file storage system. ",L1/L2,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/BitTorrent,,,,,,,true,false
Bitveil,lliz51,https://bitveil.com/,NOT_DEPIN,,,,Bitveil is a web3 consulting and development company with a special focus on RWA tokenization and DePIN solutions.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/bitveilofficial,,,,,,,TRUE,TRUE
BitVPN,rjoblf,https://www.bitvpn.net/,WIRELESS,,,,BitVPN is a decentralized VPN service on TOP Network.,VPN,ZZ,,https://twitter.com/Bitvpn1,,,,,,,true,false
Bixos,ey787u,https://bixos.com/,RWA,BINANCE,UBXS,ubxs-token,"Bixos is a cutting-edge blockchain development company specializing in delivering innovative solutions across a range of blockchain technologies, including NFT-Stake, GameFi, Crypto Payment Gateway, Advanced DAO, and Real Estate Tokenization.",,ZZ,,,927874928009687090,,,,,,true,false
Black Creek,9zy8l2,https://www.blackcreekdigital.com/,COMPUTE,,,,Black Creek Digital is a developer and operator of computing facilities for decentralized and AI apps.,,ZZ,,https://twitter.com/BlackCreekDig,,,,,https://www.linkedin.com/company/black-creek-digital/,,true,false
Black Rabbit,zanbgd,https://blackrabbitai.com/,AI,ETHEREUM,BRAIN,black-rabbit-ai,"Black Rabbit AI is an AI platform that aggregates tools, making it easy to get effective results with optimized prompts.",,,,https://twitter.com/BlackRabbitAI,,https://t.me/BlackRabbitAIPortal,https://blackrabbitai.medium.com/,,,,false,false
Black Sheep,dg3bp5,https://www.theblacksheep.io/,BLOCKCHAIN_INFRA,,,,Black Sheep Group is a decentralized marketplace simplifying investing in Web3 assets.,,,,https://twitter.com/theblacksheepg,,https://t.me/blacksheep_g,,,http://www.linkedin.com/company/blacksheepgroup,,true,false
Blackbird,vhqz3k,https://www.blackbird.xyz/,HUMAN_CAPITAL,POLYGON,,,Blackbird is a loyalty and membership platform for restaurants.,,,,https://twitter.com/blackbirdvc,1090286137790169161,,,,https://www.linkedin.com/company/blackbirdvc,,true,false
Blackhat,3jgdnl,https://blackhatco.in/,NOT_DEPIN,ETHEREUM,BLKC,blackhat-coin,Blackhat cyber game: Players as DeFi protocos v AI hackerChatGPT.,,,,https://twitter.com/BlackHatEvents,822505689385533440,,,,https://www.linkedin.com/groups/37658/,,true,false
BLAGO,5gzqkg,https://blago.pages.dev/,NOT_DEPIN,TON,BLAGO,,BLAGO is a decentralized neural network for the uniform distribution of material assets between its participants.,,ZZ,,https://twitter.com/xBLAG0,,,,,,,true,false
BlastAI,lw9wd8,https://www.blastai.tech/,AI,ETHEREUM,BLAST,blastai,"BlastAI utilizes LPUs to deliver a suite of AI-powered audio intelligence products, including superior speech-to-text, human-like text-to-speech, customizable voice assistants, and direct phone number acquisition to enhance voice AI applications.",,ZZ,,https://twitter.com/BlastAI_Tech,,,,,,,true,false
Blazar Labs,9zra4b,https://wines.blazarlabs.io/,RWA,CARDANO,,,"Blazar Labs' Wine Portal is a blockchain-based supply chain tracking platform that provides wineries and consumers with verifiable, real-time data on the entire wine production process from vineyard to bottle.",,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/BlazarLabs,,,,,,,TRUE,FALSE
Blendr,cqbtys,https://www.blendr.network/,COMPUTE,ETHEREUM,BLENDR,blendr-network,"Blendr Network is a decentralized GPU computing network designed to transform AI, rendering, and simulations by leveraging underutilized global GPU resources for scalable, secure, and cost-efficient computing.",,ZZ,,https://twitter.com/BlendrNetwork,,,,,,,true,false
Blinq,5ts91p,https://blinqnetworks.com/,WIRELESS,,,,"Blinq offers affordable, high-performance 5G ready wireless solutions company for fixed and mobile services.",,,,https://twitter.com/blinqnet,,,,,https://www.linkedin.com/company/blinq-networks/,,true,false
Block Entropy,4hsfb2,https://blockentropy.ai/,AI,,,,"Block Entropy specializes in optimizing data flow through AI and ML research by offering smart routing solutions, leveraging a mix of open-source and proprietary models for cost-effective, scalable, and efficient AI services.",,,,https://twitter.com/blockentropy,,,,,,,true,false
Blockcast,fxg6py,https://blockcast.net/,WIRELESS,,,,"Blockcast is a CDN and marketplace for broadcast capacity, optimizing network traffic.",CDN,W. L.,,https://x.com/blockcastnet,,https://t.me/blockcastit,,https://github.com/topics/blockcast,https://www.linkedin.com/company/sat-blockcast/,,true,false
Blockchain Bets,afo4li,https://blockchainbets.app/,NOT_DEPIN,ETHEREUM,BCB,blockchain-bets,Blockchain Bets - decentralized casino & sports betting platform on blockchain for transparency & security.,Gaming,,,https://x.com/BCBerc20,,,,,,,true,false
BlockFlow,w0ifd2,https://blockflow.network/,BLOCKCHAIN_INFRA,,,,BlockFlow is a platform that simplifies the process of setting up database backends for dApps utilizing event-driven functionalities.,,,,https://twitter.com/flow_block,1186688557994233887,https://t.me/blockflowdata,,,https://www.linkedin.com/company/blockfloww/,,true,false
BlockGPU,8s0zub,,COMPUTE,ETHEREUM,BGPU,,BlockGPU is a decentralized network that allows gamers to monetize their gaming PCs by sharing GPU power for generative AI tasks and cryptocurrency mining.,GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/blockgpu,,,,,,,true,false
BlockJoy,krc7u7,https://www.blockjoy.com/,PENDING,,,,,,,,https://x.com/blockjoyweb3,,,,,,,true,false
BlockLand,th5rjk,https://www.block-land.org/,RWA,,,,BlockLand is a tokenized real estate investment platform offering passive income from real-world assets with blockchain security and DeFi features.,,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/BlockLand_RWA,,,,,,,true,false
Blockless,4tmf6y,https://blockless.network/,NOT_DEPIN,,BLS,blockless,Blockless is a customizable execution layer for decentralized serverless apps.,,,,https://x.com/theblockless,929539044742938634,https://t.me/blocklessofficial,,https://github.com/blocklessnetwork,http://www.linkedin.com/company/blockless,,true,false
BlockMesh,mldz2g,https://blockmesh.xyz/,WIRELESS,,BMESH,,"BlockMesh is an innovative, open, and secure network that enables users to monetize their excess bandwidth while providing consumers with increased privacy and access to data for AI, e-commerce, search engines, and other businesses.",,EV3 Sal,,https://twitter.com/blockmesh_xyz,1251252730832359544,,,,,,true,false
Blocknode,yt3jki,https://blocknode.com/,AI,,,,"Blocknode by LimeWire is a decentralized Web3 marketplace that connects GPU providers with AI companies and researchers, offering affordable, enterprise-grade GPU power while allowing GPU owners to monetize idle resources and earn rewards.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,,,,,,,,TRUE,TRUE
Blockpliance,rmla7z,https://www.blockpliance.com/,NOT_DEPIN,,,,"Blockpliance is an AI-powered platform that helps institutions detect and prevent illicit blockchain transactions, ensuring regulatory compliance.",,EV3 Sal,,https://twitter.com/blockpliance,,,,,,,true,false
Blockride,84nnyv,https://www.blockride.xyz/,MOBILITY,,,,Blockride is a mobility marketplace bringing equitable access to vehicle financing in Africa.,,,,,994991249071288430,,https://medium.com/@info.blockride/hello-world-7d0e75386221,,http://www.linkedin.com/company/blockride,,true,false
Blocksense,jyb551,https://blocksense.network/,PENDING,,,,,,,,https://x.com/blocksense_,,,,,,,TRUE,FALSE
Blockskye,vzyplm,https://www.blockskye.com/,BLOCKCHAIN_INFRA,,,,"Blockskye utilizes blockchain to simplify and enhance enterprise travel and procurement processes, fostering transparency and connectivity among suppliers, buyers, and users.",,ZZ,,,,,,,,,true,false
Blocksquare,bjl484,https://blocksquare.io/,BLOCKCHAIN_INFRA,ETHEREUM,BST,blocksquare,Blocksquare is a developer of the world‚Äôs leading blockchain-based real estate tokenization system.,,,,https://x.com/blocksquare_io,955485740211503124,,,,,,true,false
Blocksurvey,w1c0r2,https://blocksurvey.io/,NOT_DEPIN,,,,"BlockSurvey offers Tokengated surveys, enabling users to engage in blockchain-based survey participation.",,,,https://twitter.com/blocksurvey,669101220937596953,,,https://github.com/BlockSurvey,https://www.linkedin.com/company/blocksurvey/,,true,false
Blockus,wawujf,,PENDING,,,,,,vkurup.eth,,https://x.com/HelloBlockus,,,,,,,true,false
Blockvolt,imkb9a,https://blockvolt.io/,ENERGY,,,,"BlockVolt incentivizes clean energy adoption by connecting verifiers, green energy producers, and buyers to authenticate, certify, and monetize carbon offsets through blockchain technology.",,0x911445B1d3eB2af49d08c67ca6E7dc1c464bE5F5,,,,,,,,,true,false
BLOCX,zqsqzl,https://blocx.tech/,COMPUTE,NATIVE,BLOCX,blocxtech,"BLOCX is a comprehensive all-in-one computer manager that utilizes masternodes for network stability, offers CPU and GPU rental, and cloud storage solutions, and includes a decentralized exchange, built using X11 as a proof-of-work algorithm.",,,,,1220870981657034822,,,,,,true,false
Blok.Host,dc0ua7,https://blok.host/,WIRELESS,,HOST,,Blok.Host is a Decentralised Content Delivery Network (dCDN) that empowers users to quickly deploy their websites and use the platform's node network to distribute content.,CDN,EV3 Sal,,https://twitter.com/blok_host,1002482564726010016,,,,,,true,false
Bloodchain,epty1v,,HUMAN_CAPITAL,,,,Bloodchain is a trustworthy and secure blood donation network with verifiable records for donors and recipients.,Health,,,,,,,,,,true,false
BLOOM,nmlvq2,https://bigscience.huggingface.co/,NOT_DEPIN,,,,"BLOOM (BigScience Language Open-science Open-access Multilingual) is an autoregressive Large Language Model (LLM), trained to continue text from a prompt on vast amounts of text data using industrial-scale computational resources. ",,ZZ,,https://twitter.com/BigScienceLLM,,,,,,,true,false
BloomSkyX,7v8g7g,https://bloomskyx.com/,SENSORS,SOLANA,BLX,,"BloomSkyX is a decentralized AI-centric weather network where users buy weather stations, mine data, and receive rewards. The network generates weather data and incorporates it into AI weather models, making weather more predictable and valuable.",,ZZ,,https://twitter.com/bloomskyx,,,,,,,true,false
bloXmove,3xdu4v,https://bloxmove.com/,MOBILITY,ETHEREUM,BLXM,bloxmove-erc20,bloXmove is a decentralized B2B mobility blockchain platform that connects providers into a global alliance.,,ZZ,,https://twitter.com/bloxmove,,https://t.me/bloXmoveCommunity,https://medium.com/bloxmove,https://github.com/bloxmove-com,https://www.linkedin.com/company/bloxmove2021/,,true,false
Bloxtel,8ukwaw,https://bloxtel.com/,WIRELESS,,,,Bloxtel builds decentralized SIM authentication protocols (dSIM).,,,,https://x.com/bloxtel,,,,,http://www.linkedin.com/company/bloxtel,,true,false
Blu Arctic,r5aywt,https://www.bluarctic.xyz/,RWA,ETHEREUM,BARC,the-blu-arctic-water-comp,Blu Arctic is a blockchain-based water management company that tokenizes strategic water reserves and distributes clean water to combat global water scarcity.,Environmental,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/0xBluArctic,,,,,,,true,false
Blueberry Ring,gbce5v,https://www.blueberryring.com/,SENSORS,,HEALTH,,"Blueberry Ring is a DePIN ring that allows users to share their behavioral data, enhance their well-being, and earn token rewards.",Health,W. L.,,https://x.com/blueberryring,,,,,,,true,false
Bluebird Power,h56lyg,http://www.bluebirdpower.com/,ENERGY,,,,Bluebird Power: Decentralized energy management platform.,,,,,,,,,http://www.linkedin.com/company/bluebird-power,,true,false
Bluesea,awvg5f,https://bluesea.network/,COMPUTE,,BSEA,,"Bluesea Network is a decentralized network with designed routing for ultra-low latency streaming, lowering cost by utilizing redundant resources from home and enterprise servers.",,W. L.,,https://x.com/BlueseaNetwork,,https://t.me/blueseanetwork,https://medium.com/@BlueseaNetwork,,,,true,false
Bluwhale,fbhsnz,https://www.bluwhale.com/,AI,,BLUAI,,Bluwhale is a decentralized AI personalization protocol that specializes in unlocking the full potential of decentralized applications (dApps) by extracting deep insights from consenting user wallets across a variety of blockchain networks.,,ZZ,,https://twitter.com/bluwhaleai,1219528526386958397,,,,,,true,false
Bluzelle,jgehxs,https://bluzelle.com/,COMPUTE,ETHEREUM,BLZ,bluzelle,"Bluzelle is a decentralized data ecosystem providing scalable and secure storage solutions for decentralized applications, with a focus on enhancing the development and user experience of DApps through its advanced database services.",,ZZ,,,406164514443362325,,,,,,true,false
BNB Greenfield,9ly2ak,https://greenfield.bnbchain.org/,COMPUTE,,,,"BNB Greenfield is a Decentralized Data Storage System and Economy that allows users to store, exchange, and own data to create a new data economy within the BNB Chain ecosystem.",,W. L.,,,789402563035660308,,,,,,true,false
BOINC AI,9t9n46,https://www.boincai.com/,AI,NATIVE,BOB,,BOINC AI aims to solve the impossible triangle between blockchain and AI by building the world's largest decentralised cloud computing platform and AI public chain system.,,ZZ,,https://twitter.com/BOINCAI,,https://t.me/boincaienglish,,,,,true,false
Boltzmann,tur343,https://www.boltznet.com/,AI,,BOLTZ,,"Boltzmann Network is a decentralized, privacy-protecting AI platform designed for peer-to-peer processing, hosting, and payment of AI tasks, offering scalable solutions for critical industries like finance, healthcare, and government.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/boltzmann_net,,,,,,,true,false
Bondex,3mh0dc,https://bondex.app/,HUMAN_CAPITAL,ETHEREUM,BDXN,bondex,"Bondex is a decentralized Web3 Recruitment Platform with an open referral system, which enables users to monetize their professional networks by connecting top talent with open positions and earning bounties sponsored by hiring companies.",,ZZ,,https://twitter.com/bondexapp,,,,,,,true,false
Bonfire,7g4np6,https://bonfirenetworks.org/,NOT_DEPIN,BINANCE,BONFIRE,bonfire,Bonfire allows users to create and control their own digital lives on a federated social network.,Social,,,,,,,,,,true,false
Bonny,tyl4mv,https://bonny.so/,HUMAN_CAPITAL,,BONNY,,Bonny is a global decentralized data network that empowers users to control and monetize their consumer data.,Data,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/getBonny,,,,,,,TRUE,FALSE
Bonsai,w3i2cx,https://www.bonsai.xyz/,NOT_DEPIN,,,,"Bonsai is a decentralized proving engine that empowers developers to seamlessly integrate ZK proofs into their applications, blockchains, and appchains, enhancing security and enabling complex computations.",ZK,EV3 Sal,,,,,,,,,true,false
BonzAI,c31fo1,https://www.bonzai.sh/,AI,ETHEREUM,BONZAI,bonzai-depin,"BonzAI provides an on-premise model deployment and service infrastructure, offering a desktop application for individuals and developers to install, train, and run open-source AI and ML software on their own computers or self-hosted infrastructure.",,W. L.,,https://x.com/bonzai_depin,,,,,,,true,false
Boring,whkmqt,https://boringprotocol.io/,WIRELESS,SOLANA,BOP,boring-protocol,Boring is a decentralized VPN and peer-to-peer bandwidth market.,VPN,W. L.,,https://twitter.com/BoringProtocol,,,,https://github.com/boringprotocol/,https://www.linkedin.com/company/boringprotocol/,,FALSE,false
Borlaug,g2f9pf,https://www.borlaug.ws/,BLOCKCHAIN_INFRA,,,,Borlaug Web Services is a purpose-built blockchain SaaS platform for agriculture value chains.,Software,,,https://twitter.com/borlaug_ws,,,,https://github.com/BorlaugWebServices/borlaug,http://www.linkedin.com/company/borlaug-ws,,true,false
Boson,nzimvj,https://www.bosonprotocol.io/,NOT_DEPIN,ETHEREUM,BOSON,boson-protocol,"Boson Protocol's Web3 Commerce Layer enables the tokenization, transfer and trade of any physical thing as a redeemable NFT.",,,,,811155042714779678,,,,,,true,false
Bostrom,qtg6m9,https://cyb.ai/,AI,NATIVE,BOOT,bostrom,"Bostrom is a network focused on Superintelligence, serving as a hub for domain specific networks in the Cyber ecosystem.",,,,https://twitter.com/cyber_devs,705523593328590920,https://t.me/cyber,,https://github.com/cybercongress,,,true,false
Bot3Ai,e0cc6s,https://bot3.ai/,AI,TON,,,"Bot3 AI is a multi-language, Chat-to-Earn AI chatbot platform where users can chat with diverse virtual characters and create personalized NSFW fictional chatbot personas based on their imagination and preferences.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/bot3ai,,,,,,,true,false
BOTANIKA,2n8zjk,https://www.botanika.ai/,COMPUTE,SOLANA,BONSAI,,"Botanika offers a decentralized, AI-driven data storage solution through its B1 device and protocol, providing secure, scalable, and cost-effective storage with advanced encryption, compression, and intelligent data management.",Storage,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/botanika_sol,,,,,,,TRUE,FALSE
Botanix,97mtzl,https://www.botanixlabs.xyz/,NOT_DEPIN,,,,The first fully decentralized Layer 2 EVM on Bitcoin.,,EV3 Sal,,,937915188903018498,,,,,,true,false
Botto,uyclvb,https://www.botto.com/,AI,ETHEREUM,BOTTO,botto,"Botto is a decentralized autonomous artist creating 350 art pieces/week, guided by community voting.",,,,https://twitter.com/bottoproject,829636834371960842,,https://medium.com/@iambotto,https://github.com/bottoproject,http://www.linkedin.com/company/bottoproject,,true,false
Bova AI,m9798f,https://www.bovaai.app/,HUMAN_CAPITAL,ETHEREUM,BOVA,,Bova AI is an AI-powered Web3 browser that empowers users to control their data while earning rewards.,Identity,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/bovaai_eth,,,,,,,TRUE,FALSE
BrainAlive AI,4z81ql,https://brainalive.ai/,SENSORS,,BAAI,,"BrainAlive AI (BAAI) combines neuroscience and computer vision to create a decentralized medical and health data layer, using ZK-rollups for data privacy and rewarding users with token rewards for contributing bio-signals.",Health,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/brainalive_ai,,,,,,,TRUE,FALSE
Brainedge,h3uz6n,https://www.brainedge.ai/,HUMAN_CAPITAL,ETHEREUM,LEARN,,"Brainedge is an AI-powered, Learn-to-Earn platform that offers multi-language online courses and rewards users with tokens for engaging in skill-building and immersive learning experiences.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/learn_brainedge,,,,,,,TRUE,FALSE
Brainstem,w49a1x,https://brainstem.health/,SENSORS,,,,Brainstem collects wearable health data to revolutionize healthcare through remote screening and monitoring.,Health,,,https://twitter.com/Brainstemhealth,,,https://medium.com/@BrainstemDigitalHealth,,http://www.linkedin.com/company/brainstemdigitalhealth,,true,false
Brainstems,q6ggzh,https://www.brainstems.ai/,AI,,STEMS,,Brainstems is a DePIN x AI Protocol for Trust-less Intelligence Interoperability across Business Supply Chains.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/brainstems_,,,,,,,true,false
Braintrust,8mk3xj,https://www.usebraintrust.com/,HUMAN_CAPITAL,BASE,BTRST,braintrust,The Braintrust is a decentralized Web3 talent network linking tech freelancers with top brands worldwide.,,Mahesh | Escape Velocity,,https://twitter.com/usebraintrust,,https://t.me/braintrustofficial,https://medium.com/tag/braintrust,,https://www.linkedin.com/company/usebraintrust/,,true,false
Brastorne,g7czmv,https://www.brastorne.com/,WIRELESS,,,,"Brastorne proves access to information, markets, and community through easy and affordable internet access in Africa.",,,,https://twitter.com/Brastorne_,,,https://www.brastorne.com/blogs,,https://www.linkedin.com/company/brastorne/mycompany/,,true,false
Brev.dev,7rbea7,https://brev.dev/,AI,,,,"Brev.dev is an AI development platform offering GPU rentals and a fully equipped environment with CUDA, Python, Jupyter Lab, and SSH support for seamless fine-tuning, training, and deployment of machine learning applications.",,EV3 Sal,,,852232285670473759,,,,,,true,false
Brevis,3n0u30,https://brevis.network/,NOT_DEPIN,,,,Brevis is a smart ZK coprocessor that empowers smart contracts to read the full historical on-chain data from any chain and run customizable computations in a completely trust-free way.,ZK,ZZ,,https://twitter.com/brevis_zk,,,,,,,true,false
Brick Block,xu6m5e,https://brickblock.estate/,RWA,ETHEREUM,BRICK,brick-block,"Brick Block is a platform that tokenizes real estate for on-chain finance, enabling fractional ownership and passive income through tradable tokens and NFTs.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/brickblocketh,,,,,,,true,false
Brickken,b1b0xl,https://www.brickken.com/en,RWA,,BKN,brickken,"Brickken provides a user-friendly platform that streamlines the tokenization and management of real-world assets (RWA), enabling businesses to create, sell, and manage digital assets with global compliance and advanced on-chain tools.",,ZZ,,https://x.com/brickken,,,,,,,true,false
Bridge Oracle,uo9q3n,https://bridge.link/,NOT_DEPIN,ETHEREUM,BRG,,Bridge Oracle: BNB Chain-based public oracle enabling secure smart contracts with real-world data.,Oracle,,,https://twitter.com/bridge_oracle,1167177815951671337,https://t.me/BridgeOracle,https://medium.com/@bridge_oracle,https://github.com/BridgeOracle/,http://www.linkedin.com/company/bridge-oracle,,true,false
Bridgesplit,uthwb3,https://www.bridgesplit.com/,NOT_DEPIN,,,,"Bridgesplit is a specialty asset-based lending platform enabling platforms like marketplaces and custodians to offer financing to their customers. It helps Helium miners access cash for short-term expenses, new equipment, and other working capital needs.",,EV3 Sal,,,,,,,,,true,false
BringYour,xxeep1,https://bringyour.com/,WIRELESS,,,,BringYour is an innovative overlay ISP focused on enhancing network security and privacy for users worldwide.,,,,,807713145006850048,,,,,,true,false
BrinxAI,48tjwk,https://brinxai.com/,AI,,,,BrinxAI is a decentralized AI tools ecosystem integrating AI with decentralized networks and cryptocurrency rewards to offer a comprehensive suite of tools for developers and third-party integrations.,,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/BrinxAI_Labs,,,,,,,true,false
Brume,nr3e02,https://bento.me/brume,NOT_DEPIN,,,,The private Ethereum wallet with built-in Tor,,EV3 Sal,,,1101132502963322880,,,,,,true,false
BrushO,evk2vv,https://www.brusho.io/home,SENSORS,SOLANA,BRUSH,,"BrushO is a DePIN-based smart toothbrush platform that combines AI technology with a ""Brush and Earn"" model, rewarding users for maintaining good oral hygiene while ensuring data privacy and promoting global access to oral care.",Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd745,,https://x.com/brushonetwork,,,,,,,TRUE,FALSE
BSN,nwj87z,https://bsnbase.io/g/main/index,NOT_DEPIN,,,,"BSN is a cross-cloud, cross-portal, and cross-framework global public infrastructure network to deploy and operate all types of blockchain DApps.",,ZZ,,https://twitter.com/bsnbase,,https://t.me/bsnsupport,,,https://www.linkedin.com/company/bsnbase/,,true,false
BTQ,xkyu1k,https://www.btq.com/,BLOCKCHAIN_INFRA,,,,BTQ is a global quantum technology company that builds post-quantum infrastructure to secure mission critical networks.,,EV3 Sal,,https://twitter.com/btq_tech,1084696997061218314,,,,,,true,false
BubbleAI,sws22r,https://bubbleai.xyz/,AI,,,,BubbleAI is a fast off-chain data intent trading platform with AI sentiment analysis tools,,,,https://twitter.com/bubble,1039152264889245697,,https://bubble.io/blog,,https://www.linkedin.com/company/bubble-hq/,,true,false
Buk,1s4ysk,https://buk.technology/,HUMAN_CAPITAL,,,,Buk is an NFT-based hotel inventory distribution infrastructure and secondary marketplace that helps hotels increase distribution and travelers to resell or transfer their bookings on-chain.,,EV3 Sal,,,,,,,,,true,false
BULB,ffondw,https://www.bulbapp.io/,NOT_DEPIN,SOLANA,BULB,,"BULB is a Write-to-Earn and Read-to-Earn blogging platform where ideas, passions and engagement are rewarded.",,,,,905839748147449856,,,,,,true,false
Bullieverse,sfnnyv,https://bullieverse.com/,NOT_DEPIN,,BULL,,"Bullieverse is a Play-to-Earn open metaverse island that is based on Ethereum. The game is based on fantasy and features socializing, playing games, and winning rewards.",,,,,865813086643945482,,,,,,true,false
Bullit,857t60,https://www.bullit.app/,COMPUTE,,BULT,bullit,"Bullit is a decentralized data storage platform offering secure, user-friendly storage with robust privacy across multiple Layer 1 blockchains.",Storage,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/bullit_app,,,,,,,true,false
Bump,urvli0,https://www.bumpapp.xyz/,WIRELESS,,,,Bump is a peer-to-peer mobile network connecting users who share their internet via their phone to earn crypto.,,,,https://www.twitter.com/bump_xyz/,,,,,,,true,false
Bunches,iai3ik,https://onbunches.com/,NOT_DEPIN,,,,"Bunches is building a social network for sports fans, powered by Web3. It allows users to chat about sports, analyze plays, and share their opinions.",,ZZ,,,,,,,,,true,false
Bunked,09xdv4,https://www.bunked.ai/,BLOCKCHAIN_INFRA,,,,Bunked distinguishes AI-generated content from real content using blockchain technology.,,ZZ,,https://twitter.com/bunkedai,,,,,,,true,false
Buzzup,oy69ra,https://www.buzzup.co/,NOT_DEPIN,,,,"Buzzup is a user-governed web3 social media platform emphasizing transparency, censorship resistance, and an ad-free experience, designed to be user-friendly for those new to crypto.",Social,EV3 Sal,,https://x.com/buzzupco,,,,,,,true,false
Bware Labs,udxaxs,https://bwarelabs.com/,BLOCKCHAIN_INFRA,,,,Bware Labs: Web 3 solution solving latency issues with geographically distributed nodes.,RPC/Indexing,,,https://bware.page.link/twitter,791275547740995594,https://bware.page.link/telegram,https://bware.page.link/medium,https://bware.page.link/github,https://bware.page.link/linkedin,,true,false
Bythen,mwhwcp,https://www.bythen.ai/quest,AI,,,,"Bythen is building a decentralized platform that enables users to create personalized Al Avatars, from Al companions enhancing daily productivity to gaming bots and digital influencers, offering new monetization avenues.",,ZZ,,https://twitter.com/bythenAI,1180027646239834183,,,,,,true,false
C4E,92o0ip,https://c4e.io/,ENERGY,COSMOS,C4E,chain4energy,"C4E is a DePIN L1 Blockchain platform, designed to support a variety of innovative energy and e-mobility applications by creating a decentralized and democratized community-powered ecosystem.",,ZZ,,https://twitter.com/Chain4Energy,982972723858898984,https://t.me/c4e_official,https://medium.com/chain4-energy,https://github.com/chain4energy,,,true,false
Caduceus,ti9vf3,https://caduceus.foundation/,COMPUTE,NATIVE,CMP,caduceus,"Caduceus Protocol is a highly modular infrastructure layer oriented towards AI, the Metaverse, and Web3, supported by decentralized real-time edge rendering.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/caduceus_cad,,,,,,,true,false
CalChip Connect,4ysjjh,https://www.calchipconnect.com/,WIRELESS,,,,"CalChip Connect is a distributor and value-added service provider of IoT, Decentralized Wireless, LoRa, and CBRS products.",IoT,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://www.calchipconnect.com/,,,,,,,TRUE,TRUE
Caldance,6515yb,https://caldance.gitbook.io/whitepaper/,SENSORS,,,,"Caldance is a Web 3.0 fitness ecosystem integrating Machinefi, Blockchain app, NFT, and Gamification.",Health,,,https://x.com/caloriedance,,,,,https://sg.linkedin.com/company/caldance,,false,false
Callisto,g4szkz,https://callisto.network/,BLOCKCHAIN_INFRA,ETHEREUM,CLO,callisto-network,Callisto Network is a layer 1 Ethereum-compatible smart contract solution based on a proof-of-work blockchain.,,ZZ,,https://x.com/CallistoSupport,,https://t.me/CallistoNetNews,,,https://www.linkedin.com/company/callisto-network/,,true,false
Cambrian,wntdih,https://cambrianprotocol.com/,NOT_DEPIN,,,,Cambrian Protocol is a blockchain agnostic Ethereum dApp that enables resource allocation through conditional tokens.,,ZZ,,https://twitter.com/cambrian_eth,856113492348108882,,https://cambrianprotocol.notion.site/Blog-495831be4f5f4edb87a35d73d0478b49,https://github.com/cambrian-protocol/cambrian,https://linkedin.com/company/cambrian-protocol,,false,false
Camelot,n7swrq,https://cam3lot.io/,COMPUTE,,,,"Camelot is a Layer3 DePIN platform that decentralizes AI training, enabling global contributions of computational resources facilitates the training of powerful AI models, and distributes training results to mobile devices.",,ZZ,,https://twitter.com/CamelotLayer3,1215303698151120927,,,,,,true,false
Candela,d2gqfv,https://www.candelacoin.com/,NOT_DEPIN,,,,"Candela is a cryptocurrency that decentralizes solar energy, devices, and software for peer-to-peer energy transfer.",,ZZ,,https://twitter.com/candela,,,,,,,false,false
Candy Pocket,uy3skt,https://candypocket.com/web/index.html,NOT_DEPIN,,,,"CandyPocket is a metaverse-sharing platform where users can mine and earn tokens through a decentralized, Web 3.0-based network of mobile nodes.",Proof of Work,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/candypocketio,,,,,,,true,false
Canto,e20ukn,https://canto.io/,PENDING,,,,,,ZZ,,https://twitter.com/CantoPublic,,,,,,,true,false
Canvas,ae9xhv,https://www.canvas.xyz/,BLOCKCHAIN_INFRA,,,,Canvas is a peer-to-peer architecture and developer platform for decentralized applications.,L1/L2,ZZ,,https://twitter.com/canvas,,,,,https://linkedin.com/company/canvas-technology-corporation,,true,false
Canyon,9njl1a,https://canyon.io/,BLOCKCHAIN_INFRA,,,,"Canyon AI Oracle leverages advanced cryptographic technologies like TEE, opML, and zkML to provide scalable, secure, and verifiable AI integration for decentralized applications in blockchain ecosystems.",Oracle,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/canyon_labs,,,,,,,TRUE,FALSE
Capx,4dqsm2,https://www.capxai.org/,AI,,,,"Capx is a Decentralized and User-owned AI consumer layer, powered by user-driven AI Agents, user-generated personas, user-governed AI models, and a complete user-owned AI infrastructure.",,EV3 Sal,,https://twitter.com/0xCapx,882918884733235200,,,,,,true,false
Carbcoin,3imwmh,https://www.carbcoin.io/,ENERGY,,,,"Carbcoin.io is a carbon offsetting exchange platform that provides secure and immutable carbon credits via blockchain technology to support individuals, companies, project developers, and brokers to buy or sell carbon credits.",,ZZ,,https://twitter.com/carbcoinio,,,,,,,true,false
Carbide,wgg8nc,https://www.carbide.network/,COMPUTE,,,,"Carbide aims to redefine consumer storage by repurposing old phones and devices into decentralized storage solutions, allowing users to earn money by providing their unused devices.",Mobile,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/carbidenetwork,,,,,,,true,false
Carbify,susg5s,https://www.carbify.io/,ENERGY,POLYGON,CBY,carbify,"Carbify is a blockchain-based project that combines reforestation efforts with gaming, allowing users to invest in NFTrees representing real trees planted in the Amazon, which in turn generate carbon credits and in-game rewards.",,,,,1037793393356591165,,,,,,true,false
Carbon browser,a8pfxe,https://carbon.website/,NOT_DEPIN,BINANCE,CSIX,carbon-browser,"Carbon Browser is a fast, private, and secure web browser designed for Web3 that aims to deliver a comprehensive and secure experience with features like a multi-chain crypto wallet, blockchain bridge, VPN, and AdBlock.",,ZZ,,,,,,,,,true,false
CarbonarAI,77pefj,https://github.com/slavni96/carbonarai,AI,,,,"CarbonarAI is a tool that helps in decision making processes. Through a friendly web interface, AI and ML algorithms, it provides a natural way of querying on chain data.",,EV3 Sal,,,,,,https://github.com/slavni96/carbonarai,,,true,false
Carnation,rq6z1e,,PENDING,,,,,,EV3 Sal,,,,,,https://github.com/Tranquil-Flow/carnation-radio/tree/main,,,true,false
Carnomaly,69oqt5,https://carnomaly.io/,MOBILITY,POLYGON,CARR,carnomaly,"Carnomaly is a Web3 automotive ecosystem offering comprehensive vehicle reports, decentralized automotive lending, worldwide rebates, and a comprehensive automotive records repository.",,ZZ,,https://twitter.com/carnomaly,673980479434915841,,,,,,true,false
Cartesi,8dtuxn,https://cartesi.io/,NOT_DEPIN,,,,"Cartesi is an app-specific rollup protocol with a virtual machine that runs Linux distributions, creating a richer and broader design space for DApp developers.",,ZZ,,https://twitter.com/cartesiproject,,,,,,,true,false
Carv,4y6snk,https://carv.io/,NOT_DEPIN,,,,Gaming credentials infrastructure,,EV3 Sal,,,915445727600205844,,,,,,true,false
Castora,khtlp3,https://castora.xyz/,NOT_DEPIN,,,,Castora is a decentralized P2P prediction market built on Monad.,Prediction Market,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/castora_xyz?s=11,,,,,,,true,false
CATAI,oekjgs,https://catai.app/,AI,ETHEREUM,CATAI,,CATAI is the first-ever project that employs cutting-edge AI technology known as Latent Consistency Models on-chain.,,ZZ,,https://twitter.com/cataiapp,,,,,,,true,false
Catapulta,1pqp11,https://catapulta.sh/,BLOCKCHAIN_INFRA,,,,"Catapulta is a plug-n-play, multi-chain smart contracts platform for Web3 teams.",,EV3 Sal,,https://twitter.com/catapulta_sh,,,,,,,true,false
Cazk,kbkdc9,,NOT_DEPIN,,,,Cazk Via enables proofs of inclusion or exclusion without revealing extra information.,ZK,,,,,,,,,,true,false
Cedalio,w0adea,https://cedalio.com/,BLOCKCHAIN_INFRA,,,,Cedalio: Auditable apps with real data ownership and GraphQL databases.,,,,https://twitter.com/CedalioTech,989948949823651862,,https://medium.com/@cedalio,https://github.com/cedalio,http://www.linkedin.com/company/cedalio,,true,false
CEDEN,8n2azt,https://www.ceden.network/,WIRELESS,,CDN,ceden,"CEDEN Network is a future-ready content delivery network of interconnected peer-to-peer NFT nodes, providing a complete toolkit for developers of digital worlds, VR, AR, multiplayer gaming, and metaverse applications.",CDN,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/ceden_network,,,,,,,true,false
Celer,2bxhb8,https://celer.network/,NOT_DEPIN,,CELR,,"Celer Network is an interoperability protocol enabling a one-click user experience accessing tokens, DeFi, GameFi, NFTs, governance, privacy solutions, and more across multiple chains.",,,,,496880366271856641,,,,,,true,false
Celestia,sx61vk,https://celestia.org/,NOT_DEPIN,,TIA,,"Celestia is a modular blockchain network that securely scales with the number of users, making it easy for anyone to launch their own blockchain.",,,,,638338779505229824,,,,,,true,false
Cellframe,7l1fut,https://cellframe.net/,BLOCKCHAIN_INFRA,ETHEREUM,CELL,cellframe,"Cellframe Network is a quantum-resistant blockchain network facilitating secure, scalable cross-chain transfers and fog computing services.",,EV3 Sal,,https://twitter.com/cellframenet,919184997833912370,,,,,,true,false
Celo,0oryv0,https://celo.org/,NOT_DEPIN,NATIVE,CELO,celo,Celo is a blockchain protocol that aims to address some of the barriers to cryptoasset adoption (user experience and volatility) by using phone numbers as public keys and issuing a native stable-value token. The network supports the development of smart contracts and decentralized applications.,,,,,600834479145353243,,,,,,true,false
Centrifuge,cosgc8,https://centrifuge.io/,RWA,ETHEREUM,CFG,centrifuge,Centrifuge is the platform for tokenized real-world assets onchain.,,ZZ,,https://twitter.com/centrifuge,805795848432779315,https://t.me/centrifuge_chat,https://medium.com/centrifuge,https://github.com/centrifuge/,http://www.linkedin.com/company/centrifugehq,,true,false
Ceramic,ancy5d,https://ceramic.network/,BLOCKCHAIN_INFRA,,,,Ceramic is a decentralized data network.,Data,ZZ,,https://twitter.com/ceramicnetwork,682786569857662976,https://t.me/s/shreejiceramic?before=2,https://medium.com/ceramic,https://github.com/ceramicnetwork,https://www.linkedin.com/company/ceramic-network,,true,false
CerboAI,pk6ej0,https://www.cerboai.com/main,AI,,CBO,,"CerboAI is a decentralized AGI network for training models on sparse network data and distributed inference architecture, delivering personalized Edge AI models directly to users' devices to ensure data sovereignty and local inference.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/cerboai,,,,,,,true,false
Cere,0xxxyy,https://cere.network/,COMPUTE,ETHEREUM,CERE,cere-network,Cere Network is a Decentralized Data Cloud platform optimized for service data integration and data collaboration.,,W. L.,,https://twitter.com/cereofficial,876823550533726219,https://t.me/thisiscere,https://cere.network/blog/,https://github.com/Cerebellum-Network,https://www.linkedin.com/company/cere-network,,true,false
Cerebrum,i3q0yo,https://cerebrumdao.com/,SCIENCE,,,,"Accelerating solutions & cures to neurodegeneration and advancing brain longevity. ",,EV3 Sal,,,885561571173085235,,,,,,true,false
Ceremonies,i8m65y,https://www.ceremonies.ai/,AI,,,,"Ceremonies AI Ecosystem (SAGE) is a decentralized marketplace that empowers AI entities and creators to transact, collaborate, and innovate autonomously through blockchain-based payments and a decentralized API, fostering an open AI economy.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/ceremoniesai,,,,,,,true,false
CESS,qdkzic,https://cess.cloud/,COMPUTE,,,,CESS is a decentralized cloud storage network supporting enterprise-level applications.,Storage,,,,867067208382152744,,,,,,true,false
Ceti,ovcd7q,https://taoceti.ai/,AI,BITTENSOR,CETI,tao-ceti,"Ceti AI develops globally distributed, high-performance, scalable AI infrastructure designed to empower developers and networks worldwide.",,ZZ,,https://twitter.com/ceti_ai,,,,,,,true,false
Chainback,2odzii,https://chainback.org/,COMPUTE,ETHEREUM,ARCHIVE,chainback,Chainback is a decentralized cloud computing and file storage platform that leverages underutilized GPU resources and secure file sharing to give users full control over their digital content.,Storage,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/ChainbackWeb3,,,,,,,true,false
Chainbase,6wfqqm,https://chainbase.com/,NOT_DEPIN,,,,"Chainbase is an all-in-one data infrastructure for Web3 that allows users to index, transform, and use on-chain data at scale via API, pipeline, and SQL.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/chainbasehq,,,,,,,true,false
Chainbound,knriru,https://www.chainbound.io/,NOT_DEPIN,ETHEREUM,,,"Research & development organization building optimized infrastructure and networking tools for blockchains. ",,EV3 Sal,,,1024661923737899058,,,,,,true,false
ChainGPT,yi1bv4,https://www.chaingpt.org/,AI,ETHEREUM,CGPT,chaingpt,"ChainGPT is an advanced AI infrastructure that develops AI-powered technologies for the Web3, Blockchain, and Crypto space.",,ZZ,,https://twitter.com/Chain_GPT,1067750543495274557,https://t.me/chaingpt,https://medium.com/@chaingpt,https://github.com/ChainGPT-org,http://www.linkedin.com/company/chaingpt,,true,false
ChainGPU,yof13e,https://www.chaingpu.net/,AI,,CGPU,,"Chain GPU is a decentralized network democratizing GPU and AI resources, allowing users to participate, contribute, and profit from the AI sector by leveraging blockchain technology for transparent and secure access.",GPUs,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/ChainGPU,,,,,,,true,false
ChainHealth,dtmyvi,https://www.chainhealth.io/,HUMAN_CAPITAL,,,,"ChainHealth is a blockchain-powered platform that unifies health data from over 100 fitness sources, incentivizing users to lead active lifestyles through rewards, gamification, and community-driven challenges.",Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd748,,https://x.com/chainhealth_io,,,,,,,TRUE,FALSE
Chainlink,y9e0mz,https://chain.link/,NOT_DEPIN,ETHEREUM,LINK,chainlink,Chainlink enables connected smart contracts through a decentralized oracle network.,Oracle,,,https://twitter.com/chainlink,592041321326182401,https://t.me/chainlinkofficial,https://medium.com/swlh/chainlink-decentralized-network-of-oracles-6844ff96f47f,,,,true,false
ChainMiner,si688h,https://chainminer.io/,BLOCKCHAIN_INFRA,ETHEREUM,CMINER,chainminer,"Chainminer is a cryptocurrency mining platform that simplifies earning rewards through crypto mining. By staking Chainminer tokens, users gain access to a share of profits from their comprehensive mining operations.",,ZZ,,https://twitter.com/ChainMinerio,,,,,,,true,false
ChainML,ae73hb,https://www.chainml.net/,AI,,,,ChainML is a decentralized compute network for AI and numerical applications.,,ZZ,,https://twitter.com/chainml_,1119245135620878388,,,,,,true,false
ChainsAtlas,wn1wpf,https://www.chainsatlas.com/,PENDING,,,,,,ZZ,,https://x.com/ChainsAtlas,,,,,,,TRUE,FALSE
Chainsight,znbubz,https://chainsight.network/,BLOCKCHAIN_INFRA,,,,"Chainsight is a modular oracle that enables seamless data exchange and real-time insights across multiple blockchain networks, empowering developers and protocols with custom indices, cross-chain data access, and decentralized market intelligence.",Oracle,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/chainsight_,,,,,,,TRUE,FALSE
Chainstack,sj6nte,https://chainstack.com/,NOT_DEPIN,,,,Chainstack is an end-to-end Web3 development platform that helps users to deploy and manage infrastructure for their Web3 applications.,,ZZ,,https://twitter.com/ChainstackHQ,847645538093629441,https://t.me/chainstack,https://chainstack.com/blog/,,https://www.linkedin.com/company/chainstack/,,true,false
Chaintool,nx4wrh,https://chaintool.ai/,BLOCKCHAIN_INFRA,,,,"Chaintool develops Microscope, an open-source blockchain metadata protocol to streamline metadata contribution, sharing, and consumption through a sophisticated sharing mechanism, collaborative tools, and incentivization schemes.",,EV3 Sal,,https://twitter.com/chaintooltech,1028149975667966022,,,,,,true,false
Chappyz,dn33y7,https://chappyz.com/,NOT_DEPIN,BINANCE,CHAPZ,chappyz,"Chappyz is an AI powered plug-and-play protocol that helps build REAL community engagement & growth, whilst rewarding community members in real time.",,,,https://twitter.com/Chappyzcom,1144574400717406228,https://t.me/ChappyzOfficial,,,https://www.linkedin.com/company/chappyz/,,true,false
CharacterX,06sxnp,https://characterx.ai/,AI,,CXT,,"CharacterX is a decentralized synthetic social network that connects human beings & AI beings. It provides a social platform where users can create their own AI identities, and connect with others without the constraints of time and space.",,,,https://twitter.com/CharacterXAI,1224161029450108938,,,,,,true,false
Charge,5tihi8,https://www.charge.xyz/,MOBILITY,,,,"Charge is a DAO-Governed Decentralized Application for Electric Vehicle Charging. Charge enables individuals and organizations to register charging stations and EVs on a permissionless platform using Self-Sovereign Machine Identities (SSMIs), and equip them with a payment method.",,,,https://twitter.com/charge_xyz,,https://t.me/charge_xyz,https://www.charge.xyz/blogposts,https://github.com/chargexyz,,,true,false
Chasm,vmj2ly,https://www.chasm.net/,AI,,CHASM,chasm-ai,"Chasm Network is a decentralized AI platform offering autonomous assets, user-friendly generative AI workflows, and a unified prompting standard for consistent and deterministic results.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/chasmnetwork,,,,,,,true,false
CheckDot,dlqv3c,https://checkdot.io/,AI,ETHEREUM,CDT,checkdot,CheckDot: decentralized trust protocol for verifying legitimacy of blockchain projects anonymously.,,,,https://twitter.com/Checkdot_proto,860044376058101781,https://t.me/checkdot,https://checkdot.medium.com/,https://github.com/checkdot,http://www.linkedin.com/company/checkdot,,true,false
Cheelee,97up5b,https://cheelee.io/,ENERGY,AVALANCHE,CHEEL,cheelee,"Cheelee is a short video platform with GameFi mechanics, where users can earn by watching the feed. test change in description",,EV3 Sal,,https://twitter.com/Cheelee_Tweet,959392470137982997,telegralink,sampleblog,:+1:,,,
CheersLand,9g1vlq,https://cheersland.org/,PENDING,,,,,,ZZ,,https://twitter.com/cheers_land,,,,,,,true,false
Cheeze,9tcuea,https://cheeze.com/,NOT_DEPIN,,,,Cheeze is a decentralized creator economy platform that enables brand activation for imagery on-chain.,,,,,,,,,,,true,false
cheqd,o6gk4u,https://cheqd.io/,BLOCKCHAIN_INFRA,COSMOS,CHEQ,cheqd-network,Cheqd offers infrastructure for trusted data markets.,Data,,,https://twitter.com/cheqd_io,879754359859216394,https://t.me/cheqd,https://blog.cheqd.io/,https://github.com/cheqd,http://www.linkedin.com/company/cheqd-identity,,true,false
Cherry,j6bezo,https://www.cherry.network/,NOT_DEPIN,ETHEREUM,CHER,cherry-network,Cherry is a decentralized layer-one blockchain purpose-built to sustain the data needs of web3 applications.,L1/L2,ZZ,,https://twitter.com/Cherry_Network,787076370952880138,https://t.me/cherrynetwork,https://cherryproject.medium.com/,https://github.com/CherryNetwork,http://www.linkedin.com/company/cherrynetwork,,true,false
Chia,ncy75y,https://www.chia.net/,NOT_DEPIN,,XCH,chia,Chia Network (XCH) is a layer 1 blockchain that uses its own custom-designed programming language called Chialisp and a novel consensus mechanism called proof-of-space-and-time (PoST).,,ZZ,,https://twitter.com/chia_project,1034523881404370984,,https://www.chia.net/blog/,https://github.com/Chia-Network,https://www.linkedin.com/company/chia-network,,true,false
Chingari,teymg6,https://chingari.io/,NOT_DEPIN,,,,Chingari is a fast-growing Web3 social media company combining TikTok and OnlyFans features.,Social,,,https://twitter.com/Chingari_IN,,,https://chingariapp.medium.com/,https://github.com/CodeTheChangeUBC/Chingari/projects/2,https://www.linkedin.com/company/chingariapp/,,true,false
Chirp,zf4ctb,https://chirpwireless.io/commercial,WIRELESS,,,,"Chirp Wireless is a decentralized wireless network for IoT, mobile, and broadband.",,W. L.,,https://twitter.com/ChirpDeWi,,,https://chirpiot.medium.com/,https://github.com/topics/chirp?o=desc&s=forks,http://www.linkedin.com/company/chirpiot,,true,false
Chirpley,okfrzh,https://chirpley.ai/,AI,BINANCE,CHRP,,"Chirpley is the world, first automated, peer-to-peer, all-in-one influencer marketplace specifically focussed on nano and micro influencers.",,,,https://twitter.com/chirpley,857676296359247884,http://t.me/chirpley,https://chirpley.medium.com/,,https://www.linkedin.com/company/chirpleylabs,,true,false
Chro,awdzxn,https://chro-plus.web.app/,SENSORS,,,,"CHRO is building a decentralized health database and offering the XHRO wearable device, packed with sensors to monitor key health metrics, incentivizing users to share data for predictive, preventive, and personalized medicine breakthroughs.",Health,ZZ,,https://twitter.com/chroplus,,,,,,,true,false
Chronicled,1y63oi,https://www.chronicled.com/,NOT_DEPIN,,,,"Chronicled is launching Mediledger, a solution for streamlining financial transactions in life sciences and better handling dispute resolution.",,ZZ,,,,,,,,,true,false
Cindicator,cor8db,https://cindicator.com/,AI,ETHEREUM,CND,cindicator,"Cindicator uses Hybrid Intelligence for stocks and crypto, with Bloomberg and Stoic as platforms.",,,,https://twitter.com/Crowd_indicator,,https://t.me/cindicator_news,https://medium.com/@Cindicator,,http://www.linkedin.com/company/vote-,,true,false
Circularr,s90vk1,https://circularr.com/,SENSORS,,CIRP,,"Circularr is a decentralized recycling network that aims to streamline interactions between organizations, consumers, and recyclers, enhancing accountability and traceability across plastic recycling, sustainable textiles, and garment manufacturing.",,EV3 Sal,,https://twitter.com/circularr_hq,904800838655021117,,,,,,true,false
Cirrus,0tn3dg,https://usecirrus.cloud/,COMPUTE,,,,Cirrus IPFS is a company providing an IPFS-based storage platform with advanced security and 3x the capacity of g-drive.,Storage,,,https://twitter.com/CirrusIPFS,,,,,https://in.linkedin.com/company/cirrusipfs,,false,false
CIRUS,he3mau,https://www.cirus.io/,NOT_DEPIN,ETHEREUM,CIRUS,cirus,"CIRUS: Control data, monetize through blockchain.",,,,http://www.twitter.com/Cirusfoundation,858103637023391746,https://en.telghub.com/content?id=16359,https://medium.com/the-cirus-foundation,,http://www.linkedin.com/company/cirus-foundation,,true,false
CLAPART,g7kfey,https://www.clapart.com/?locale=en-US,BLOCKCHAIN_INFRA,,,,CLAPART empowers creators and fans for project funding.,,,,https://twitter.com/clapartofficial,947501488429756456,https://t.me/CLAPART_Announcements,,,http://www.linkedin.com/company/clapartgroup,,true,false
CleanApp,ino8sz,https://www.cleanapp.io/,SENSORS,,,,"CleanApp is a global coordination game for waste and hazard mapping, allowing users to earn rewards for submitting valuable reports.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/CleanApp,,,,,,,true,false
Cleanify,qxw358,https://cleanify.vet/,HUMAN_CAPITAL,VECHAIN,,,"Cleanify is a dApp that rewards users with tokens for participating in environmental cleanups and sustainable actions, promoting a cleaner and healthier planet.",Environmental,0x9d73ca4689788f6d4be686e9150d6efe75ffd750,,https://x.com/cleanify_vet,,,,,,,TRUE,TRUE
Clearpool,680zow,https://clearpool.finance/,BLOCKCHAIN_INFRA,,CPOOL,,Clearpool is a Decentralized Finance ecosystem incorporating the first-ever permissionless marketplace for unsecured institutional liquidity.,,,,,948061538139402240,,,,,,true,false
Click Engine,7p98xk,https://engine.click/,BLOCKCHAIN_INFRA,ETHEREUM,CLICK,,"Click Engine is a decentralized gaming platform, games marketplace, and game development infrastructure powered by AI, DePIN, and GPU Cloud Gaming.",Gaming,ZZ,,https://twitter.com/Click_Engine,,,,,,,true,false
Click,hfofmw,https://clickapp.com/,NOT_DEPIN,,,,"Click is an app that allows users to capture and sign their photos or videos in a digital trust network to confirm they are real and actually happened at a specific location and time, using a specific mobile device and camera.",,EV3 Sal,,https://x.com/clickyourtruth,,,,,,,true,false
ClinTex,sc1i0q,https://clintex.io/,NOT_DEPIN,ETHEREUM,CTI,clintex-cti,"ClinTex is a health technology company that utilizes blockchain and machine learning to enhance the efficiency and cost-effectiveness of decentralized clinical trials. ",,ZZ,,https://twitter.com/ClinTexCTi,,,,,,,true,false
CLIQ,y1s1l4,https://www.cliqnetwork.xyz/,NOT_DEPIN,,,,Cliq is an anonymous forum for verified Web3 professionals to share insight and seek advice in a trustless manner,,,,https://twitter.com/CliqNetwork,,,,,,,true,false
Clique,redik6,https://www.clique.tech/,BLOCKCHAIN_INFRA,,,,"Clique is building a compute coordination layer, streamlining the process by which both smart contracts and general applications access and utilize computing resources.",,ZZ,,https://twitter.com/Clique2046,918592135178125443,,,,,,true,false
Cloaked Wireless,o26yla,https://cloakedwireless.com/,PENDING,,,,,,EV3 Sal,,https://twitter.com/cloakedwireless,,,,,,,true,false
CLORE,jbmvkm,https://clore.ai/,COMPUTE,NATIVE,CLORE,clore-ai,"CLORE.AI is distributed AI training, cloud rendering platform connecting server owners with renters.",,ZZ,,https://twitter.com/clore_ai,1037687650754248815,https://t.me/clorechat,https://blog.clore.ai/,,,,true,false
Cloud AI,au7lty,https://usecloudai.com/,AI,ETHEREUM,CLD,cloud-ai,Cloud AI is an On-demand AI in the Cloud that allows users to run AI Models on a Pay-Per-Use Decentralized Infrastructure.,,ZZ,,https://twitter.com/TheCloudAI,,,,,,,true,false
Cloudmos,v7ilpo,https://cloudmos.io/,COMPUTE,,,,Cloudmos is a decentralized cloud compute marketplace that allows users to deploy docker containers on the Akash Network.,,,,https://twitter.com/cloudmosio,,,https://medium.com/@cloudmos,,,,true,false
CloudSync,s1v2lj,https://cloudsync.cc/,COMPUTE,ETHEREUM,CSNC,,"Cloud Sync is a decentralized marketplace where individuals and legal entities can rent out their unused GPU resources for tasks like cryptocurrency mining, AI model training, and rendering services.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/cloudsyncai,,,,,,,true,false
Cluster,lkgf4g,https://clusterprotocol.ai,COMPUTE,,,,Cluster Protocol is a Proof of compute protocol and Open Source Community for decentralized AI models.,,EV3 Sal,,https://x.com/ClusterProtocol,,,https://medium.com/@clusterprotocol.io,,,,true,false
Clusttr,cu63xf,https://www.clusttr.io/,BLOCKCHAIN_INFRA,,,,Clusttr is a marketplace for real estate investment through fractional ownership(real estate tokens).,,,,https://twitter.com/clusttr_io,1194629974003568750,,,,,,true,false
Clutch,bcopng,https://beta.clutchplay.ai/,AI,,,,"Clutch is a decentralized AI protocol for creators, enabling them to build, own, and trade AI-generated content (AIGC) using the Clutch protocol on Linea.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/ClutchPlay_AI,,,,,,,true,false
Coco Swap,0g5igr,https://coco-swap.finance/,NOT_DEPIN,,,,Coco Swap: Faster and easier token swaps with COCO token and BSC blockchain.,Gaming,,,,,,,,,,true,false
Codatta,ahw4vg,https://codatta.io/,BLOCKCHAIN_INFRA,,,,"Codatta is a decentralized data protocol building foundational infrastructure for developers, protocols, and AI, with mechanisms generating scientific confidence levels.",,ZZ,,https://x.com/codatta_io,,,,,,,true,false
CoDeTech,8e2w7o,https://codetech.cc/,PENDING,,,,,,ZZ,,https://twitter.com/CoDeTechCC,,,,,,,true,false
Codex Storage,byroww,https://codex.storage/,COMPUTE,,,,"Codex is a durable, decentralized data storage protocol that allows storing files and data with predictable durability guarantees.",Storage,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/codex_storage,,,,,,,true,false
CodeX,xkpeqx,https://codexchain.xyz/home,BLOCKCHAIN_INFRA,NATIVE,CDX,codexchain,CodeX is an all-in-one no-code AI-powered ecosystem for WEB3 mass adoption.,,ZZ,,https://twitter.com/codexchain,1149392185725309078,,,,,,true,false
CodexField,o0w4ec,https://codexfield.com/,COMPUTE,,,,"CodexField is a decentralized application that tackles the issue of code ownership for developers, giving developers a platform to monetize their code assets in a new way. ",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/CodexField,,,,,,,true,true
Codigo,ff29xu,https://codigo.ai/,AI,,,,Código is an AI-Powered Code Generation Platform for blockchain developers and web3 teams that saves development time and increases the security of the code across a variety of blockchains.,,ZZ,,https://x.com/CodigoPlatform,1137441061363515412,,,,,,true,false
Codyfight,k93mtw,https://codyfight.com/,AI,ARBITRUM,CTOK,codyfight,"Codyfight is an AI-driven, P2E turn-based strategy game where players and their custom AI bots engage in complex battles against machines and other players, with a marketplace that allows developers to monetize their robots.",Gaming,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/codyfight,,,,,,,true,false
CogniXphere,77zavt,https://www.cognixphere.ai/,AI,,FLOQ,,"CogniXphere is an AI-driven decentralized Web3 User Preference Data Network, providing users with a cutting-edge Emotional AI Companion and Web3 AI Assistant with professional Web3 knowledge support and immersive emotional experiences.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/cognixphere,,,,,,,true,false
Cohere,b71ut1,https://cohere.com/,AI,,,,"Cohere is a leading Enterprise AI Platform optimized for enterprise generative AI, search and discovery, and advanced retrieval.",,ZZ,,https://twitter.com/cohere,954421988141711382,,,,,,true,false
CoinTensor,rmkurl,https://cointensor.io/,AI,ETHEREUM,TENSOR,,"CoinTensor AI is an innovative DeFi protocol integrating advanced AI, secure DePIN transactions, and a lucrative revenue-sharing model.",DeFi,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/cointensor,,,,,,,true,false
ColdStack,dka3hq,https://coldstack.io/,COMPUTE,ETHEREUM,CLS,coldstack,"ColdStack: A unified API and billing solution for Filecoin, SIA, Arweave, and Storj.",Storage,W. L.,,https://twitter.com/coldstack_io,,https://t.me/coldstackio,https://medium.com/coldstack,https://github.com/ColdStack-Network/,http://www.linkedin.com/company/coldstack,,true,false
Collar Protocol,qg080i,https://www.collarprotocol.xyz/,NOT_DEPIN,,,,Collar Protocol is aliquidation-free borrowing solution.,,,,,,,,,,,true,false
Collar,n8tbun,https://www.collarnetworks.com/,NOT_DEPIN,,,,Collar Networks is a liquidation-free borrowing solution to solve DeFi borrowing trilemma with high LTV and stability.,,,,https://twitter.com/CollarProtocol,,,,,,,true,false
Colosseum,3uhgt0,,BLOCKCHAIN_INFRA,,,,Colosseum is a fully on-chain fighting game company that facilitates bot battles and viewer betting.,,,,,,,,,,,false,false
Combinder,hot18z,https://www.combinder.io/,ENERGY,PEAQ,,,"Combinder is an energy DePIN, built on Peaq network.",,EV3 Sal,,https://x.com/combinderio,,,,,,,true,false
commune,dam39v,https://www.communeai.org/,COMPUTE,ETHEREUM,COMAI,commune-ai,commune is a Peer to Peer Incentive-driven Coordination System for AI.,,ZZ,,https://twitter.com/communeaidotorg,941362322000203776,,,https://github.com/commune-ai,,,true,false
Compass Labs,4xqqn5,https://www.compasslabs.ai/,NOT_DEPIN,,,,"Compass Labs is building the go-to platform for DeFi — an integrated suite of products to deliver the tools to make DeFi accessible, secure, and reliable for investors and developers.",,EV3 Sal,,https://twitter.com/labs_compass,,,,,,,true,false
ComplexLabs,axpwbs,https://www.complexlabs.co/,NOT_DEPIN,,,,Complex Labs offers a modular software stack that enables integrations to your existing data into Web3.,NFTs,,,https://twitter.com/complex_labs,,,https://www.linkedin.com/company/complexlabsweb3,,,,true,false
Compute Labs,zvw8dv,https://www.computelabs.ai/,COMPUTE,,,,"Compute Labs leverages a self-developed GPU Tokenization Protocol to introduce AI-Fi, GPU ""Restaking"" and LSD solutions, making it easier for users to yield from compute.",,EV3 Sal,,https://x.com/compute_labs,,,,,,,true,false
Concordia,qx629j,https://www.concordia.systems/,NOT_DEPIN,,,,Concordia is a multi-chain collateral management protocol that unifies and enables digital asset collateralization.,,,,https://twitter.com/deBridgeFinance,1095746448047493150,,,https://github.com/debridge-finance/,https://linkedin.com/company/debridge-finance,,true,false
Concordium,hw2zn4,https://www.concordium.com/,NOT_DEPIN,NATIVE,CCD,concordium,"Concordium is a layer-1 blockchain with a built-in ID framework, the science-based proof-of-stake chain uses zero-knowledge proofs to usher in a brand new era of trust for Web3.",,ZZ,,,,,,,,,true,false
Conduit,9hmv6a,https://www.cndt.io/,PENDING,,,,,,EV3 Sal,,https://x.com/conduit_network,,,,,,,true,false
CoNET,dc9w0u,https://conet.network/,BLOCKCHAIN_INFRA,NATIVE,CNTP,conet-network,"CONET is foundational Web3 infrastructure that enables secure, anonymous data communication by replacing Internet IP addresses with encrypted wallet addresses, supporting privacy across the Internet, blockchain, and IoT.",,ZZ,,,1191656625858170920,,,,,,true,false
Conflux,nqos2n,https://confluxnetwork.org/,NOT_DEPIN,NATIVE,CFX,conflux,"Conflux is a permissionless Layer 1 blockchain connecting decentralized economies across borders and protocols. Recently migrated to hybrid PoW/PoS consensus, Conflux provides a fast, secure, and scalable blockchain environment with zero congestion, low fees, and improved network security.",,,,,707952293412339843,,,,,,true,false
Conn,k2d6im,https://www.heyconn.ai/,AI,,,,"Conn is developing Asta, an AI-enabled human-computer interface that automates daily tasks through a unified digital ecosystem with context-aware capabilities.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://twitter.com/heyconnai,,,,,,,true,false
Connect3,hxfsp3,https://connect3.world/en/about,BLOCKCHAIN_INFRA,,,,Connect3 is a decentralized platform connecting users to relevant social data.,,,,https://twitter.com/connect3world,987278587608588319,,https://medium.com/@Connect3,https://github.com/topics/connect3,http://www.linkedin.com/company/connect3world,,true,false
Constellation,ol6f66,https://constellationnetwork.io/,COMPUTE,NATIVE,DAG,constellation-labs,Constellation is a decentralized L0 protocol enabling Web3 solutions.,,,,https://twitter.com/Conste11ation,991622562889085010,https://t.me/constellationcommunity,https://medium.com/constellationlabs,https://github.com/Constellation-Labs/tessellation,http://www.linkedin.com/company/constellation-labs,,true,false
Contentos,gw8zvl,https://www.contentos.io/,INTELLECTUAL_PROPERTY,NATIVE,COS,contentos,"Contentos is building a decentralized digital content community that allows content to be freely produced, distributed, rewarded, and traded while protecting author rights.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/contentosio,,,,,,,true,false
ContextDao,ro7789,https://www.ctx.xyz/,COMPUTE,,,,ContextDao is a decentralized data storage protocol similar to the blockchain that enables on-chain data storage.,Storage,,,https://x.com/ContextProtocol,737109283610689647,,https://twitter.com/ContextDao,,https://www.linkedin.com/company/context-protocol,,true,false
Convo Space,6w9zdx,https://theconvo.space/,NOT_DEPIN,,,,Decentralized conversation layer powering Web3.,,,,https://twitter.com/0xConvo,857633502011195462,,,https://github.com/anudit/convo,http://www.linkedin.com/company/theconvospace,,true,false
Cookbook.dev,n7o4s9,https://www.cookbook.dev/,PENDING,,,,,,vkurup.eth,,https://x.com/cookbook_dev,,,,,,,true,false
CoopHive,3j1jp9,https://www.coophive.network/,COMPUTE,,,,"CoopHive is a coordination layer for decentralized computing, enabling autonomous agents to execute workloads, trade assets, and facilitate multi-agent systems through verifiable computing and blockchain-native, platform-agnostic infrastructure.",Agents,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/CoopHive,,,,,,,TRUE,FALSE
Copute,4rjb2r,https://www.copute.ai/,COMPUTE,,,,"Copute.ai is building a decentralized high-computing network powered by DePIN Web3 Protocol, solving GPU supply challenges and empowering AI and cloud gaming developers with affordable, scalable GPU power.",GPUs,W. L.,,https://x.com/CoputeAi,,,,,,,true,false
Coral,pwn1js,https://coralapp.network/,WIRELESS,,CRL,,"Coral is a multichain mobile ecosystem featuring the Coral Phone, Coral OS, Coral Mobile Stack, and CoralApp, designed for Web3 to support dApps, DeFi services, decentralized social networks, on-chain gaming, and DePIN projects.",,,,https://twitter.com/MyCoralApp,929411582176428124,,,,,,true,false
Corcel,1azjuz,https://app.corcel.io/,AI,,,,AI chat powered by Bittensor,,EV3 Sal,,,1176162686833270885,,,,,,true,false
CoreAI,lwqc5f,https://www.coreai.one/,AI,ETHEREUM,CORE,coreai,"CoreAI builds a decentralized supercloud for Autonomous AI Tools that utilizes Ethereum smart contracts to offer scalable, secure, and easy access to services, data sets, and high-performance computing on demand.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/coreaione,,,,,,,true,false
CorgiAI,fn4qwe,https://corgiai.xyz/,AI,,CORGIAI,corgiai,CorgiAI is a community-driven AI project centered around the creation of a tight-knit community with one objective in mind: to unleash the power of togetherness and build tools to enable the ultimate community.,,EV3 Sal,,,1090189895928135724,,,,,,true,false
Cortensor,0lavfs,https://www.cortensor.network/,PENDING,,,,,,W. L.,,https://x.com/cortensor,,,,,,,true,false
Cortex Labs,pd82aa,https://www.cortexlabs.ai/,AI,NATIVE,CTXC,cortex,Cortex Labs: Decentralized blockchain for AI models in smart contracts for enhanced DApps.,,,,https://twitter.com/CTXCBlockchain,789020734973935656,https://t.me/CortexOfficialEN,https://medium.com/cortexlabs,https://github.com/CortexFoundation/,https://www.linkedin.com/company/ctxcblockchain/,,true,false
CortexLoop,yyljoq,https://cortexloop.ai/,COMPUTE,ETHEREUM,CRTX,cortexloop,"CortexLoop is a comprehensive ecosystem that provides server hosting, Web3 infrastructure, and GPU computing for project hosting, rendering, and ML model training.",,ZZ,,https://twitter.com/CortexLoop,,,,,,,true,false
Cosmic,1qtoqx,https://cosmicnetwork.io/,WIRELESS,ETHEREUM,COSMIC,cosmic-network,Cosmic Network is a decentralized peer-to-peer VPN service powered by DePIN.,VPN,ZZ,,https://twitter.com/Network_Cosmic_,,https://t.me/cosmic_network_portal,https://medium.com/@cosmic_network,,,,true,false
CosmosAI,prko1c,https://ai-cosmo.com/,COMPUTE,,,,CosmosAI is a decentralized and scalable computing network that provides resources for AI development.,,ZZ,,https://twitter.com/,,,,,https://www.linkedin.com/in/cosmos-ai-78057620b/,,true,false
Cosmostation,aaj12y,https://www.cosmostation.io/,NOT_DEPIN,,,,Cosmostation is an industry-leading validator node operator for distributed ledger technology(DLT). Providing access to decentralized finance leveraging state-of-the-art architecture and user-focused application development.,,,,,,,,,,,true,false
Cotelligence,y273nt,,AI,,,,"Cotelligence is an AI model hub that allows users to upload models and access APIs, leveraging decentralized computing power for economical and accessible AI model serving.",,ZZ,,https://twitter.com/cotelligence,,,,,,,true,false
Covalent,cfxf9v,https://www.covalenthq.com/,BLOCKCHAIN_INFRA,ETHEREUM,CQT,covalent,Covalent is a decentralized data infrastructure that enables users to seamlessly access blockchain data that is otherwise inaccessible.,RPC/Indexing,ZZ,,https://twitter.com/Covalent_HQ,715804406842392586,https://t.me/CovalentHQ,https://www.covalenthq.com/blog/,https://github.com/covalenthq/,https://www.linkedin.com/company/covalenthq/,,true,false
Covenant,7ym51p,https://covenant.finance/,NOT_DEPIN,,,,Covenant is a capital-efficient borrowing and lending protocol that can accept any crypto asset as collateral.,,EV3 Sal,,https://twitter.com/covenantFi,1117874500168589394,,,,,,true,false
Coverage Map,j945ny,https://coveragemap.com/,WIRELESS,,,,"CoverageMap.com is a crowd-sourced map that compares coverage, data speeds, and performance on AT&T, Dish, T-Mobile, and Verizon.",,EV3 Sal,,,1062225845634220122,,,,,,true,false
CPChain,tlsqnk,https://cpchain.io/#/,NOT_DEPIN,ETHEREUM,CPC,cpchain,"CPChain: IoT infrastructure with storage, computation, and blockchain tech, providing a combined data platform.",IoT,,,https://twitter.com/cpchain_io,413750984976629771,https://t.me/cpchain_official,https://medium.com/cpchain-tech,https://github.com/CPChain,http://www.linkedin.com/company/cpchainiot,,true,false
cPen,p64cip,https://www.cpen.io/,BLOCKCHAIN_INFRA,BINANCE,PEN,,cPen is a digital currency that users can mine on their phones.,,ZZ,,https://twitter.com/cPenCoreTeam,,,,,,,true,false
CPIN,95bk2i,https://www.cpin.tech/,ENERGY,,CPIN,,Clean Physical Infrastructure Network is a Web3-powered infrastructure for globally distributed renewable energy resources.,,ZZ,,https://twitter.com/cpin4depin,,,,,,,true,false
Crankk,9mqohg,https://crankk.io/,WIRELESS,,,,Crankk is a Proof-of-Network-Participation distributed network built on Kadena's Proof of Work Network.,,ZZ,,https://twitter.com/crankk_io,954459049720680479,,,,,,true,false
Create,otw9vc,https://www.createprotocol.org/,AI,NATIVE,CREATE,,"Create Protocol is an AI-based web3 infrastructure offering chain agnostic interoperability, a decentralized identity system, a creative object model for digital assets, and a cDapp composer for decentralized application development.",,,,https://twitter.com/CreateProtocol,,,https://create-protocol.medium.com/,,https://www.linkedin.com/company/create-protocol/,,true,false
Creator.Bid,f61caw,https://creator.bid/,AI,,,,"Creator.bid is an innovative platform that allows creators to develop, monetize, and co-own AI Creator Agents.",Agents,ZZ,,https://twitter.com/CreatorBid,,,,,,,true,false
Credia,kjwhez,https://credialayer.io/,PENDING,,,,,,W. L.,,https://x.com/credia_layer,,,,,,,true,false
Credit Coop,k4p1ak,https://www.creditcoop.xyz/,NOT_DEPIN,,,,Credit Coop is a cryptonative Credit Marketplace that allows users to borrow against future cash flows to finance operational expenses and accelerate growth.,DeFi,EV3 Sal,,,,,,,,,true,false
Creditcoin,whwhkd,https://creditcoin.org/,RWA,ETHEREUM,CTC,creditcoin,"The Creditcoin Network is a real-world asset (RWA) public infrastructure blockchain built to connect borrowers, lenders, and investors. Fintech and microfinance providers get greater access to capital, while borrowers can secure their credit history.",,ZZ,,https://x.com/creditcoin,762302877518528522,https://t.me/CreditcoinOfficial,https://medium.com/creditcoin-foundation,,,,true,false
Creo Engine,ize2ge,https://www.creoengine.com/,BLOCKCHAIN_INFRA,BINANCE,CREO,creo-engine,Creo Engine is a gaming blockchain platform dedicated to game developers worldwide to launch their games.,,ZZ,,,900293980284149780,,,,,,true,false
Crewdle,zy7wfi,https://crewdle.com/,NOT_DEPIN,,,,"Crewdle is a mist computing platform that offers high-volume data workloads, ensures low latency, and prioritizes data privacy and sovereignty.",,,,https://twitter.com/Crewdle_app,1201911048328978442,,,,https://linkedin.com/company/crewdle,,true,false
CroPo,khpbec,https://www.cropo.network/,AI,,,,"CroPo collects global data, offers value to participants.",,,,https://twitter.com/cropo_data,,,,,,,true,false
Croquet,pl7b4k,https://croquet.io/,BLOCKCHAIN_INFRA,,,,Croquet is a serverless multiplayer game development platform that simplifies building games for developers.,Gaming,,,https://twitter.com/CroquetIO,694586717247635488,,,,https://www.linkedin.com/company/croquet-corporation,,true,false
CROSSTECH,yblr8e,https://cross.technology/,COMPUTE,,,,CROSSTECH develops an autonomous decentralized storage-integrated public blockchain that enables true digital asset issuance.,,,,,973133963004633138,,,,,,true,false
Crouton Digital,nygv6r,https://crouton.digital/,PENDING,,,,,,vkurup.eth,,https://x.com/CroutonDigital,,,,,,,true,false
Cruiz,xrosty,https://cruiz.ai/,MOBILITY,ETHEREUM,CRUIZ,,Cruiz is an AI-driven rideshare platform that utilizes DePIN technology to enhance the ride-sharing experience.,,W. L.,,https://twitter.com/cruiz_ai,,,,,,,true,false
CrunchDAO,85u80y,https://www.crunchdao.com/,HUMAN_CAPITAL,,CRUNCH,,CrunchDAO is a research team of data scientists leveraging the power of collective intelligence and Web3 to produce next-generation predictive financial insights.,,EV3 Sal,,https://twitter.com/CrunchDAO,770586873260933120,,,,,,true,false
Crust,x2nise,https://crust.network/,COMPUTE,ETHEREUM,CRU,crust-network,Crust is a decentralized cloud storage provider supporting multiple storage protocols.,Storage,,,https://twitter.com/crust_ow,747361122058764349,,https://crustnetwork.medium.com/,https://github.com/crustio,https://www.linkedin.com/company/crust,,true,false
Crynux,qh1kdl,https://crynux.ai/,AI,,,,"Crynux Network provides a permissionless decentralized AI infrastructure, enabling users to contribute computing power and host AI models and datasets securely on a blockchain-based platform.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/crynuxai,,,,,,,true,false
CryoDAO,amkyla,https://www.cryodao.org/,NOT_DEPIN,,CYRO,,CryoDAO is a decentralized collective funding high-impact research in the field of cryopreservation.,,ZZ,,,,,,,,,true,false
Cryptnet,y4txq5,https://cryptnet.shop/,WIRELESS,ETHEREUM,CRYPTNET,,"Cryptnet is a decentralized network that allows users to manage, share, and monetize their mobile data, effectively turning them into independent ISPs focusing on privacy and usage-based compensation.",,W. L.,,https://twitter.com/cryptneteth,,,,,,,true,false
CryptoAI,sx32rg,https://crypto-ai.io/,AI,ETHEREUM,CAI,cryptoai,"CryptoAI is an AI accessibility token with buy bots, transaction tracking, and lottery automation.",,,,https://twitter.com/cryptoai_erc,1229575076551065600,https://t.me/cryptoai_erc,https://medium.com/@Crypto_AI/growth-the-next-phase-of-cryptoai-2be02b964e2,,,,true,false
CryptoGrow,j0po1y,https://cryptogrow.world/,NOT_DEPIN,,,,CryptoGrow disrupts markets with decentralized hardware for growing cannabis at home and earning crypto.,,,,,,,,,,,true,false
Cryptomate,h2kze5,https://cryptomate.me/,NOT_DEPIN,,,,Cryptomate is a decentralized ecosystem of interactive crypto APIs.,,,,https://twitter.com/CryptoMateLatam,,,https://medium.com/@CryptoMateLATAM,,https://www.linkedin.com/company/crypto-mate/,,true,false
Cryptosat,9agce6,https://www.cryptosat.io/,WIRELESS,,,,"Cryptosat is a satellite company that offers cost-efficient, space-based cryptographic trust infrastructure for Web3.",Satellites,ZZ,,https://twitter.com/cryptosat,,https://medium.com/cryptosatellite,,https://github.com/topics/wave?l=html,https://www.linkedin.com/company/cryptosat,,true,false
Cubbit,0c3sx2,https://www.cubbit.io/,COMPUTE,,,,"Cubbit is a geo-distributed cloud enabler that allows organizations to build sovereign, hyper-resilient cloud storage, reducing costs and carbon footprint while ensuring data security and independence.",Storage,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/_cubbit,,,,,,,true,false
Cube3,e3bpn3,https://www.cube3.ai/,AI,,,,"CUBE3.AI is a web3 security platform that provides real-time transaction protection for smart contracts and blockchains, safeguarding against cyber exploits, fraud, and compliance risks.",,ZZ,,https://x.com/cube3ai,,https://t.me/CUBE3aiCommunity,,,,,true,false
CUDIS,34ddzp,https://www.cudis.xyz/,SENSORS,,,,CUDIS develops a Wellness AI-based wearable DePIN that allows people to track and monetize their health data.,Health,W. L.,,https://twitter.com/CudisWellness,1219129455981887498,,,,,,true,false
CUDO,i8fyam,https://www.cudocompute.com/,COMPUTE,,,,"Cudo Compute is a decentralized cloud computing network enabling users to rent and reserve high-performance cloud GPUs on-demand and at scale for AI, machine learning, and rendering.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/cudo_compute,,,,,,,true,false
Cudos,jitkjs,https://www.cudos.org/,COMPUTE,ETHEREUM,CUDOS,cudos,Cudos is a decentralized cloud computing network.,,ZZ,,https://twitter.com/CUDOS_,593796681103966208,,https://medium.com/cudos-,,https://uk.linkedin.com/company/cudos1,,true,false
CURA,7in9iz,,SENSORS,,,,"Cura is a DePIN pet smart collar that provides location tracking, health monitoring, social engagement, and token rewards for pet owners.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/curacollar,,,,,,,TRUE,FALSE
CureCoin,c9smzm,https://curecoin.net/,PENDING,,CURE,curecoin,,,ZZ,,https://twitter.com/curecoin_team,,,,,,,true,false
CureDAO,ztjwhk,https://www.curedao.org/,SCIENCE,,,,CureDAO is a decentralized autonomous organization accelerating clinical research by creating open-source software infrastructure for health data analysis and incentivizing collaboration.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/cure_dao,,,,,,,true,false
Curio,oaexsc,https://www.curio.gg/,PENDING,,,,,,,,https://x.com/0xcurio,,,,,,,true,false
Cyb,dt9e3m,https://cyb.ai/,AI,,,,"Cyb.ai is developing a decentralized AI protocol for unified, provable, collective learning.",,,,https://x.com/cyber_devs,705523593328590920,https://t.me/cyber,,https://github.com/cybercongress,,,true,false
Cyber Charge,z39h0c,https://cybercharge.org/,ENERGY,,,,"Cyber Charge is a Web3 Multifunctional Smart Charger and Power Matching Protocol that offers smart DePIN charging services powered by AI, connecting the world through energy and enhancing efficiency and sustainability.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/cyberchargeweb3,,,,,,,true,false
CyberConnect,ybxj8q,https://cyber.co/,NOT_DEPIN,ETHEREUM,CYBER,cyberconnect,"CyberConnect is a Web3 social network that enables developers to create social applications empowering users to own their digital identity, content, connections, and interactions.",,EV3 Sal,,https://twitter.com/BuildOnCyber,901233976138682388,,,,,,true,false
Cyberfly,zw4toq,https://cyberfly.io/,SENSORS,,CFLY,,Cyberfly is an open-source decentralized IoT platform built on the Kadena blockchain. It aims to provide a secure and user-friendly platform for managing and monitoring IoT devices.,,ZZ,,https://twitter.com/cyberfly_io,1001485187886100573,,,,,,true,false
Cyborg,fffgsy,https://cyborgnetwork.io/,COMPUTE,,,,Cyborg Network is a marketplace for decentralized computing power that benefits both Edge providers and users by facilitating the sharing of resources and making computing more accessible and cost-effective.,,EV3 Sal,,,,,,,,,true,false
Cysic,ciuqg1,https://cysic.xyz/,NOT_DEPIN,NATIVE,Token,,"Cysic Network is a dynamic protocol providing one-stop zero-knowledge proving and verification functionalities with an ecosystem that rewards participants for contributing computing power, staking, and engaging in governance.",ZK,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/cysic_xyz,,,,,,,true,false
D-Web,kd70oi,https://getdweb.net/,BLOCKCHAIN_INFRA,,,,"DWeb connects the people, projects and protocols essential to building a decentralized web.",,,,https://x.com/GETDWeb,,,https://medium.com/decentralized-web,,,,true,false
d.id,4giuvo,https://d.id/,NOT_DEPIN,,,,d.id is a global leader in decentralized identity (DID) systems and they offer a suite of DID-based solutions designed to enhance community growth and digital identity building.,Identity,ZZ,,https://x.com/DIDbased,831423836439838750,,https://blog.d.id/,,https://www.linkedin.com/company/didbased/,,true,false
D3,6y7ind,https://d3.inc/,COMPUTE,,,,D3 is a next-generation domains company building interoperable web2<>web3 domain names.,,,,https://twitter.com/d3corp,1146856811207606283,,,,http://www.linkedin.com/company/d3inc,,true,false
DA AGE,sz3x59,https://www.da-age.io/,PENDING,,,,,,ZZ,,https://x.com/DA_AGE_EN,,,,,,,true,false
DAFI,nm4snj,https://dafi.io/,NOT_DEPIN,ETHEREUM,DAFI,dafi-protocol,DAFI is a Hybrid Exchange that combines CEX user experience with DEX security and self-custody.,DeFi,ZZ,,https://twitter.com/dafiprotocol,803663009250672640,https://t.me/dafiprotocol,https://dafiprotocol.medium.com/,,http://www.linkedin.com/company/dafiprotocol,,true,false
DAIKSP,xsdljc,https://daikspcoin.com/,AI,,,,DAIKSP is a decentralized AI platform that combines blockchain technology to revolutionize knowledge sharing.,,,,,,,,,,,true,false
DAIN,x4aekw,https://dain.org/,AI,,,,"DAIN is constructing a decentralized Al network infrastructure, consisting of nodes and services that collaborate to deliver the best possible information.",,,,https://twitter.com/buildontal,1236127030454779916,,,,,,true,false
Daisy,4jwyqm,https://daisycrowd.com/,AI,,,,"D.AI.SY is a blockchain-based equity crowdfunding platform that funds AI trading projects by Endotech, offering participants equity and trading rewards.",,ZZ,,,,,,,,,true,false
DAOCre-8,qy5sl8,https://demo.daocre8.com/,NOT_DEPIN,,,,"DAOCre-8 combines traditional crowdfunding with decentralized governance, empowering creators & backers to influence project decisions through DAOs, Milestone-based funding, and AI-powered analytics.",,,,https://twitter.com/DAOCre8,,,,https://github.com/TheoInTech/daocre8,https://www.linkedin.com/company/daocre8/,,true,false
DappLooker,8w4jmf,https://dapplooker.com/,NOT_DEPIN,,,,DappLooker is a no-code multi-chain community-driven analytics and visualization platform for blockchain networks and Dapps.,Software,EV3 Sal,,https://twitter.com/dapplooker,,,,,,,true,false
DAppNode,jmbf6m,https://dappnode.com/,BLOCKCHAIN_INFRA,,,,"DAppNode is a decentralized hardware layer that empowers people by providing a simple, transparent system for hosting P2P clients for DApps, cryptocurrencies, VPNs, IPFS, and more.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/dappnode,,,,,,,true,false
Dark Protocol,tjc0sf,https://www.darkprotocol.org/,NOT_DEPIN,COSMOS,DARK,,"Dark Protocol is a Shielded Liquidity Layer for Zero-Knowledge Protocols, governed by $DARK",ZK,,,https://twitter.com/privateLP,958993201648238593,,,,,,true,false
DarkFi,rowqtv,https://dark.fi/,COMPUTE,,,,"DarkFi: secure, anonymous L1 platform for hidden validators & anti-fragile environment for app dev.",L1/L2,,,https://twitter.com/DarkFiSquad,,https://t.me/darkfichat,,https://github.com/darkrenaissance/darkfi,https://linkedin.com/company/dark-oy,,true,false
Darwinia,gpxg0c,https://darwinia.network/,NOT_DEPIN,ETHEREUM,KTON,darwinia-commitment-token,Darwinia is the community-run technology and service powering the cross-chain capabilities of decentralized applications.,Bridges,ZZ,,https://twitter.com/DarwiniaNetwork,456092011347443723,https://t.me/DarwiniaNetwork,https://medium.com/darwinianetwork,https://github.com/darwinia-network,http://www.linkedin.com/company/darwinia-network,,true,false
Dash Pool,h7y0um,https://dashpool.ai/,SENSORS,TON,,,"Dash Pool is an AI-powered social mapping platform integrated into Telegram, enabling users to earn rewards by contributing real-time road monitoring data using their phones.",Mapping,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/DashPoolApp,,https://t.me/DashPoolBot,,,,,TRUE,FALSE
Data Lake,tq5svh,https://data-lake.co/,SCIENCE,ETHEREUM,LAKE,data-lake,Data Lake is a DeSci project creating a global Medical Data Donation system based on blockchain technology to support medical research and AI.,,EV3 Sal,,,,,,,,,true,false
Data Union,y01ooy,https://dataunions.org/,BLOCKCHAIN_INFRA,,,,"Data Union incentivizes crowdsourcing for data, enabling x-to-earn models for data unions.",Data,,,https://twitter.com/dataunions,853941437602070549,,https://blog.dataunion.app/,https://github.com/topics/data-unions,https://sg.linkedin.com/company/dataunion-app,,true,false
Databroker,08wij5,https://www.databroker.global/,NOT_DEPIN,ETHEREUM,DTX,databroker-dao,Databroker is a secure marketplace for peer-to-peer data exchange.,Data,,,https://twitter.com/Databroker,,,,,https://www.linkedin.com/company/databroker/,,false,false
Datagen,6rasyf,https://datagen.tech/,NOT_DEPIN,,,,Datagen provides an all-purpose generator of synthetic images of human faces and bodies.,,,,https://twitter.com/datagentech,852187000085020703,,https://datagen.tech/blog/,https://github.com/DatagenTech,https://www.linkedin.com/company/28641774/,,false,false
DataHive,ln4d6h,https://www.datahive.network/,NOT_DEPIN,,,,DataHive is an AI data platform providing the infrastructure for a fair and efficient personal information economy and consent data for research.,ZK,ZZ,,,,,,,,,true,false
Dataholm,yrfxkj,,BLOCKCHAIN_INFRA,,,,"Dataholm is a decentralized platform that reduces real estate transaction costs by rewarding homeowners for data sharing, using a layer-1 blockchain to manage digital identities for all stakeholders.",Data,EV3 Sal,,,,,,,,,true,false
Datalab,xyx5ax,https://datalabai.netlify.app/,PENDING,,,,,,ZZ,,https://twitter.com/strawhatxyz,,,,,,,true,false
Datalatte,13wbim,https://www.datalatte.com/,NOT_DEPIN,,,,"Datalatte is a dApp that empowers people to monetize their digital footprint in an anonymous, secure, and fair way.",,ZZ,,,,,,,,,true,false
Datalayer,3qfzbv,https://datalayer.xyz/,PENDING,,,,,,EV3 Sal,,https://x.com/datalayerxyz,,,,,,,TRUE,FALSE
DataOS,5myyzh,https://www.dataos.so/,AI,,,,DataOS is an Autonomous AI agents network composing multimodal content for endless innovation.,Agents,ZZ,,https://twitter.com/thedataos,1146034338929049650,,,,,,true,false
DataverseOS,w9ev7t,https://dataverse-os.com/,BLOCKCHAIN_INFRA,,,,"DataverseOS is a decentralized Internet Data Operating System that allows users to own, control, and monetize their personal data through encrypted, blockchain-attested storage, and serves as a gateway to self-sovereign data dApps.",Data,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/dataverseos,,,,,,,true,false
DATS,qc35fu,https://datsproject.io/,COMPUTE,,,,DATS Project: automated vulnerability scanning and cybersecurity solutions with D-HPC for Blockchain and WEB3 security.,,,,https://twitter.com/home,928611824918736996,,,,https://www.linkedin.com/showcase/dats-toll-its-smartcities/,,true,false
Datum,zyw7wx,https://datum.org/,BLOCKCHAIN_INFRA,,,,"Datum: Secure, private, and anonymous data storage and trading on blockchain.",Data,,,https://twitter.com/datumnetwork,,,,,https://www.linkedin.com/company/datumfoundation/about/,,true,false
Dav,4kwr3b,https://dav.network,MOBILITY,ETHEREUM,DAV,,"DavNetwork is a blockchain-based transportation protocol, enabling a decentralized, peer to peer, global transportation network.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/DAVNetwork,,,,,,,TRUE,FALSE
Daylight,3lfveq,https://godaylight.com/,ENERGY,,,,Daylight is a community-powered energy grid.,,EV3 Sal,,https://twitter.com/go_daylight,,,,,https://www.linkedin.com/company/go-daylight/,,true,false
DBunker,kqm1tp,https://www.dbunker.xyz/,RWA,,,,"DBunker is an RWAs and LSTs solution provider for DePIN, allowing more people to enter the world of DePIN and empowering the DePIN ecosystem.",,EV3 Sal,,https://twitter.com/dbunker_network,,,,,,,true,false
DCarbon,1bysjw,https://dcarbon.org/,ENERGY,,,,"DCarbon is a trustless and autonomous Carbon system that uses carbon agents, an autonomous IoT solution for real-time monitoring, reporting, and verification of carbon emission, and Blockchain for secure tamper-proof transactions.",,EV3 Sal,,https://twitter.com/dcarbon_project,,,,,,,true,false
Dcent,bbiji7,https://www.dcent.nl/,COMPUTE,,,,"DCENT is an advanced, eco-friendly edge-datacenter supporting Web3 blockchain projects such as Filecoin with high-performance compute and storage.",Storage,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/Dcent_Web3,,,,,,,TRUE,TRUE
DcentAI,iv0w4k,https://dcentai.org/,AI,,,,"DcentAI provides decentralized GPU and storage power solutions to enhance AI models, empowering businesses with scalable, secure, and permissionless access to AI computing resources.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/dcent_ai,,,,,,,TRUE,FALSE
DCI Cloud,ugb56v,https://dcicloud.ai/,PENDING,,,,,,W. L.,,https://x.com/dcicloudai,,,,,,,true,false
dClimate,a5w7th,https://www.dclimate.net/,ENERGY,,,,"dClimate is the first decentralized network for climate data, forecasts, and models.",Environmental,ZZ,,https://twitter.com/dClimateDAO,834637820584263691,http://t.me/dclimatechat-,,https://github.com/dClimate,https://linkedin.com/company/dclimatenet,,true,false
DCX,qzb5mw,https://www.dcx.group/,BLOCKCHAIN_INFRA,,,,Digital Commodity Exchange (DCX) is the home of a range of agricultural commodity trading platforms.,,,,,,,,,,,true,false
DeAgentAI,l0u5j2,https://deagent.ai/,PENDING,,,,,,ZZ,,https://x.com/DeAgentAI,,,,,,,true,false
DeAI Chat,cbuacc,https://deai.chat/,AI,,,,DeAI Chat is a chat and API interface that allows users to communicate with their AI model and control their data.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/deai_chat,,,,,,,true,false
DEAI,7zoho2,https://www.runesdeai.com/,BLOCKCHAIN_INFRA,,,,"DEAI is a decentralized AI and big data platform built on the Runes Protocol, allowing DePIN asset owners to rent out their capacity for tokenized payments or tokenize their equipment as RWAs.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/runes_deai,,,,,,,true,false
DeAnno,zu7p9t,,HUMAN_CAPITAL,SOLANA,DAN,,"DeAnno is a on-chain global gig task platform, where users can utilize their spare time to complete data annotation tasks and receive remuneration and token rewards.",,ZZ,,https://twitter.com/DeAnno000,,,,,,,true,false
Deanslist,xbn4i5,https://deanslist.services/,PENDING,,,,,,EV3 Sal,,https://x.com/deanslistdao,,,,,,,true,false
DeBox,izaauz,https://debox.pro/,PENDING,,,,,,ZZ,,https://twitter.com/debox_social,,,,,,,true,false
deBridge,rhpzul,https://debridge.finance/,NOT_DEPIN,,,,deBridge: blockchain interoperability and liquidity transfer protocol.,Bridges,,,https://twitter.com/deBridgeFinance,875308315700264970,https://t.me/deBridge_finance,https://debridge.finance/blog/,https://github.com/debridge-finance/,https://www.linkedin.com/company/debridge-finance/,,true,false
Decent land,le0b94,https://www.decent.land/,PENDING,,,,,,ZZ,,https://x.com/decentlandlabs,,,,,,,true,false
Decentr,og8gcn,https://decentr.net/,COMPUTE,COSMOS,DEC,decentr,Decentr is a WEB3 browser that is based on Cosmos but is truly chain agnostic. While browsing you can choose to share your data - generating PDV(Personal Data Value) and be able to earn $DEC coin.,,EV3 Sal,,,894947432125837372,,,,,,true,false
Decentral Games,m7q3yn,https://decentral.games,NOT_DEPIN,ETHEREUM,DG,decentral-games,"Decentral Games is the first fully licensed Metaverse casino. It allows users to play with crypto, invite their friends, compete for big prizes in weekly casino competitions, and attend live events from the comfort of their own homes.",,ZZ,,,,,,,,,true,false
DecentraLink,zt2u96,https://www.decentralink.io/,BLOCKCHAIN_INFRA,,DLK,,"DecentraLink Network is a Decentralized Oracle Protocol connecting real-world market data to applications on blockchains, acting as a bridge between on-chain and off-chain systems.",Oracle,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://twitter.com/Decentra_Link,,,,,,,true,false
DecentralizedAI,1kehj3,https://www.decentralizedai.xyz/,AI,,,,"DecentralizedAI is an AI Layer-2 for Google Chrome, that allows users to own and earn from their data while browsing.",,ZZ,,https://twitter.com/DecentralAIxyz,,,,,,,true,false
DecentraMind,xp303d,https://decentramind.bot/,AI,ETHEREUM,DMIND,decentramind,"DecentraMind is a comprehensive AI aggregator, utilizing BitAPAI, the AI engine of Bittensor into a user-friendly Telegram bot.",,,,,,,,,,,true,false
DeCharge,wt9yfq,https://decharge.network/,ENERGY,,,,"DeCharge offers globally compatible, lightweight hardware with DePIN technology for revolutionizing EV charging.",,ZZ,,https://twitter.com/DeCharge__,,,,,,,true,false
Dechat,nh9uzc,https://www.dechat.io/,NOT_DEPIN,ETHEREUM,CHAT,,"Dechat is an open, secure web3 communications protocol that powers decentralized user interactions. It allows developers to let their users chat, discover and transact digital assets seamlessly within and across their applications.",,,,https://twitter.com/dechat_io,1172074427157053480,,https://medium.com/@all420/dechat-e7af2f0182e7,,https://www.linkedin.com/company/dechat/mycompany/,,true,false
DecideAI,8koelf,https://decideai.xyz/,AI,NATIVE,DCD,,"DecideAI is creating a decentralized AI ecosystem that benefits users, contributors, and developers by fostering collaboration on specialized LLMs and high-quality datasets using Reinforcement Learning with Human Feedback and Proof of Personhood.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/decideai_,,,,,,,true,false
DeCleanup,9is3j3,,HUMAN_CAPITAL,,,,DeCleanup Network is a blockchain-based platform to incentivize and reward global environmental cleanup efforts through digital assets.,Environmental,0x9d73ca4689788f6d4be686e9150d6efe75ffd753,,https://x.com/DeCleanupNet,,,,,,,TRUE,FALSE
Dedium,5v30ct,https://dedium.io/,PENDING,,,,,,W. L.,,https://x.com/DediumNetwork,,,,,,,true,false
DeEEP,iiw1ib,https://www.deeep.network/,COMPUTE,,DEEEP,,"DeEEP Network by NerdNode is a decentralized, secure, and scalable infrastructure platform and hardware for hosting and managing Web3 nodes and services.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/DeEEPNetwork,,,,,,,true,false
Deek,i1umw4,https://www.deek.network/,INTELLECTUAL_PROPERTY,,,,"Deek is a decentralized collaboration network that unlocks the value of assets like knowledge and connections through on-chain social bounty mechanics, building an on-chain reputation layer for users.",Social,ZZ,,https://x.com/deek_network,,,,,,,TRUE,FALSE
Deep Green,oz5vb7,https://www.deepgreen.energy/,ENERGY,,,,"Deep Green develops carbon-neutral compute systems & data centers, specializing in metro-edge computing.",,,,https://twitter.com/DeepGreenEnergy,,,,https://github.com/topics/deep-green,https://www.linkedin.com/company/deep-green-energy/about/,,true,false
Deep3,abbche,https://www.deep3.ai/,AI,,,,"Deep3 Labs is a next-gen AI platform that empowers developers to integrate AI-driven predictions and personalized user experiences into Web3 dApps, with decentralized governance through its AI DAO and tools that simplify AI integration across blockchains.",,0x395aB080688983b5a2F203B49cE44D66b30360AB,,https://x.com/deep3labs,,,,,,,TRUE,FALSE
DeepAI,39qdrb,https://deepweb3.ai/,PENDING,,,,,,ZZ,,https://x.com/DeepAIGlobal,,,,,,,true,false
DeepBrain,c1de2i,https://deepbrainchain.org/,COMPUTE,NATIVE,DBC,deepbrain-chain,"DeepBrain Chain is a distributed network for AI & Metaverse use cases, offering high-performance computing capabilities.",,ZZ,,https://twitter.com/DeepBrainChain,,https://t.me/deepbrainchainglobal,https://medium.com/@DeepBrainChainGlobal,https://www.github.com/DeepBrainChain,https://linkedin.com/company/deepbrain-chain,,true,false
Deeper,3s1vpm,https://www.deeper.network/,WIRELESS,ETHEREUM,DPR,deeper-network,Deeper is a decentralized VPN and privacy network.,VPN,,,https://twitter.com/deeper_official,858020148158005259,https://tlgrm.eu/channels/@pornodrive/46977,https://deeper-network.medium.com/,,https://il.linkedin.com/company/deeper-cloud,,true,false
DeepFakeAI,1cdn19,https://fakeai.io/,AI,ETHEREUM,FAKEAI,deepfakeai,DeepFakeAI is a deepfake creation program using a Telegram Bot and Web App.,,,,https://twitter.com/DeepFakeAI_,1120405708186337411,https://t.me/FakeAI,https://medium.com/@FakeAI,,,,true,false
DeepLink,2gwve7,https://www.deeplink.cloud/,COMPUTE,ETHEREUM,DEEPLINK,,"DeepLink Protocol is a decentralized AI cloud gaming protocol with ultra-low latency rendering technology, supporting applications such as cloud esports, cloud internet cafes, 3A games, blockchain-integrated gaming, and cloud VR/AR/XR.",Gaming,ZZ,,https://twitter.com/DeepLinkGlobal,,,,,,,true,false
DeepSquare,5ymc3k,https://deepsquare.io/,COMPUTE,,,,DeepSquare is a company building an energy-efficient cloud computing ecosystem by reusing ICT generated heat.,,ZZ,,https://twitter.com/DeepSQUAREio,1187531501609431161,,https://medium.com/@DeepSquare.io,https://github.com/deepsquare-io,https://linkedin.com/company/deepsquare-association,,true,false
Defilliate,bh55a0,https://defilliate.xyz/,NOT_DEPIN,,,,Defilliate is an affiliate marketing platform built specifically for web3 that allows creators to monetize their content.,,ZZ,,https://twitter.com/defilliateXYZ,1158504286808981546,,,,,,false,false
Define,fcrj4g,https://www.define.tech/,HUMAN_CAPITAL,,DEF,,Define Protocol is a decentralized identity and reputation layer designed to authenticate and manage professional identities. Outdefine is a vetted talent job marketplace using the Define protocol.,,EV3 Sal,,https://twitter.com/defprotocol,,,,,,,true,false
Defit,jmavqd,https://app.defit.com/,SENSORS,POLYGON,DEFIT,defit,Defit is a fitness web3 brand that rewards users with a Move to Earn movement.,Health,,,https://twitter.com/DEFITofficial,932304379694944277,https://t.me/DEFITofficial,https://defitofficial.medium.com/,,https://sg.linkedin.com/company/defitfitnessclub,,true,false
DeFli,14khqv,https://www.defli.xyz/,SENSORS,,,,DeFli builds global infrastructure for the unmanned aviation industry.,,,,https://twitter.com/Defli_Xyz,1085688022001004676,,https://medium.com/@team_483,https://github.com/DeFliTeam,,,false,false
Defog,u43dxj,https://defog.ai/,NOT_DEPIN,,,,Defog.ai helps enterprises deploy fine-tuned LLMs for enterprise analytics.,,,,https://twitter.com/defogdata,,,,https://github.com/defog-ai,http://www.linkedin.com/company/defog-ai,,true,false
DeGuard,nmx3b5,https://deguard.io/,WIRELESS,,DGR,,"DeGuard VPN is a Web3 VPN provider that empowers users to subscribe and pay for VPN services without revealing personal information or using bank cards, with all plans represented as NFTs.",VPN,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/deguardvpn,,,,,,,true,false
DeHub,h0nh4p,https://dehub.io/,COMPUTE,ETHEREUM,DHB,dehub,DeHub is a decentralized entertainment hub with a gaming and streaming protocol powered by a dedicated DePIN of shared computing power.,Gaming,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/dehub_official,,,,,,,true,false
DEKUBE,q2h5ua,https://dekube.ai/,COMPUTE,,,,DEKUBE is a decentralized AI computing network that enables the transformation of consumer-grade GPUs into enterprise-level AI computing power for distributed training of large-scale LLMs.,,EV3 Sal,,https://twitter.com/dekube_official,1230421528546377840,,,,,,true,false
delta.theta,88l6l8,https://deltatheta.tech/,NOT_DEPIN,ETHEREUM,DLTA,delta-theta,delta.theta is a Peer-to-peer asset options trading platform.,,,,,,,,,,,true,false
Delysium,qhxql8,https://www.delysium.com/,AI,ETHEREUM,AGI,delysium,"Delysium develops an AI-Powered Open World Framework that empowers all users to create their own AI-Twins easily. ",,Sami,,https://twitter.com/The_Delysium,917041957522538557,,,,,,true,false
DeMe,oqb51e,https://deme.social/#,NOT_DEPIN,,,,DeMe: a user privacy-focused social media with rewards.,,,,https://twitter.com/DecentralisedMe,,,,,https://www.linkedin.com/company/demesocial/,,true,false
Demonopol,sscr6d,https://demonopol.com/,RWA,,MONO,,"DeMonopol is a decentralized platform that makes real estate investing accessible, transparent, and gamified through blockchain, enabling users to invest in fractional properties.",Real Estate,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/demonopolrwa,,,,,,,TRUE,FALSE
DeMR,pfd72p,https://www.demr.xyz/#/,SENSORS,SOLANA,DMR,,DeMR is a decentralized mixed reality infrastructure network (MR-DePIN). Global users can participate in scanning and building MR maps of various cities with consumer-grade devices such as mobile phones to earn tokens as a reward.,,W. L.,,https://twitter.com/DeMR_official,956828077961412638,,https://medium.com/@DeMR_official,,,,true,false
DeNet,g8kgxw,https://denet.pro/,COMPUTE,POLYGON,DE,denet-file-token,"DeNet provides a decentralized storage protocol using spare global capacities, leveraging blockchain for secure, user-owned data.",,ZZ,,,920205740944273449,,,,,,true,false
Dent,ahvii3,https://www.dentwireless.com/,WIRELESS,ETHEREUM,DENT,dent,Dent is a Blockchain-powered digital mobile operator providing eSIM-based mobile data and voice call services.,,ZZ,,,,,,,,,true,false
Dentity,9a3i9h,https://www.dentity.com/,BLOCKCHAIN_INFRA,,,,"Dentity aims to transform digital credentials, combating enterprise fraud by offering a feature-rich Web3 Identity & Verifiable Credentials Platform with broad identity standard integrations. ",,ZZ,,,,,,,,,true,false
DeNube,4wpaxo,https://denube.io/,COMPUTE,ETHEREUM,DEN,,"DeNube is an advanced decentralized cloud computing platform that harnesses the power of a global network of HPC nodes through a DePIN to provide a variety of computational needs, including AI, ML, and big data analytics.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/denube_io,,,,,,,true,false
Dep,hgnqa5,https://depnetwork.com/,BLOCKCHAIN_INFRA,,,,"Dep Network is an infrastructure layer for the DePIN and AI sectors, offering a Tokenization Launchpad, Node Launchpad, and Compute Marketplace.",,0x911445B1d3eB2af49d08c67ca6E7dc1c464bE5F5,,https://x.com/Dep_network,,,,,,,true,false
DePHY,gmxzzx,https://dephy.io/,SENSORS,,,,"DePHY is an open-source hardware solution, SDKs, and tools that allow users to build and scale their DePIN app with ease.",,EV3 Sal,,https://x.com/dephynetwork,1174929070212005959,,,,,,true,false
Depi,zso4nu,https://www.depi.xyz/,PENDING,,,,,,ZZ,,https://x.com/DepiXYZ,,,,,,,true,false
DePIN Association,y7lzc6,https://www.depinassociation.com/,NOT_DEPIN,,,,"DePIN Association aims to expand and accelerate the adoption of DePIN by pushing education, advocacy, and transformation across industries.",,EV3 Sal,,https://twitter.com/depinorg,,,,,,,true,false
DePIN DAO,ebuevs,https://depindao.co/,SENSORS,SOLANA,DEPINDAO,depin-dao,"DePIN DAO is a Big Data Center Based on Solana that allows users to contribute their data(upload their own eating, driving, and hotel information, etc) earn $DePIN rewards and enjoy the process of monetizing their data.",,ZZ,,,,,,,,,true,false
DePIN Stack,c83bq1,,PENDING,,,,,,ZZ,,https://x.com/DePINStack,,,,,,,TRUE,FALSE
DePINdables,8flkna,,PENDING,,,,,,EV3 Sal,,https://x.com/depinrewards,,,,,,,TRUE,FALSE
DePINSIM,g7zmtx,https://www.depinsim.com/,WIRELESS,TON,SIM,,DePINSIM is a decentralized connectivity infrastructure network empowering borderless communication and payments via crypto-native (e)SIMs.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/depinsim?s=11,,,,,,,true,false
DepinTech,no7t43,https://depintech.org/,PENDING,,,,,,W. L.,,https://x.com/depin_tech,,,,,,,TRUE,FALSE
DePINX,v49kep,https://depinx.org/,COMPUTE,,,,"DePINX is a blockchain-based distributed GPU computing network project that provides high-performance, low-cost computing resources and services.",GPUs,ZZ,,https://twitter.com/DePINX_,,,,,,,true,false
DePioneers,yn6y4f,https://depioneers.com/,NOT_DEPIN,,,,"DePioneers is a new type of hybrid NFT community, merging the DePIN market with the social prowess of PFPs.",,EV3 Sal,,,,,,,,,true,false
DePlan,re9ovt,https://deplan.xyz/,NOT_DEPIN,SOLANA,DPLN,deplan,"DePlan is a decentralized Pay-As-You-Go platform on Solana that allows users to pay only for the actual time they use digital products, enabling fair monetization for creators and developers without subscriptions.",,ZZ,,https://twitter.com/DePlan_xyz,,,,,,,true,false
DePoW,tgt1jj,https://www.depow.io/,ENERGY,,,,DePoW is a PRN-DePIN network on Ton.,,W. L.,,https://x.com/depow_io,,https://t.me/depow_fam,,,,,true,false
Dera,5yinyq,https://deraconnect.com/,WIRELESS,,,,"WEB3 BASED SERVERLESS SECURE Remote Private Network Achieve high security standards with the power of blockchain Remotely access your apps, devices and business",,,,,,,,,https://www.linkedin.com/company/dera-technology/,,true,false
DeRing,ke4f26,https://dering.io/Home,SENSORS,,,,DeRing is an AI-powered sleep health algorithm and Web3 incentive mechanism smart ring.,Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/DeRing_io,,,,,,,true,false
DeSchool,j6bye3,https://deschool.app,BLOCKCHAIN_INFRA,,EDU3,,"DeSchool is a decentralized education platform and protocol that allows users and creators to learn, teach, and earn.",,EV3 Sal,,https://x.com/deschool_app,,https://t.me/deschoolcommunity,,,,,true,false
DeSci Labs,bwfl66,https://desci.com/,SCIENCE,,,,DeSci is a decentralized protocol empowering global participation in open science through unified research ecosystems and enhanced trust in scientific contributions.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/descilabs,,,,,,,true,false
DeStor,25gc5r,https://destor.com/,COMPUTE,,,,"DeStor is an easy-to-use, enterprise-grade decentralized storage platform that leverages Filecoin's verifiable storage to provide secure, scalable, and transparent data solutions for enterprises transitioning to Web3.",Storage,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/FilecoinDeStor,,,,,,,true,true
DeStore,ky8cpt,https://www.destore.network/,BLOCKCHAIN_INFRA,,,,DeStore is a technology service provider that facilitates convenient and secure direct-to-customer (DTC) sales. DeStore enables DTC settlement by merging hybrid products and payment data via blockchain-based Digital Twins.,,ZZ,,https://twitter.com/DeStore_Network,1153607478802661458,,https://destore-network.medium.com,,,,true,false
Destra,0ln1il,https://www.destra.network/,COMPUTE,ETHEREUM,DSYNC,destra-network,"Destra Network offers a one-stop solution for all of DePIN and AI computing needs by providing a decentralized cloud infrastructure, AI computing, decentralized storage solutions, decentralized databases, and decentralized DNS solutions.",,ZZ,,https://twitter.com/DestraNetwork,,https://t.me/DestraNetwork,https://medium.com/@destranetwork,,,,true,false
DeTensor,be4snz,https://detensor.io/,COMPUTE,ETHEREUM,DETENSOR,detensor,"DeTensor is a marketplace for deploying nodes, VPN, cloud services, and renting & lending GPUs.",,ZZ,,https://twitter.com/DeTensorIO,,https://t.me/DeTensor,,,,,true,false
Devdock AI,svqtrj,https://devdock.ai/,AI,,,,"Devdock AI is a decentralized, AI-powered multi-agent app that enables developers to code, earn, and shape the future of Web3 dApp development.",Agents,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/devdockai,,,,,,,TRUE,FALSE
DeVolt,qtjxs2,https://www.devolt.xyz/,MOBILITY,,,,"DeVolt is a decentralized platform and protocol that enables new players to enter the electric vehicle charging market by providing monetary incentives, logistical facilitations, accessible stations, and an open, fully transparent market.",,ZZ,,https://twitter.com/ddevolt/,,,,https://github.com/devolthq,,,true,false
Devolved,7trv2k,https://www.devolvedai.com/,AI,POLYGON,AGC,argocoin,"Devolved AI is a decentralized AI and blockchain platform built, governed, and owned by the people, fighting corporate agendas with blockchain-based trust and transparency.",,EV3 Sal,,,1111963699935195136,,,,,,true,false
Devour,k7et05,https://devour.io/,BLOCKCHAIN_INFRA,ETHEREUM,DPAY,devour,"Devour is a blockchain-powered food ordering platform that aims to bridge the gap between restaurants and Gen Z through tokenized campaigns, engagement challenges, and by embedding food ordering options within digital worlds.",,ZZ,,https://twitter.com/GoDevour,,https://t.me/GoDevour,,,,,true,false
DexAuction,ok3cyf,https://www.dex.auction/,PENDING,,,,,,EV3 Sal,,https://twitter.com/dexauction,,,,,,,true,false
DexCheck,wt759c,https://dexcheck.ai/,AI,ETHEREUM,DCK,dexcheck,DexCheck: AI-powered Crypto & NFT Analytics platform for real-time insights and market analysis.,,,,https://twitter.com/DexCheck_io,,https://t.me/dexcheck,https://medium.com/@DexCheck,,,,true,false
DIA,p00wkk,https://www.diadata.org/,BLOCKCHAIN_INFRA,ETHEREUM,DIA,dia,"DIA is an open-source data and oracle platform for Web3, providing fully customizable and transparent feeds for smart contracts.",,,,,772395240677179402,https://t.me/diadata_org,https://www.diadata.org/blog/,https://github.com/diadata-org/,https://www.linkedin.com/company/diadata-org/,,true,false
Dialect,0c8gl1,https://www.dialect.to/,NOT_DEPIN,,,,Dialect is a protocol and developer stack for delivering seamless product experiences across Web3 with integrated Alerts and Actions.,,,,https://twitter.com/saydialect,1168929408279646278,,https://medium.com/dialect-labs,,https://www.linkedin.com/company/dialect-labs/about/,,true,false
Did Discovery,mobyi9,https://wdid.org/,WIRELESS,,DID,,"DID transforms WiFi signals into location data for targeted advertising, allowing users to earn crypto rewards by scanning nearby WiFi signals with their smartphones.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/diddiscovery,,,,,,,true,false
Digileaf,3qppu8,https://digileaf.io/,ENERGY,,LEAF,,"DigiLeaf is a Solar Panel integrated with the Algorand Blockchain, that not only diminishes carbon footprints but also contributes to a decentralized power network. DigiLeaf hardware earns LEAF tokens, incentivizing support for a greener Earth.",,ZZ,,https://x.com/digileaf_io,928923310518050847,,,,,,true,false
Digital Gaia,hq0zgu,https://www.digitalgaia.earth/,BLOCKCHAIN_INFRA,,,,Digital Gaia is a shared data and AI platform for planetary decision intelligence.,Environmental,ZZ,,https://twitter.com/_digitalgaia,,,,,http://www.linkedin.com/company/digital-gaia,,true,false
Digitalabs,3s40pm,https://digitalabs.ai/,COMPUTE,NATIVE,DIL,,"Digitalabs is a next-generation decentralized cloud service and AI training platform that provides on-demand, scalable computing power through a globally distributed network of GPU/CPU clusters optimized for AI, gaming, and data-intensive applications.",GPUs,,,https://x.com/Digitalabs_AI,,,,,,,true,false
DILL,0gi6mz,https://www.dill.xyz/,PENDING,,,,,,ZZ,,https://x.com/dill_xyz_,,,,,,,true,false
Dimitra,18fpn9,https://dimitra.io/,SENSORS,ETHEREUM,DMTR,dimitra,Dimitra is a blockchain platform that is democratizing the Agricultural Technology space for smallholder farmers globally.,,ZZ,,,857710510652391505,,,,,,true,false
DIMO,0wr2ea,https://dimo.zone/,MOBILITY,POLYGON,DIMO,dimo,DIMO is a decentralized ecosystem of connected vehicles.,,,,https://twitter.com/DIMO_Network,892438668453740634,,https://dimo.zone/news,https://github.com/DIMO-Network,https://www.linkedin.com/company/dimo-network,,true,false
DIN,eiyl95,https://din.lol/,AI,,,,"DIN is the First Modular AI-Native Data Pre-Processing Layer, designed to empower everyone to cook data for AI and get paid.",,EV3 Sal,,https://x.com/din_lol_,970955010160594977,,,,,,true,false
Dinari,u586qc,https://www.dinari.com/,RWA,ARBITRUM,DIS.D,dinari-nvda-dshares,"Dinari: dShare Platform with real-world asset backed tokens, granting access to securities on Arbitrum network.",,,,https://twitter.com/DinariGlobal,1014801661740462143,https://t.me/dinariglobal,,https://github.com/dinaricrypto,https://www.linkedin.com/company/dinari-global/,,true,false
Diode,c01rpe,https://diode.io/,NOT_DEPIN,,,,"Diode enables fully trustless and decentralized communication for people and devices. ",,,,https://twitter.com/diode_chain,,https://t.me/diode_chain,,https://github.com/diodechain,https://www.linkedin.com/company/diode-chain/,,true,false
Dione,ew04hq,https://www.dioneprotocol.com/,ENERGY,ETHEREUM,DIONE,dione,Dione is a blockchain company developing renewable energy trading technology.,L1/L2,,,https://twitter.com/firstone_DIONE,1193411758870761592,https://t.me/DioneProtocol,https://github.com/DioneProtocol/Dione,,https://www.linkedin.com/company/dione,,true,false
Dippy AI,2o0fk5,https://www.dippy.ai/,PENDING,,,,,,EV3 Sal,,https://x.com/dippy_ai,,,,,,,TRUE,FALSE
disBalancer,1hoj55,https://disbalancer.com/about/,WIRELESS,ETHEREUM,DDOS,disbalancer,disBalancer operates as a decentralized infrastructure load balancer with a built-in site where users can rent out excess bandwidth and storage and purchase content delivery and DDoS protection services.,,ZZ,,https://x.com/thedisbalancer,,https://t.me/disbalancer_group,,https://github.com/disbalancer-project/,,,true,false
DistriBrain,9fd19y,https://www.distribrain.ai/,AI,,BRAIN,,"DistriBrain is a secure, decentralized, and scalable infrastructure that aims to revolutionize the way ML models are trained and deployed by leveraging DePIN to implement federated learning.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/distribrain,,,,,,,true,false
District Labs,xcf8bl,https://districtlabs.com/,NOT_DEPIN,,,,"Provider of a provision infrastructure that allows developers to connect to protocols, and deploy to decentralized networks with one unified development workflow.",,,,,,,,,https://www.linkedin.com/company/districtlabs/,,true,false
district0x,r5hrge,https://district0x.io/,BLOCKCHAIN_INFRA,ETHEREUM,DNT,district0x,"District0x is a blockchain-based network of decentralized online marketplaces, known as districts, which are operated by community members without centralized leadership.",,ZZ,,https://twitter.com/district0x,356854079022039062,,,,,,true,false
Dither AI,dgww01,https://dith.ai/,AI,SOLANA,DITH,dither,Dither is a multi-faceted experiment that leverages the Solana ecosystem to build the world's most powerful AI time-series models for trading.,,ZZ,,https://twitter.com/Dither_Solana,,https://t.me/+UXMwd8wtXq83N2Rh,,,,,true,false
dKargo,zt0tgx,https://dkargo.io/en,BLOCKCHAIN_INFRA,ETHEREUM,DKA,dkargo,"dKargo is a Decentralized and Cooperative Protocol for Next Generation Logistics. ",,,,https://twitter.com/dKargo_Official,,https://t.me/dKargo_Official_KR,https://blog.naver.com/dkargo,https://github.com/dKargo,https://www.linkedin.com/company/dkargo/about/,,true,false
DLP Labs,57u7vr,,PENDING,,,,,Health,EV3 Sal,,,,,,,,,true,false
DLTEO,byzgll,https://www.dlteo.com/,SENSORS,,,,DLTEO is a platform to monetize and process Earth Observation Data & AI models.,Environmental,ZZ,,https://twitter.com/dlt_eo,,,,,https://at.linkedin.com/company/dlteo-gmbh,,true,false
Dmail,84v1j0,https://dmail.ai/,AI,BINANCE,DMAIL,dmail-network,Dmail is an AI-powered decentralized email platform that empowers users with ownership and control of their data.,,,,https://twitter.com/dmailofficial,906006936531660831,https://t.me/dmailofficial,https://medium.com/@dmail_official,https://github.com/dmailofficial/dmail,http://www.linkedin.com/company/dmail-idee-utili-e-introvabili,,true,false
dmany,rqrvrl,https://dmany.io/,HUMAN_CAPITAL,,,,"Dmany is a decentralized engagement platform where web3 projects create tasks for contributors to help them grow, offering crypto rewards, NFTs, and tokens in return for high-quality, bot-free participation.",Loyalty,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/dmanyio,,,,,,,TRUE,FALSE
DMC,eic5xo,https://dmctech.io/en,COMPUTE,,DMC,datamall-coin,Datamall Chain is an open-source blockchain platform that provides stable and decentralized storage services for web3 and Dapps.,Storage,EV3 Sal,,,945157779000295435,,,,,,true,false
DMCN,gcpdzf,https://dmcn.io/,COMPUTE,BINANCE,DMCN,,"DMCN is a decentralized mobile computing network that links global mobile nodes to provide efficient, high-performance computing power for various applications, including AI, data mining, cloud rendering, and DApp development.",Mobile,ZZ,,https://x.com/dmcn_io,,,,,,,true,false
Dock,rz5js9,https://www.dock.io/,BLOCKCHAIN_INFRA,POLKADOT,DOCK,dock,"Dock is a Verifiable Credentials company that provides Dock Certs, a user-friendly, no-code platform, and developer solutions that enable organizations to issue, verify, manage, and revoke fraud-proof credentials efficiently and securely.",,ZZ,,,853596474277101579,,,,,,true,false
Dockhive,gw14hr,https://dockhive.io/,COMPUTE,,,,DockHive is a cutting-edge platform leveraging blockchain and decentralized networks for secure and scalable Docker container management.,,W. L.,,https://twitter.com/dockhive,1141165775625924788,https://t.me/Dockhive,https://dockhive.medium.com/,https://github.com/DockHive/dht,https://www.linkedin.com/company/dockhive/,,true,false
Dogewalk,eezzpk,https://dogewalk.io/,SENSORS,,BONES,,"DOGEWALK is a Web3 social app for dog lovers, integrating Game-Fi and Social-Fi elements to enhance interactions between dog parents and their pets, rewarding users with tokens for activities like walking, playing, and sharing moments.",,EV3 Sal,,https://twitter.com/dogewalk_app,,,,,,,true,false
Dojima,aomkd4,https://www.dojima.network/,NOT_DEPIN,,,,Dojima is an omnichain EVM layer enabling cross-chain applications.,,,,https://twitter.com/dojimanetwork,864498254958821378,,,https://github.com/dojimanetwork,https://www.linkedin.com/company/dojimanetwork,,true,false
Dojo,pdisaz,https://dojoprotocol.com/,AI,SOLANA,DOJO,,"Dojo Protocol is a blockchain network designed specifically for AI data monetization and GPU training, integrating advanced blockchain technology with AI capabilities to revolutionize how AI models are trained, developed, and monetized.",,ZZ,,https://x.com/DOJOGPU,,,,,,,true,false
Dolpin,ns7fn7,https://dolpin.io/,COMPUTE,,,,"Dolphin: Decentralized cloud storage platform for file encryption, access control, and beneficiaries.",Storage,,,https://twitter.com/Dolphin_Emu,967709540822945792,,,,https://uk.linkedin.com/company/dolphin,,true,false
Domani,kistgs,https://domani.finance/,NOT_DEPIN,ETHEREUM,DEXTF,dextf,"DOMANI is an asset management protocol for DeFi that provides minting, trading, redeeming, and liquidity for non-custodial oracle-less tokenized portfolios (XTFs).",,,,,761036014788935691,,,,,,true,false
Domin,f9i062,https://www.domin.foundation/,BLOCKCHAIN_INFRA,,DOMIN,,"Domin Network is a hybrid infrastructure for commerce in on-chain economies, rolling up real-world commerce data to a multi-chain ecosystem using NFTs, DePIN, and AI to optimize consumer data in dApps.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/domin_network,,,,,,,true,false
DomusAI,nsr19o,https://domusai.org/#/home,SENSORS,,,,"DomusAI is a comprehensive Web3 smart home system that integrates blockchain to safeguard data and uses AI to learn lifestyle habits and automatically adjust home devices, creating a secure, personalized, and intelligent living environment.",Smart Home,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/domusai_com,,,,,,,true,false
Dongo AI,nse71f,https://dongo.ai/,AI,ETHEREUM,DONGO,dongo-ai,"Dongo AI is a cutting-edge platform that integrates AI with blockchain technology to provide personalized tools and bots for Web 3.0 ecosystems, enhancing market analysis, business automation, and decision-making for digital enterprises.",,ZZ,,https://twitter.com/Dongo_AI,,https://t.me/dongo_ai,,,,,true,false
Dor,365s2t,https://www.getdor.com/,SENSORS,NATIVE,DOR,dor,"Dor is a thermal sensing, battery-operated people counter that collects foot traffic data for businesses, provides analytics, and allows them to earn crypto rewards.",,ZZ,,https://twitter.com/dortechnologies,,,https://www.getdor.com/blog/,,https://www.linkedin.com/company/dor-technologies,,true,false
Dormint,e2yno6,https://dormint.io/,SENSORS,BINANCE,DORM,,"Dormint is a DePIN-powered AI sleep analysis app that combines gaming, NFTs, and healthcare to incentivize users to improve sleep habits, earn tokens, and engage in a dynamic marketplace.",Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/Dormint_io,,,,,,,true,false
Dotchain,jcei9t,https://dotchain.network/,BLOCKCHAIN_INFRA,,DOT,,Dotchain is the Fastest Launching Blockchain Network that allows users to mine crypto blocks and earn coins using their phones.,,ZZ,,https://twitter.com/dot_blockchain,,https://t.me/Dot_Blockchain,,,,,true,false
dotlocker,ezc44v,https://www.my.locker/,BLOCKCHAIN_INFRA,,,,.locker is developing domain + identity technology that combines a premium domain name with a digital identity secured on the Bitcoin blockchain to give one name for web2 + web3.,,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/dotlocker,,,,,,,true,false
dotmoovs,lipfwr,https://dotmoovs.com/,AI,ETHEREUM,MOOV,dotmoovs,Dotmoovs uses AI scoring & monetization through $MOOVs investment.,,,,https://twitter.com/dotmoovs,,https://t.me/s/dotmoovs_announcements?before=1038,https://dotmoovs.medium.com/,https://github.com/dotmoovs,http://www.linkedin.com/company/dotmoovs,,true,false
DotOracle,n8t17l,https://dotoracle.network/,NOT_DEPIN,,,,DotOracle is a decentralized bridge on Casper Network and a cross-chain bridge supported by EVM chains and non-EVM chains.,Bridges,ZZ,,https://twitter.com/DotOracle,,https://t.me/dotoracle,https://medium.com/@dotoracle.network,https://github.com/dotoracle/dotoracle-website,https://www.linkedin.com/company/dotoracle,,false,false
Double Protocol,59ty5q,https://double.one/,PENDING,,,,,,ZZ,,https://x.com/DoubleProtocol,,,,,,,true,false
Doug,6eupls,https://www.dougaicoin.com/,COMPUTE,SOLANA,DOUG,,DougAI is a distributed computing platform that harnesses idle computing power to provide cost-effective AI processing capabilities for companies and individuals.,,W. L.,,https://twitter.com/dougaicoin/,,https://t.me/thedougaicoin,https://medium.com/@dougaicoin,,,,true,false
dPing,v7ijqy,https://dping.io/,PENDING,,,,,,W. L.,,https://x.com/dping_io,,,,,,,TRUE,FALSE
Drawtech,xyyiaq,https://www.draw.tech/,NOT_DEPIN,,,,Drawtech is a crypto-economic drawing game built in MUD as a Progressive Web App (PWA).,,,,,,,,,,,true,false
DreamOS,k33zry,https://www.dreamos.app/,NOT_DEPIN,,,,DreamOS is the operating system for web3 where users can manage their crypto & NFTs and access their favorite dApps all in the same interface.,,,,,,,,,,,true,false
Dria,ie7wi7,https://dria.co/,AI,,,,Dria is a decentralized network that allows millions of AI agents to collaborate on generating synthetic data to improve AI models.,Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/driaforall,,,,,,,TRUE,FALSE
Dricity,vxxkw1,https://dricity.com/,COMPUTE,,,,"Dricity is a verifiable, decentralized AI cloud that connects idle and underused GPU resources for cost-effective, private AI computations.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/dricity_ai,,,,,,,true,false
DRIFE,con8un,https://www.drife.io/,MOBILITY,BINANCE,DRF,drife,"Drife is a decentralized ride-hailing platform powered by blockchain with the intent of empowering both, the drivers and riders.",,ZZ,,https://twitter.com/Drife_official,,https://t.me/Drife_officialchat,,,https://www.linkedin.com/company/drifeofficial,,true,false
Drive to Earn,bj8kjt,https://www.d2e.info/,MOBILITY,POLYGON,DTE,drive-to-earn,Drive to Earn is Web3.0 project that will revolutionize the drive market.,,,,,,,,,,,true,false
Drive3,94laup,https://drive3.net/,COMPUTE,ETHEREUM,DRV3,drive3,"Drive3 is a decentralized, multichain cloud storage solution for users to securely store their personal data and assets.",Storage,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/drive3_net,,,,,,,true,false
DriveX,yidy7d,https://www.drivex.zone/,MOBILITY,,,,DriveX is a decentralized marketplace for vehicle data that unlocks new revenue and financing opportunities for owners and operators for mobility and transportation.,,ZZ,,https://twitter.com/DriveXProtocol,,,,,,,false,false
Drone Link,0w936j,https://www.dronelink.com/,BLOCKCHAIN_INFRA,,,,Drone Link uses DePIN model to enhance drone performance and accelerate regional expansion.,,,,https://twitter.com/DronelinkHQ/,,,,,https://www.linkedin.com/company/dronelink/,,true,false
Drop,qnfsx5,https://dropwireless.io/,WIRELESS,IOTEX,DWIN,,Drop Wireless is a decentralized wireless network for IoT use cases.,Data,ZZ,,https://mobile.twitter.com/dropwireless,,https://t.me/dropwireless,,https://github.com/timogiles/wireless-dead-drop,https://ca.linkedin.com/company/joindrop,,true,false
DROPPS,cmvmnd,https://www.dropps.io/,NOT_DEPIN,,,,"DROPPS is a decentralized infrastructure for the new creative economy, building LOOKSO and LEEQUID on top of LUKSO.",L1/L2,ZZ,,https://twitter.com/dropps_io,900360236051865650,,https://medium.com/dropps,https://github.com/dropps-io,https://www.linkedin.com/company/dropps-io/,,false,false
Drosera,v9zctz,https://www.drosera.io/,BLOCKCHAIN_INFRA,,,,"Drosera is a decentralized security automation layer that simplifies monitoring systems for decentralized applications, empowering developers to create more secure and robust DeFi ecosystems.",,EV3 Sal,,https://x.com/droseranetwork,,,,,,,true,false
Druglike,axqfta,https://druglike.com/,SCIENCE,,,,"Druglike is a platform for democratizing the access, cost, and rewards of early-stage drug discovery.",,ZZ,,https://twitter.com/druglike_io,977966236627533886,,,,,,true,false
DSLA,9mm3mn,https://stacktical.com/,NOT_DEPIN,ETHEREUM,DSLA,stacktical,DSLA Protocol reduces user exposure to service delays and financial losses through agreements.,,,,https://twitter.com/willitscale,,https://t.me/stacktical,https://medium.com/@stacktical,https://github.com/Stacktical,http://www.linkedin.com/company/stacktical,,true,false
DStor,p5n1y8,https://dstor.cloud/,COMPUTE,,,,DStor is a globally-distributed cloud storage network.,Storage,ZZ,,https://twitter.com/dstor,,https://t.me/dStor_cloud,,https://github.com/SitePen/dstore/blob/master/docs/Store.md,https://www.linkedin.com/company/dstor,,true,false
DTEC,xomioh,https://dtec.space/,SENSORS,,,,"DTEC is an AI-powered vehicle assistant software component that can be integrated into any vehicle or smart platform, enabling communication with the vehicle, control of remote IoT devices, and user incentives with cryptocurrency rewards.",IoT,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/DtecToken,,,,,,,true,false
dTelecom,adga80,https://dtelecom.org/,COMPUTE,ARBITRUM,DTEL,,"dTelecom is a DePIN for Audio/Video Conferencing and Live Streaming, powered by the Community.",,W. L.,,https://twitter.com/DTEL_org,956790388222484541,,,https://github.com/dTelecom,,,true,false
DTravel,37xksc,https://www.dtravel.com/,RWA,ETHEREUM,TRVL,dtravel,"Dtravel is a peer-to-peer vacation rental ecosystem built on the Nite Protocol that enables users to find stays, book directly, and earn rewards.",,,,https://twitter.com/DtravelDAO,894038050999517184,https://t.me/dtravelcommunity,https://medium.com/dtravel-community,https://github.com/dTravel,https://www.linkedin.com/company/dtraveldao/,,true,false
Dupe Fi,uuhuxv,,NOT_DEPIN,,,,"Dupe Fi is a platform that provides tokenization infrastructure for web2 gaming assets, starting with CSGO.",Gaming,,,,,,,,,,true,false
Dusk,hg74ov,https://dusk.network/,BLOCKCHAIN_INFRA,ETHEREUM,DUSK,dusk,"Dusk is a permissionless, ZK-friendly L1 blockchain protocol focused on Compliance and Privacy to tokenize RWA.",,ZZ,,https://x.com/duskfoundation,847466263064346624,https://t.me/DuskNetwork,,,https://www.linkedin.com/company/dusknetwork/,,true,false
dVIN,tabxir,https://www.clubdvin.com/,PENDING,,,,,,EV3 Sal,,https://x.com/dvinlabs,,,,,,,true,false
Dwinity,wdi9ij,https://dwinity.com/,AI,,DWIN,,"Dwinity is a next-generation Web3 operating system that empowers users to control, store, and monetize their sensitive personal data through decentralized AI and a secure data marketplace.",Data,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/dwinity_eco,,,,,,,true,false
Dx Protocol,lqae1r,https://dxprotocol.org/,COMPUTE,,,,"Dx Protocol is a decentralized content delivery and hosting network that uses unique identifiers for permissionless URLs, powered by DxP nodes.",CDN,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/0xdxprotocol,,,,,,,TRUE,FALSE
DxChain,86s1ov,https://www.dxchain.com/,NOT_DEPIN,ETHEREUM,DX,dxchain-token,"DxChain is a blockchain network designed to build a web3 application platform that supports smart contracts and cross-chain ecosystem, and creates the most powerful public chain for dapps while ensuring security and scalability.",,,,https://twitter.com/DxChainNetwork,899551086501851146,https://t.me/dxchain,https://blog.dxchain.com/,https://github.com/DxChainNetwork,https://www.linkedin.com/company/dxchainnetwork/,,true,false
Dynex,6e2zu2,https://dynexcoin.org/,AI,NATIVE,DNX,dynex,Dynex is a decentralized neuromorphic computing protocol.,,,,https://x.com/dynexcoin,1145567770872922223,https://t.me/dynextg,,,,,true,false
DYOR,zsbgzp,https://www.dyor.ag/,NOT_DEPIN,,,,DYOR is a free on-chain analytics platform empowering users to make informed crypto investment decisions through comprehensive data models and on-chain metrics.,Data,EV3 Sal,,https://x.com/dyorcryptoapp,,,,,,,true,false
EAAS,132044,https://www.eaas.global/home/en,ENERGY,,EAAS,,"EAAS Global is a blockchain-based platform offering Energy-as-a-Service (EaaS) through DePIN and RWA, allowing users to verify and monetize their sustainable actions.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/eaasglobai,,,,,,,true,false
EARNM,glylqg,https://www.earnm.com/,HUMAN_CAPITAL,,EARNM,,"Mode Mobile's EARNM transforms smartphones into EarnPhones, providing a deflationary MobileFi and DePIN loyalty system that incentivizes sustainable user engagement and value creation.",Loyalty,ZZ,,https://twitter.com/earnmrewards,939758360075591682,https://t.me/EARNMrewards,https://medium.com/earnm,,,,true,false
EarnTV,2cndf3,https://earntv.io/,WIRELESS,POLYGON,ETV,earntv,"EarnTV is a blockchain-based video content delivery protocol that leverages AI, smart contracts, and NFTs to simplify content aggregation, marketing, and distribution while enabling users to watch, engage, and earn rewards.",CDN,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/EarnTV_,,,,,,,TRUE,FALSE
EarthFast,k3jqd3,https://earthfast.com/,PENDING,,,,,,EV3 Sal,,https://x.com/EarthFast,,,,,,,TRUE,FALSE
Easearn,1t21ot,,PENDING,,,,,,ZZ,,https://twitter.com/eazearn,,,,,,,true,false
Easy Labs,batcbr,https://itseasy.co/,PENDING,,,,,,EV3 Sal,,,,,,,,,true,false
EasyNav,u7nmsv,https://www.easynav.xyz/,SENSORS,,,,"Easynav provides advanced GNSS-based high-precision positioning and correction data, powered by GEODNET’s global reference network, enabling real-time accuracy for industries such as surveying, agriculture, construction, drones, and autonomous driving.",Geoposition,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/easynav_xyz,,,,,,,TRUE,TRUE
ECHO,9zzvik,https://0xecho.com/,BLOCKCHAIN_INFRA,,,,"Echo is a decentralized social engagement protocol using Arweave, embedding on-chain comments/likes onto any website.",,,,https://twitter.com/EchoGuild,986972622552191016,,https://medium.com/@bestvideomovies,,https://www.linkedin.com/company/echo-,,true,false
Echo1,h69708,,WIRELESS,,,,Echo is a Decentralized Network for Streaming Content Delivery.,CDN,EV3 Sal,,,,,,,,,true,false
Echolink,msvz1z,https://echolink.network/,SENSORS,SOLANA,ECHO,,"Echolink is a DePIN-focused IoT oracle, launched on Solana and specifically designed to cater to the rapidly growing sector of DePIN Massive adoption.",,ZZ,,https://x.com/echolink_oracle,,,https://medium.com/@echolink,,,,true,false
Eclipse,dgqlyo,https://www.eclipse.xyz/,NOT_DEPIN,,,,"Eclipse is Ethereum's fastest L2, powered by the Solana Virtual Machine. Eclipse makes it possible to build applications that can coordinate masses of people and scale with any developer's needs.",,,,https://twitter.com/EclipseFND,1020496431959785503,https://t.me/eclipse_labs,https://www.eclipse.builders/blog,,https://www.linkedin.com/company/eclipse-laboratories/,,true,false
EclipseNet AI,6tpzcn,https://eclipsenet.ai/,COMPUTE,,ECL,,EclipseNet AI is a decentralized GPU marketplace that uses AI to categorize and optimize GPUs for higher ROI and efficiency.,GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/eclipsenet_ai,,,,,,,true,false
EcoBlocks,ws7n8t,https://ecoblocks.tumblr.com/,BLOCKCHAIN_INFRA,,,,EcoBlocks is a regenerative protocol incentivizing electronic recycling via an escrow based process.,Environmental,,,,,,,,https://linkedin.com/company/eco-block-distribution-pty-ltd,,true,false
EcoBytes,p20viq,https://3cobytes.com/,SENSORS,,,,EcoBytes is a Re-Fi Platform that rewards consumers for unused mobile data passively.,,,,https://twitter.com/EcoBytes1,995037473379979307,,,,https://www.linkedin.com/company/ecobytes/about/,,true,false
EcoGen,7y6ab9,http://www.ecogentech.io/,ENERGY,,,,EcoGen builds sustainable edge computing and renewable energy for cryptocurrency mining.,,,,,,,https://miavass.medium.com/ecogen-technologies-launch-4a942446630e,,http://www.linkedin.com/company/ecogen-technologies,,true,false
ecoterra,cg20f3,https://www.ecoterra.io/en,SENSORS,ETHEREUM,ECOTERRA,ecoterra,"Ecoterra is a blockchain ecosystem that empowers companies to take climate action while rewarding consumers through its Recycle2Earn app, recycling tokens, and marketplaces for recycled materials and carbon offsets. ​​",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/ecoterraio,,,,,,,true,false
ecoToken,5dnpsz,https://ecotoken.earth/,BLOCKCHAIN_INFRA,,,,EcoToken's mission is to revolutionize the environmental credit market by leveraging the power of blockchain technology.,,,,https://x.com/THEecoToken,892830662325862420,https://t.me/ecosystemtoken,,,https://www.linkedin.com/company/the-ecotoken/?viewAsMember=true,,true,false
Ecotrader,220bjb,https://ecotrader.io/,RWA,,,,"Ecotrader enables small investors to participate in renewable energy projects by bringing them on-chain through tokenization, offering end-to-end development, construction, and management of solar, wind, and other green energy assets.",,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/Ecotrader_io,,,,,,,TRUE,FALSE
Eden,imccp6,https://eden.sexualfi.com/,SENSORS,,EDEN,,Eden is a Web3 lifestyle app and a Web3 pleasure device that aims to offer a unique blend of sensuality and technology to connect sensual experiences with interactive gaming and social sharing by allowing users to monetize their erotic explorations.,,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/EdenWeb3_Global,,,,,,,true,false
Edge Intelligence,0s86ji,http://edgeintelligence.xyz/,AI,,,,Edge Intelligence is a research & development organization advancing edge intelligence and open-source tech for the sovereign individual.,,EV3 Sal,,https://twitter.com/EdgeAGI,,,,,,,true,false
Edge Video,gfla1w,https://www.edgevideo.ai/,NOT_DEPIN,,FAST,,"Edge Video is developing an AI-powered technology to transform any stream into an interactive, revenue-generating, and incentivizing user experience.",,ZZ,,https://twitter.com/edgevideoai,,,,,,,true,false
Edge,gsez5y,https://edge.network/,BLOCKCHAIN_INFRA,NATIVE,EDGE,edge,"Edge is the infrastructure of Web3. A peer-to-peer network and blockchain providing high performance decentralised web services, powered by the spare capacity all around us.",,W. L.,,https://twitter.com/edgenetwork,371989135172567051,https://t.me/edgenetwork,,https://github.com/edge,,,true,false
EdgeMatrix,iespkr,https://edgematrix.pro/,AI,,,,EMC Hub is a AI+Web3 computing power and model marketplace.,,W. L.,,https://twitter.com/EMCprotocol,1101359709547679848,https://t.me/emc_network,https://medium.com/@EMCProtocol,https://github.com/EMCProtocol-dev,,,true,false
Efani,w1b0je,https://www.efani.com/,NOT_DEPIN,,,,Efani is a provider of secure mobile services that protect high-risk individuals from mobile hacks.,,,,https://twitter.com/efani,,,,,https://www.linkedin.com/company/efani/,,true,false
Effect,n3lgh9,https://effect.ai/,HUMAN_CAPITAL,,EFX,effect-network,Effect is a decentralized network for human intelligence where workers and requesters can easily connect and work together.,,ZZ,,https://twitter.com/effectaix,519860537891487745,https://t.me/effectai,,https://github.com/effectai,,,true,false
EIDON AI,5s0ew6,https://eidon.ai/,AI,,,,"Eidon AI builds a decentralized AI data platform where AI memory is open, verified, and free from single-entity manipulations, ensuring the integrity of AI learning and inference.",Data,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/eidon_ai,,,,,,,true,false
Elastos,ry6qz8,https://elastos.info/,BLOCKCHAIN_INFRA,ETHEREUM,ELA,elastos,"Elastos is a decentralized peer-to-peer economic infrastructure powered by blockchain. It can be used to authenticate digital rights, transfer contracts, and turn digital information into assets, and aims to serve as a new smarter, and safer web.",,ZZ,,https://x.com/ElastosInfo,,https://t.me/elastosgroup,,,,,true,false
Electric Tree,xhfj9r,https://vision.electrictree.com/,BLOCKCHAIN_INFRA,,,,Electric Tree is a decentralized climate finance platform built to bridge the climate financing gap for carbon removal.,Environmental,,,,,,,,,,true,false
Electron,5irc1k,https://electronlabs.org/,NOT_DEPIN,,,,Electron Labs is building a ZK-powered computational compression engine for consensus protocols.,ZK,ZZ,,https://twitter.com/labs_electron,,,,,,,true,false
Element,hz4cbu,https://element.io/,WIRELESS,,HYP,hyperstake,Element is a Matrix-based end-to-end encrypted messenger and collaboration app.,,ZZ,,https://twitter.com/element_hq,,,https://element.io/blog/,https://github.com/vector-im,https://www.linkedin.com/company/element-hq/,,true,false
Eleuther,d1vp44,https://www.eleuther.ai/,AI,,,,"A non-profit research lab focused on interpretability, alignment, and ethics of AI. EleutherAI has trained and released many powerful open source LLMs.",,,,https://twitter.com/AiEleuther,729741769192767510,,https://blog.eleuther.ai/,https://github.com/EleutherAI,https://www.linkedin.com/company/eleutherai/,,true,false
Elixir,wrifq0,http://www.elixir.finance/,NOT_DEPIN,ETHEREUM,ELXR,elixir-finance,Elixir: Decentralized protocol for secure market-making.,,,,https://twitter.com/ElixirProtocol,1059691738349977674,https://t.me/elixirprotocol,,,http://www.linkedin.com/company/elixir-protocol,,true,false
ELNA,pa5lys,https://www.elna.ai/,AI,,ELNA,,"ELNA is a community-driven, transparent AI agent creation and monetization platform on the blockchain.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/elna_live,,,,,,,true,false
ELOOP,c0u4u3,https://eloop.one/en/,MOBILITY,,,,"ELOOP: Rent, share, and charge electric cars.",,,,,,https://t.me/eloopone,,,https://www.linkedin.com/company/eloopmobi,,true,false
Elumicate,ue1aq8,https://elumicate.com/,SENSORS,,,,World vision network powered by the people. Elumicate ceased operations in March 2024,,EV3 Sal,,,945776985240637440,,,,,,false,false
Elusiv,3wkk5f,https://www.elusiv.io/,NOT_DEPIN,,,,Elusiv is building a Web3 universal encryption layer empowering the decentralized world.,,,,https://twitter.com/elusivprivacy,963285822327652403,,https://medium.com/elusiv-privacy,https://github.com/elusiv-privacy,https://www.linkedin.com/company/elusiv/,,false,false
EMC Protocol,2l10iw,https://www.edgematrix.pro/,COMPUTE,ARBITRUM,EMC,,"EMC is a decentralized GPU computing network supported by EVM and multi-chain, serving as the gateway for Computing Power and Web3 in the AI era",,,,https://twitter.com/EMCprotocol,1101359709547679848,https://t.me/+NGI26KSbBpA3YzA0,https://medium.com/@EMCProtocol,https://github.com/EMCProtocol-dev,,,true,false
Emerald,y339w7,https://www.emeraldco.io/,RWA,ETHEREUM,EMRLD,the-emerald-company,"Emerald is a blockchain-based project focused on transforming the emerald and luxury jewelry market through transparent, traceable, and ethically sourced products, with a revenue model including fractional ownership, sales, and rentals.",,ZZ,,https://twitter.com/theemeraldco,,,,,,,true,false
Emerge,dmf572,https://www.emergetools.com/,NOT_DEPIN,,,,Emerge is a suite of app development products designed to supercharge mobile apps and the teams that build them.,,,,https://twitter.com/emergetools,,,,,https://github.com/EmergeTools/,,true,false
Emet,agk19k,https://www.emetresearch.ai/,AI,,Émet,,"Émet is a data licensing company that mines cleans, refines, and distributes high-quality data licensed from real people and organizations for use in training AI models while helping individuals and organizations earn from their data.",Data,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/emetresearchai,,,,,,,true,false
Empowa,zpuftm,https://empowa.io/links/,RWA,CARDANO,EMP,empowa,"Empowa is an ecosystem leveraging smart contracts, tokenization, and DeFi to provide climate-smart housing and green home loans to financially excluded communities in Africa, fostering wealth creation, financial inclusion, and sustainability.",Real Estate,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/empowa_io,,,,,,,TRUE,FALSE
Empyreal,mmo63y,https://empyrealsdk.com/,NOT_DEPIN,ARBITRUM,EMP,empyreal,"Empyreal is a protocol that leverages privacy technology, encryption, and automation to optimize trading operations and user security across multiple blockchain platforms.",,EV3 Sal,,https://twitter.com/empyrealSDK,1096496676845396108,https://t.me/empyrealportal,https://medium.com/@empyrealsdk,https://github.com/empyrealapp/empyrealSDK/tree/rc0.1,,,true,false
Encloud,29p0bm,https://encloud.tech/,AI,,,,"Encloud is a confidential and flexible software that enables organizations to deploy machine learning and AI like LLMs in a private, controllable, and auditable way.",,ZZ,,https://x.com/encloudio,,,,https://github.com/encloud-tech,https://www.linkedin.com/company/encloudtech/,,true,false
Endcoin,cj88v2,https://pulseonclimate.xyz/,PENDING,,,,,,ZZ,,https://twitter.com/pulseonclimate,,,,,,,true,false
Energiedigital,ylaztr,https://www.energiedigital.at/#p,ENERGY,,,,"Energiedigital plans, builds decentralized energy solutions for buildings and districts including private individuals in single-family homes and commercial residential and neighborhood developers.",,,,,,,https://www.energiedigital.at/#blog,,https://www.linkedin.com/company/energiedigital/,,true,false
Energy Cube,208uca,https://www.ec-cube.io/,ENERGY,PEAQ,ECT,,"Energy Cube is a Decentralized Energy Network optimizing global energy use with the Ec³ Cube device, enabling data-driven participation in the energy market.",,ZZ,,https://twitter.com/Ec3_DeEnergy,1198848743068422255,,,,,,true,false
Energy Web,tjcjjf,https://www.energyweb.org/,ENERGY,GNOSIS,EWT,energy-web,"The Energy Web Foundation fosters value creation in the energy sector by building and promoting an open, decentralized software infrastructure built around blockchain technology.",,,,,706103009205288990,,,,,,true,false
enq,i5b54g,https://enqai.com/,AI,ETHEREUM,ENQAI,,enqAI is developing a Network for Decentralized Uncensored AI Models,,Mahesh | Escape Velocity,,https://twitter.com/enq_AI,1079425803441426562,https://t.me/noisegpt,,,,,true,false
Enshrine Computing,5dh3my,https://enshrine.ai/,COMPUTE,,,,"Enshrine Computing is building autonomous computing on top of trusted execution environments (TEEs) to provide a high-performance, secure, and convenient platform for Web3 developers.",,ZZ,,https://twitter.com/EnshrineCC,1082352075431759872,,,,,,true,false
Entangle,upuriv,https://entangle.fi/,BLOCKCHAIN_INFRA,ETHEREUM,NGL,entangle,"Entangle is a customizable messaging Infrastructure designed to unify web3 and optimize ecosystem liquidity. It provides builders & dApps authenticated, customizable, and interoperable data secured on the blockchain with full security configurability.",,ZZ,,https://twitter.com/Entanglefi,938906933732212846,,,,,,true,false
Entheos,0if1hs,https://www.entheos.network/,ENERGY,,,,Entheos Network: energy solutions & batteries for businesses globally.,,,,https://x.com/entheosnetwork,,,https://entheosnetwork.medium.com/entheos-network-b3e43242a5ae,,http://www.linkedin.com/company/entheos-network,,true,false
ENTROPY,6ivkkt,https://justentropy.lol/,PENDING,,,,,,EV3 Sal,,https://x.com/justentropylol,,,,,,,true,false
EnviDa,jp0amc,https://envidatoken.io/,PENDING,,,,,,W. L.,,https://x.com/envidadatatrack,,,,,,,true,false
EnviroBLOQ,czooh2,https://envirobloq.io/,SENSORS,IOTEX,,,EnviroBLOQ is a decentralized network of connected smart home devices.,,,,https://x.com/envirobloq,,,,,,,true,false
Enzyme,x7rtjw,https://enzyme.finance/,NOT_DEPIN,ETHEREUM,MLN,melon,"Welcome to the future of asset management. Build, scale and monetise an investment strategy that suits your needs.",,,,https://twitter.com/enzymefinance,515208056720719872,https://telegram.enzyme.finance/,http://www.linkedin.com/company/enzymefinance,https://medium.com/enzymefinance,https://github.com/enzymefinance,,true,false
EO3,ttrbf5,https://www.eo3.dev/,SENSORS,,,,"EO3 is a decentralized ecosystem for Earth Data & Intelligence that connects providers (content creators), insight developers (data miners), and the user (purchaser) communities, with verification nodes to validate and distribute data & insights.",,EV3 Sal,,,,,,,,,true,false
eOracle,buxrm5,https://eoracle.io/,BLOCKCHAIN_INFRA,,,,eOracle is a programmable data layer that extends Ethereum Proof of Stake to connect smart contracts with real-world data.,Oracle,EV3 Sal,,https://x.com/eoracle_network,,,,,,,true,false
Epics,w0bliz,https://epics.dev/en/,HUMAN_CAPITAL,,,,Epics is a decentralized crowdsourcing platform that uses gamification to incentivize open-source software development.,,ZZ,,https://x.com/EpicsDAO2,976136099107840071,,,https://github.com/epics-base,https://www.linkedin.com/company/epic1979,,true,false
EpiK,0lasch,https://www.epik-protocol.io/,AI,ETHEREUM,AIEPK,epik-protocol,"EpiK Protocol: Using IPFS, DAO and token economy to build a large-scale knowledge graph.",,,,https://twitter.com/EpikProtocol,740760785487265815,https://t.me/EpikProtocol,https://epikprotocol.medium.com/,https://github.com/EpiK-Protocol,http://www.linkedin.com/company/epikprotocol,,true,false
Epistral,m3m6sw,https://epistral.xyz/,INTELLECTUAL_PROPERTY,,,,"Epistral Protocol is building an Anti-mimetic network for the future of decentralized media, revolutionizing DApps with a unique app chain that rewards and builds trust through quality, on-chain reputation data.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/epistral,,,,,,,true,false
Epoch Protocol,skyoqf,https://epochprotocol.xyz/,BLOCKCHAIN_INFRA,,,,"Epoch Protocol provides a user-friendly abstraction layer for Web3 interactions, simplifying blockchain complexities and enhancing accessibility.",,EV3 Sal,,https://twitter.com/0xepochprotocol,,,,,,,true,false
epPlex,ccemio,https://www.epplex.xyz/,NOT_DEPIN,,,,Empowering a new frontier of Solana NFT use-cases with ephemeral epNFTs,,,,,,,,,,,true,false
EpsilonAI,gblzi3,https://www.epsilonai.pro/,AI,ETHEREUM,EPSAI,,"Epsilon AI pioneers decentralized computing by integrating advanced AI models with high-performance hardware, empowering users through GPU/CPU rentals, AI-Powered Mining Optimizer, Revenue Sharing, Staking, and Plugin Compatibility.",GPUs,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/EpsilonAITech,,,,,,,true,false
Equito,02ugap,https://equitofinance.com/,NOT_DEPIN,,,,Equito Finance is a chain-agnostic open-source bridge protocol.,Bridges,ZZ,,https://twitter.com/EquitoFinance,952703700483330049,,,https://github.com/EquitoBridge,https://it.linkedin.com/company/equito-finance,,true,false
Ergo,"5vuxdv""",https://ergoplatform.org/en/,NOT_DEPIN,NATIVE,ERG,ergo,"Ergo is a smart contract platform that ensures the economic freedom of ordinary people through secure, accessible, and decentralized financial tools. It is backed by a powerful scripting language and a suite of powerful zero-knowledge proofs.",,ZZ,,,,,,,,,true,false
Espresso Systems,1rgbka,https://www.espressosys.com/,NOT_DEPIN,ETHEREUM,ESP,,Espresso Systems is a decentralized sequencer and data availability system connecting layer-2 scaling solutions.,,ZZ,,,854451048012709889,,,,,,true,false
Esprezzo,d3ep1m,https://esprezzo.io/,BLOCKCHAIN_INFRA,,,,"Esprezzo Dispatch is a no-code platform for creating and monitoring notifications across NFT projects, brands, and games.",,EV3 Sal,,https://twitter.com/esprezzoapp,499251640734580766,,,,,,true,false
ETCMC,weqn6l,https://www.etcmc.org/,NOT_DEPIN,ETHEREUM,ETCPOW,,ETCMC is a community-driven mining pool and decentralized autonomous organization that pays additional rewards to miners through its ETCPOW token.,,,,,1097466944136941599,,,,,,true,false
Eternis,jzq912,,PENDING,,,,,,EV3 Sal,,https://x.com/eternisai,,,,,,,true,false
ether.fi,1agi71,https://ether.fi/,NOT_DEPIN,,,,Ether.fi is a non-custodial decentralized ETH staking method that rewards node operators for participating in staking.,,,,https://twitter.com/ether_fi,1064694900819509358,https://t.me/+C3fpSjmPqzA5NTVh,https://medium.com/etherfi,,http://www.linkedin.com/company/etherfi,,true,false
Etherfuse,hlclax,https://etherfuse.com/,PENDING,,,,,,ZZ,,https://x.com/etherfuse,,,,,,,true,false
Etherisc,mtmthh,https://etherisc.com/,NOT_DEPIN,ETHEREUM,DIP,etherisc,"Etherisc is a decentralized insurance protocol that makes the build, purchase, and sale of parametric insurance straightforward and more efficient.",,,,,,,,,,,true,false
Etherland,z4helo,https://etherland.world/,RWA,,ELAND,,"Etherland is digitalizing real-estate properties and their owners' legal documents, granting unhinged traceability and immutability through blockchain and IPFS technologies.",,ZZ,,,797343471379152917,,,,,,true,false
EtherMail,hoaz0e,http://www.ethermail.io/,BLOCKCHAIN_INFRA,ETHEREUM,EMT,ethermail,"EtherMail: secure, anonymous email with blockchain rewards.",,,,https://twitter.com/ethermail_io,,https://t.me/ethermail_official,https://medium.com/@ethermail_io,,http://www.linkedin.com/company/xearndao,,true,false
Ethernity Cloud,iyi6t5,https://ethernity.cloud/,COMPUTE,ETHEREUM,ETNY,ethernity-cloud,Ethernity Cloud is a decentralized confidential computing ecosystem that enforces privacy for the user's data and transparency for the operations that process this data.,,W. L.,,,183867536931160064,,,,,,true,false
ETHforestAI,njhr2m,https://ethforest.ai/,AI,ARBITRUM,ETHFAI,ethforestai,ETHforestAI is a Web3 learning platform with an integrated AI chatbot and Learn-To-Earn features.,,,,https://twitter.com/ETHforestAI,,https://t.me/ETHforestAI,https://medium.com/@ethforestai,,,,true,false
EthicHub,zg2781,https://ethix.ethichub.com/,RWA,,ETHIX,,"EthicHub is a blockchain-based crowdlending platform that connects small farmers with affordable financing, helping them access global markets while offering investors the opportunity to support sustainable agricultural projects.",Credit,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/EthicHub,,,,,,,TRUE,FALSE
Etho,my9a38,https://ethoprotocol.com/,COMPUTE,NATIVE,ETHO,etho-protocol,Etho Protocol (ETHO) is a decentralized data/storage hosting platform using a community-owned node network combining blockchain indexing technology and the IPFS protocol to deliver decentralized data/content on-demand.,,ZZ,,,1198594392542429254,,,,,,true,false
Ethoplex,6v375z,https://www.ethoplex.com/,WIRELESS,,,,"Ethoplex is a leading wireless internet service provider that delivers advanced, high-speed Internet access to businesses and rural residential customers alike.",,EV3 Sal,,https://twitter.com/ethoplex,,,,,https://www.linkedin.com/company/ethoplex/,,true,false
Ethstorage,2kn4hu,https://eth-store.w3eth.io/,COMPUTE,,,,Ethstorage is a cost-effective Layer 2 storage rollup solution on Ethereum.,L1/L2,,,https://twitter.com/EthStorage,1040111910802182186,https://t.me/ethstorage,https://ethstorage.medium.com/,https://github.com/ethstorage/,,,true,false
Etica,x18i9v,https://www.eticaprotocol.org/,PENDING,,,,,,ZZ,,https://twitter.com/eticaprotocol,,,,,,,true,false
EVDC,i1vlzz,https://evdc.network/,ENERGY,NATIVE,EVDC,electric-vehicle-direct-currency,EVDC is a decentralized EV charging platform that allows users to pay for electric vehicle charging with both fiat and its native crypto token via a user-friendly mobile app connected to global charging stations.,,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/evdc_network,,,,,,,true,false
EVearn,xs9i0g,https://vebetterdao.org/,MOBILITY,,B3TR,,EVearn is a Charge2Earn dApp that rewards Tesla drivers with tokens for charging their vehicles and offsetting CO2 emissions.,,0x911445B1d3eB2af49d08c67ca6E7dc1c464bE5F5,,https://x.com/EvearnB3TR,,,,,,,true,true
Everdome,t4w143,https://everdome.io/,NOT_DEPIN,BINANCE,DOME,everdome,Creating a hyper-realistic Metaverse for a seamless Web3 experience.,,,,https://twitter.com/Everdome_io,1002185140782510181,https://t.me/everdome,,,https://www.linkedin.com/company/everdome-io/,,true,false
Evernode,l3dm6a,https://www.evernode.org/,COMPUTE,,EVR,evernode,"Evernode is a decentralized marketplace for dApp hosting infrastructure, enabling users to offer hosting services globally via the Xahau Network.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/evernodexrpl,,,,,,,true,false
everVision,zr5vzn,https://ever.vision/,COMPUTE,,,,"everVision: Blockchain provider for Web3 development, offering everPay, Permaswap, PermaDAO, and Web3Infra.",,,,https://twitter.com/everVisionHQ,826354651493564446,,,https://github.com/everFinance,https://sg.linkedin.com/company/ever-vision,,true,false
Everyname,2i6tkv,https://www.everyname.xyz/,NOT_DEPIN,,,,Everyname is a provider of an advanced protocol for retrieving info from any blockchain name registry.,,,,,,,,,,,true,false
Everyworld,si0rd5,https://www.everyworld.com/,NOT_DEPIN,ETHEREUM,EVERY,everyworld,"Everyworld is a global content network that rewards users for their time and attention, transforming digital activity into rewards. Users can earn points through engagement, participate in drawings for payouts, and support environmental charities.",,ZZ,,https://twitter.com/JoinEveryworld,,,,,,,true,false
Evolve,dc1o6d,https://www.evolvenetwork.ai/,AI,,EVOLVE,,Evolve Network is a decentralized compute platform that democratizes AI agent creation by enabling users to develop and interact with advanced LLM agents through peer-to-peer distributed inferencing on a global GPU grid.,GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/evolvenetworkai,,,,,,,true,false
Exa,90eym0,https://www.exaprotocol.com/,COMPUTE,,,,Exa Protocol is a decentralized distributed file system using mobile devices.,Storage,ZZ,,https://twitter.com/ExaProtocol,916886546903347230,https://t.me/exaprotocol,,,https://linkedin.com/company/exa-protocol,,true,false
Exabits,ks1fra,https://www.exabits.ai/,COMPUTE,,,,exaBITS is a decentralized infrastructure for AI and computationally intensive applications.,GPUs,,,https://twitter.com/exa_bits,1105999312393076877,https://t.me/+D0CulDl9udZjMWIx,https://medium.com/decentralizedcomputing,,http://www.linkedin.com/company/exabits,,true,false
Exatech,s2x25a,https://exatech-ext.com/,BLOCKCHAIN_INFRA,BINANCE,EXT,exatech,"Exatech operates the EXA_Chain ecosystem, a unique Proof of Artificial Intelligence (PoAI) algorithm-based blockchain allowing developers to rapidly deploy tokens that support their applications in a safe and secure environment.",,ZZ,,https://twitter.com/ExaTechPoAI,,https://t.me/EXATechOfficialEN,https://medium.com/@exatechofficialen,,,,true,false
Exo,suaqpg,,COMPUTE,,,,Exo allows users to connect phones and laptops in one network to run AI models without needing an NVIDIA GPU.,,EV3 Sal,,https://x.com/exolabs_,,https://t.me/+Kh-KqHTzFYg3MGNk,,,,,true,false
Exorde,h8zfoc,https://exorde.io/,AI,ETHEREUM,EXD,exorde,Exorde is a protocol that uses AI + DePIN to empower developers to crawl and analyze public data on the web through APIs.,Data,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/exordelabs,,,,,,,true,false
Expanso,rntyxj,https://www.expanso.io/,COMPUTE,,,,"Expanso runs jobs exactly where your data resides, utilizing local compute, and minimizing data throughput.",,EV3 Sal,,https://x.com/BacalhauProject,,,,https://github.com/bacalhau-project,,,true,false
Exponent Energy,6qah9x,https://www.exponent.energy/,ENERGY,,,,"Exponent Energy is a full stack energy company that builds chargers, batteries and everything in between to unlock 15-minute rapid charging for EVs.",,ZZ,,https://x.com/ExponentEnergy,,,,,https://www.linkedin.com/company/exponent-energy/,,true,false
extrnode,3cyabe,https://extrnode.com/,BLOCKCHAIN_INFRA,,,,"extrnode is a battle-tested, decentralized, open-source RPC gateway by Everstake, connecting dApps to a resilient cluster of RPC nodes.",RPC/Indexing,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/extrnode,,,,,,,true,false
EYWA,tbwx5g,https://eywa.fi/,BLOCKCHAIN_INFRA,,EYWA,,EYWA is a genuinely decentralized medium for transferring data between blockchains and creating aggregated cross-chain assets.,,,,https://twitter.com/eywaprotocol,880102933298049054,https://t.me/eywa_en,https://medium.com/@eywaprotocol,https://github.com/eywa-protocol,https://www.linkedin.com/company/eywa-protocol/,,true,false
EZ WiFi,oazct0,https://ezwi.fi/,WIRELESS,,,,"EZ WiFi is a WiFi management platform helping operators and providers build, monetize, and scale wireless networks.",,,,,,,,,https://linkedin.com/company/ezwifitech,,true,false
EZKL,oehbnl,https://ezkl.xyz/,AI,,,,Harness the power of machine learning in smart contracts without compromising on trust. ezkl makes it possible for anyone to apply zero-knowledge proofs in their smart contracts.,ZK,,,https://x.com/ezklxyz,1017182037964247101,https://t.me/+QRzaRvTPIthlYWMx,,https://github.com/zkonduit/ezkl,,,true,false
Facet,oapz0k,https://facetscan.com/,NOT_DEPIN,,,,"Facet is a decentralized, low-cost computing platform that leverages the deterministic nature of Ethereum transactions to reduce gas costs drastically.",,ZZ,,https://twitter.com/0xFacet,,,,,,,true,false
FACT0RN,w0jykb,https://www.fact0rn.io/,BLOCKCHAIN_INFRA,NATIVE,FACT,fact0rn,FACT0RN: a blockchain replacing hashing with Integer Factorization as Proof of Work. Forked from bitcoin V22.0.,,,,https://x.com/fact0rn,1119575806818123838,,,https://github.com/FACT0RN,,,true,false
FairAI,okqzkx,https://getfair.ai/,AI,,,,"FairAI is a decentralized marketplace, powered by Arweave, where creators of open-source AI models can monetize their work while users retain ownership and intellectual property rights of AI-generated content.",,ZZ,,https://twitter.com/getFairAI,1106885645948944407,,https://blog.getfair.ai/,https://github.com/getFairAI/decentralised-inference,https://www.linkedin.com/company/getfairai/,,true,false
Fairblock,9hptcu,https://www.fairblock.network/,NOT_DEPIN,,,,"Fairblock is a blockchain infrastructure and framework that focuses on conditional decryption and programmable privacy, providing users and developers with enhanced privacy and security for on-chain applications.",,,,,1195755103735513138,,,,,,true,false
Fansland,iqg5iv,https://fansland.io/,NOT_DEPIN,NATIVE,FANS,,"Fansland is a Web3 platform that integrates real-world music festivals, virtual idol IPs, and token assets with AI interaction experiences, offering fair launch opportunities and integrated AI interactions to create a dynamic and inclusive fan economy.",,EV3 Sal,,https://twitter.com/fansland_io,,,,,,,true,false
Fantom Foundation,692g5w,https://www.fantom.foundation/,NOT_DEPIN,,,,"Fantom is a decentralized, open-source, smart contract platform that aims to provide fast, secure, and scalable infrastructure for decentralized applications (dApps).",,,,,582931087005843466,,,,,,true,false
FanTV,yoxura,https://fantv.world/,HUMAN_CAPITAL,,,,FanTV is an app-based Watch to Earn Platform that allows users to watch ad-free trending videos and earn rewards.,,EV3 Sal,,,978254897088708649,,,,,,true,false
Fanztar,94944x,https://fanztar.com/,AI,,,,"Fanztar empowers creators to build their fan communities and enable fans to own a share in their success, giving fans an opportunity to become a part of a Creator exclusive community.",Software,,,https://x.com/join_fanztar,,,,,https://www.linkedin.com/company/fanztar/about/,,true,false
Farcaster,qbrxm3,https://www.farcaster.xyz/,NOT_DEPIN,,,,Farcaster is a sufficiently decentralized protocol for building social apps.,Social,,,https://twitter.com/farcaster_xyz,,https://t.me/farcasterdevchat,,https://github.com/farcasterxyz,https://www.linkedin.com/company/farcaster/,,true,false
Farmsent,xxh0a4,https://www.farmsent.io/,NOT_DEPIN,POLYGON,FARMS,farmsent,Farmsent is a decentralized network of farmers to enhance global food commerce and security.,,EV3 Sal,,https://twitter.com/farmsent_io,,,,,,,true,false
Fastlane,y3c7dz,https://fastlane.foundation/,AI,SOLANA,LANE,fastlane,"Fastlane is a scalable, censorship-resistant infrastructure hub for decentralized AI agents, enabling developers to create, deploy, and manage AI-driven dApps with high efficiency and low cost.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/fastlanesol,,,,,,,true,false
Fastmind,pdfz5m,,PENDING,,,,,,EV3 Sal,,https://x.com/Fastmind,,,,,,,TRUE,FALSE
Faye,pddr3z,https://www.faye.xyz/,AI,,,,"Faye is a self-learning AI chatbot for accurate, relevant, and on-chain troubleshooting of smart contracts.",,,,https://twitter.com/faye_digital,,,,,https://www.linkedin.com/company/we-eat-software/,,true,false
FederalAI,4vhyme,https://federalai.io/,AI,ETHEREUM,FEDAI,federal-ai,"Federal AI is a platform that democratizes AI model training, prioritizing data privacy and security while fostering decentralized collaboration across various industries for transformative advancements.",,ZZ,,https://twitter.com/FederalAI_io,,https://t.me/FederalAI,https://medium.com/@federalai,,,,true,false
FEDML,913hpf,https://www.fedml.ai/,AI,,,,"FEDML provides the generative AI platform and foundation models to enable developers and enterprises to build and commercialize their own generative AI applications easily, scalably, and economically.",,ZZ,,https://twitter.com/fedml_ai,1011343758463356928,,https://medium.com/@FedML,https://github.com/FedML-AI/FedML,https://www.linkedin.com/company/79483881/,,true,false
Felt,9s2i5w,https://feltlabs.ai/,AI,,,,Tools for privacy preserving data science. Run machine learning or simple analytics on distributed data.,,EV3 Sal,,,927873274136891392,,,,,,true,false
Fermah,qv1tl3,https://www.fermah.xyz/,PENDING,,,,,,,,https://x.com/fermah_xyz,,,,,,,TRUE,FALSE
Fetch.ai,mhpovr,https://fetch.ai/,AI,ETHEREUM,FET,fetch-ai,Fetch.ai is a Blockchain-based AI and ML platform connecting devices for market creation and data value addition.,,,,https://twitter.com/Fetch_ai,1141305890796994651,https://t.me/fetch_ai?utm_source=website,https://medium.com/fetch-ai,https://github.com/fetchai?utm_source=Website,http://www.linkedin.com/company/fetch-ai,,true,false
Fhenix,k7ct7d,https://www.fhenix.io/,NOT_DEPIN,ETHEREUM,,,Fhenix is the first Fully Homomorphic Encryption (FHE) powered L2 to bring computation over encrypted data to Ethereum.,,EV3 Sal,,,1113764193670275124,,,,,,true,false
FidesInnova,fftz4o,https://fidesinnova.io/,PENDING,,,,,,EV3 Sal,,https://x.com/FidesInnova,,,,,,,TRUE,FALSE
Filebase,ush02g,https://filebase.com/,COMPUTE,,,,Filebase is a reliable IPFS pinning service that provides secure and efficient file storage and management.,Storage,,,https://twitter.com/filebase,827386332795371560,,,https://github.com/filebase,https://linkedin.com/company/filebase,,true,false
Filecoin,r1uv9t,https://filecoin.io/,COMPUTE,FILECOIN,FIL,filecoin,"Filecoin is the largest decentralized data storage marketplace, protocol, & cryptocurrency.",,,,https://twitter.com/Filecoin,1210612276357500978,https://t.me/filecoinio,https://filecoin.io/blog/,https://github.com/filecoin-project,,,true,false
FileStar,h7mk5k,https://filestar.net/en,COMPUTE,,STAR,filestar,"FileStar is a Web 3.0 decentralized storage, verifiable computation, and measurable bandwidth network infrastructure.",Storage,ZZ,,https://twitter.com/FileStarProject,,https://t.me/filestarofficial,https://filestarofficial.medium.com/,https://github.com/filestar-project,,,true,false
Fileverse,gtzdge,https://fileverse.io/,COMPUTE,,,,On-chain people and communities deserve on-chain tools for private communication and collaboration.,,EV3 Sal,,https://x.com/fileverse,,,,https://github.com/fileverse,,,true,false
Final Autoclaim,equ0rp,https://spacetoken.tech/,NOT_DEPIN,BINANCE,SPACE,space-token-bsc,Final Autoclaim is a user-friendly cryptocurrency faucet that allows users to claim various cryptocurrencies through automated and easy-to-use processes.,,,,,837632716862128131,,,,,,true,false
Findora,rxpqem,https://findora.org/,BLOCKCHAIN_INFRA,NATIVE,FRA,findora,Findora is a Layer-1 protocol delivering zero-knowledge solutions to Web3. Findora integrates two ledgers into a single chain: an EVM ledger for interoperability and a UXTO ledger optimized for zk operations.,,ZZ,,,,,,,,,true,false
Finterest,e1k2h0,https://tyhcm-sqaaa-aaaah-abjya-cai.ic0.app/,NOT_DEPIN,,,,Finterest is a decentralized borrowing/lending protocol on The Internet Computer built to support native Bitcoin.,DeFi,,,https://twitter.com/FinnyICP,,,https://medium.com/finteresticp,,https://www.linkedin.com/company/finteresticp,,true,false
Firefly,7aayx5,https://fireflyedu.org/,HUMAN_CAPITAL,,,,"Firefly is a blockchain-based homeschool ecosystem offering a digital marketplace for educational content, live and virtual instruction, and a global community for students, parents, and educators.",Labor,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/Firefly_Edu,,,,,,,TRUE,FALSE
Firethree,gdo61v,https://www.firethree.xyz/,BLOCKCHAIN_INFRA,,,,Products and solutions for every stage of your app development journey!,,,,https://twitter.com/_firethree,,,,,,,true,false
First Approval,swaz55,https://intro.dev.firstapproval.io/,SCIENCE,,,,"First Approval is a decentralized platform for raw scientific data publication, storage, and exchange.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/firstapproval,,,,,,,true,false
First Studio,9psqih,https://firststudio.ai/,AI,BITTENSOR,,,The First AI Studio built on top of the #bittensor network that will onboard 10 million users.,,EV3 Sal,,,,,,,,,true,false
Firstbatch,xjzev4,https://www.firstbatch.xyz/,BLOCKCHAIN_INFRA,,,,FirstBatch is building collaboration and user-centric tools for AGI.,,ZZ,,https://twitter.com/firstbatchxyz_,1088019643618308200,,https://medium.com/@FirstBatchLabs,https://github.com/firstbatchxyz,https://www.linkedin.com/company/firstbatchxyz,,true,false
FirstTensor,3b72sd,https://firsttensor.com/,AI,,,,FirstTensor is a community-powered Bittensor Validator.,,,,https://twitter.com/firsttensor,1086605920802459691,https://t.me/firsttensor,,,,,true,false
Fishcoin,0uzrya,https://fishcoin.co/,SENSORS,,,,Fishcoin is a blockchain based traceability and data ecosystem designed specifically for the global seafood industry.,Environmental,,,https://twitter.com/i/flow/login,,,https://medium.com/fishcoin,,http://www.linkedin.com/company/fishcoin,,true,false
Fission,dkaff9,https://fission.codes/,BLOCKCHAIN_INFRA,,,,Fission builds open source protocols and managed solutions that empower developers to construct scalable and secure software applications.,,ZZ,,https://twitter.com/FISSIONcodes,478735028319158273,,https://fission.codes/blog/,https://github.com/fission-codes/,https://ca.linkedin.com/company/fissioncodes,,false,false
Fit24,g1cvrp,https://blockfit.io/,HUMAN_CAPITAL,NATIVE,FIT24,,Fit24 by BlockFit is a web3 and AI-based fitness app that allows global users to track their fitness progress and earn rewards for achieving milestones through a Fit24 token.,Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd746,,https://x.com/Fit24global,,,,,,,TRUE,FALSE
Fitcentive,jvwxi0,,PENDING,,,,,,EV3 Sal,,https://x.com/xnscloud,,,,,,,true,false
Flai,6j3y7z,https://www.flai.ai/,WIRELESS,,,,Flai develops a web-based application that automatically turns raw geospatial data into meaningful information.,,,,,,,https://www.flai.ai/blog,,http://www.linkedin.com/company/flai-ai,,true,false
Flare,8u08fw,https://flare.network/,BLOCKCHAIN_INFRA,ETHEREUM,FLR,flare,"Flare is the blockchain for data, providing developers with secure decentralized access to high-integrity data from other chains and the internet. ",,,,https://twitter.com/FlareNetworks,743422808499028049,https://t.me/FlareNetwork,https://medium.com/flarenetwork,https://github.com/flare-foundation,https://www.linkedin.com/company/flarenetwork/,,true,false
Fleek,7f3dsw,https://fleek.network/,COMPUTE,,,,"Fleek Network is optimized to facilitate the deployment and running of performant, geo-aware decentralized web and edge services.",,EV3 Sal,,,965698989464887386,,,,,,true,false
Flex,nxn4fc,https://flexwallet.xyz/,NOT_DEPIN,,,,Digital wallet from the future,,,,,,,,,,,false,false
fliggs,gkt0ei,https://www.fliggsmobile.com/,WIRELESS,,,,"Fliggs Mobile is bridging Web3 and Telco, elevating mobile connectivity with a wallet, a digital ID, and loyalty rewards.",,EV3 Sal,,https://twitter.com/fliggs_mobile,,,,,https://www.linkedin.com/company/fliggs/,,true,false
Flock Safety,kcetq1,https://www.flocksafety.com/,NOT_DEPIN,,,,Flock Safety is a developer of a camera technology designed to capture images to eliminate crime while protecting privacy.,,EV3 Sal,,https://twitter.com/Flock_Safety,,,,,https://www.linkedin.com/company/flock-safety/,,true,false
Flock,ruqwx5,https://flock.io/,AI,,,,FLock.io is a decentralized AI training and finetuning platform.,,EV3 Sal,,,977200106531082240,,,,,,true,false
Flostream,7gpzh9,https://flo.stream/,COMPUTE,,,,"Flostream is a cutting-edge, high-performance enterprise storage protocol focused on security, scalability, and flawless content delivery, aiming to redefine data management and accessibility across networks.",Storage,ZZ,,http://twitter.com/davidrhodus,,,,,,,true,false
Flow,g4borf,https://flow.com/,NOT_DEPIN,NATIVE,FLOW,flow,"Flow is a proof of stake blockchain designed for Web3 and the open metaverse, supporting large-scale decentralized applications, NFTs, DeFi, and more, powered by the Cadence programming language.",L1/L2,ZZ,,https://twitter.com/flow_blockchain,613813861610684416,,https://flow.com/blog,https://github.com/onflow,https://www.linkedin.com/company/flow-blockchain/,,true,false
Flowcarbon,hyh5ix,https://www.flowcarbon.com/,NOT_DEPIN,,GNT,,Flowcarbon is a blockchain-enabled carbon credit trading platform leveraging new technology and innovative financing structures to scale the voluntary carbon market (VCM).,,,,https://twitter.com/weareflowcarbon,,,,https://github.com/flowcarbon,https://www.linkedin.com/company/flowcarbon/,,true,false
Flowgate,xwklug,,BLOCKCHAIN_INFRA,,,,"Flowgate is building a fully on-chain Oracle infrastructure that aggregates market data from multiple liquidity sources, reducing latency and cost for DeFi apps.",Oracle,ZZ,,https://twitter.com/Flowgate_sol,,,,,,,true,false
Fluence,ul9uzl,https://fluence.network/,COMPUTE,ETHEREUM,FLT,fluence-2,Fluence - decentralized platform for creating peer-to-peer apps.,,,,https://twitter.com/fluence_project,483968379833679873,https://t.me/fluence_project,https://medium.com/fluence-network,https://github.com/fluencelabs,http://www.linkedin.com/company/fluence-labs,,true,false
Fluent,5sn1ou,https://fluentlabs.xyz/,NOT_DEPIN,,,,Fluent is a general-purpose zkWasm L2 that brings web2’s favorite execution environment onto web3’s most permissionless blockchain. Fluent offers developers the freedom to build composable apps in almost any programming language on Ethereum.,,ZZ,,,,,,,,,true,false
Fluree,ve3bg7,https://flur.ee/,BLOCKCHAIN_INFRA,,,,"Fluree is a crypto-secure semantic graph database with a cloud-native architecture, integrating AI for intelligent data management and enabling users to build comprehensive, secure, and compliant data ecosystems.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/flureepbc,,,,,,,true,false
Flurry,0l3hoz,https://www.flurry.finance/,NOT_DEPIN,ETHEREUM,FLURRY,flurry,Flurry Finance is a protocol that runs on multiple blockchains and specializes in the DeFi market.,,,,https://twitter.com/FlurryFi,896956264590999553,https://t.me/FlurryFinance_Official,https://medium.com/flurry-finance,,https://www.linkedin.com/company/flurryfinance/about/,,false,false
Flux,0t3lhn,https://runonflux.io/,COMPUTE,NATIVE,FLUX,zelcash,"Flux is a decentralized Web3 cloud infrastructure comprised of user-operated, scalable, and globally distributed computational nodes.",,ZZ,,https://twitter.com/RunOnFlux,404415190835134464,https://t.me/runonflux,https://fluxofficial.medium.com/,https://github.com/RunOnFlux,https://www.linkedin.com/company/flux,,true,false
FluxBeam,t5hmj6,https://fluxbeam.xyz/,NOT_DEPIN,,,,FluxBeam is a Next Generation Solana DEX.,,,,https://solana.com/discord,1175135061755056159,https://solana.com/telegram,https://solana.com/news,https://solana.com/github,http://www.linkedin.com/company/solanalabs,,true,false
Fluxbot,ld3i07,https://fluxbot.xyz/,NOT_DEPIN,,,,Fluxbot Trading is a Solana-based telegram bot.,,,,,,,,,,,true,false
FluxEdge,d2rs9o,https://fluxedge.ai/,COMPUTE,,,,"FluxEdge is a decentralized marketplace for computing resources that connects users needing AI, ML, and rendering power with providers of underutilized hardware.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/flux_pouw,,,,,,,true,false
Flywheel Systems,yus8h6,https://flywheel.systems/,NOT_DEPIN,,,,Flywheel Systems is a strategic infrastructure deployment and marketing expertise provider offering solutions and advice to smart investors to earn passive income through DePIN projects.,,ZZ,,,,,,,,,true,false
FMS,o8amjp,https://fmtlol.com/,NOT_DEPIN,POLYGON,FMS,,"FMS is an open-source social and blogging platform that uses web3 technology to power its services. Users can create profiles and share content by posting articles, blogs, images, videos, etc., or join groups with similar interests.",,,,https://twitter.com/fmtlol?lang=en,,,,,,,true,false
FNS,jc1s8z,https://opengatefns.com/,BLOCKCHAIN_INFRA,FILECOIN,FNS,,"Filecoin Naming Service (FNS) is a decentralized name service based on the Filecoin EVM, allowing users and developers to access their data on the Filecoin network using easy-to-remember domain names.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/domainfns,,,,,,,true,false
Foam,olxxfj,https://foam.space/,SENSORS,ETHEREUM,FOAM,foam-protocol,Foam is a blockchain-based platform enabling crowdsourced maps and decentralized location services.,Positioning,,,https://twitter.com/foamspace,,,,https://github.com/f-o-a-m/,http://www.linkedin.com/company/foam-corp,,true,false
Focus Tree,yeuny8,https://www.focustree.app/,NOT_DEPIN,,,,Focus Tree is a web3 productivity app designed to combat social media addiction by rewarding users for minimizing phone usage.,,ZZ,,https://twitter.com/focustree_app,,,,,,,true,false
Fog Works,aqg014,https://fogworks.io/,COMPUTE,,,,Fog Works is a provider of AI-enabling Decentralized Storage Solutions.,Storage,ZZ,,https://twitter.com/fogworksinc/,1046683342025789541,,,,https://www.linkedin.com/company/fog-works,,true,false
FOIL,wd2g59,https://foil.network/,BLOCKCHAIN_INFRA,,,,"FOIL is a scalable, interoperable, and multifunctional blockchain network protocol that serves as a platform for creating unique decentralized ecosystems within multi-tier, distributed, autonomous, and dichotomous environments.",L1/L2,ZZ,,https://twitter.com/FoilNetwork,773843041357135882,,,,https://www.linkedin.com/company/foil2/about/,,true,false
Fone,jbkkn1,https://fone.dev/,BLOCKCHAIN_INFRA,NATIVE,FONE,,"FONE is a custom mobile blockchain and cryptocurrency in the DePIN, NFT, and AI ecosystems, designed to deliver an instant and accessible transactional network.",Mobile,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/fone_network,,,,,,,true,false
Fonoster,qn9h4k,https://fonoster.com/,NOT_DEPIN,,,,Fonoster is a free platform for building voice applications and integrating them with your business app.,,,,https://twitter.com/fonoster,1016419835455996076,,,https://github.com/fonoster,http://www.linkedin.com/company/fonoster,,true,false
Footprint Analytics,77xj4g,https://www.footprint.network/,NOT_DEPIN,,,,"Footprint Analytics helps analysts, builders, and investors turn blockchain data into insights with accessible visualization tools and a powerful multi-chain API.",,EV3 Sal,,https://twitter.com/Footprint_Data,,,,,,,true,false
Formless,13bnxu,https://formless.xyz/,BLOCKCHAIN_INFRA,ETHEREUM,FORMLESS,,"FORMLESS is a decentralized network and digital space that empowers individuals to connect, create, collaborate, and share in a multiplayer digital economy.",,EV3 Sal,,https://x.com/formless_xyz,,,,,,,true,false
Forta,jed7z0,https://forta.org/,AI,ETHEREUM,FORT,forta,"Forta is a real-time detection network for blockchain activity, providing alerts to neutralize threats and prevent loss.",,,,https://twitter.com/FortaNetwork,869983523371642921,https://t.me/s/Forta_Network_Official?before=30,,https://github.com/forta-network,http://www.linkedin.com/company/fortafoundation,,true,false
FortifyAI,qi3hld,https://fortifyai.app/,COMPUTE,NATIVE,FORTAI,,"FortifyAI provides a decentralized, AI-driven data storage platform utilizing hack-proof blockchain technology, allowing users to securely store their critical data.",Storage,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/fortifyai,,,,,,,TRUE,FALSE
FortunX,3n0oh2,https://fortunx.com/,HUMAN_CAPITAL,ARBITRUM,FNX,,"FortunX is a platform that tokenizes reward and loyalty programs, allowing crypto enthusiasts to collect and use crypto at global retailers with web3 technology.",Loyalty,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/FortunX_com,,,,,,,TRUE,FALSE
ForumAI,mfa1jy,https://www.forumai.dev/,AI,NATIVE,FORUM,,ForumAI is a DePIN x AI network that aims to bring decentralized AI agents into web3 gaming via NPCs and more.,Agents,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/ForumAILabs,,,,,,,true,false
Foster Studio,gzq0lf,,NOT_DEPIN,,,,Foster Studio is a platform for creating and selling artist merchandise in the form of Phygital NFTs.,NFTs,,,https://twitter.com/FosterPartners,,,,,https://www.linkedin.com/company/fosterstudios/,,true,false
Founder AI,zodjwl,https://oneliner.xyz/,NOT_DEPIN,,,,"Founder AI is an LLM that will channel the collective wisdom of thousands of founder successes and failures to everyone. ",,ZZ,,,,,,,,,true,false
Foundry,9ngp9i,https://www.mlfoundry.com/,COMPUTE,,,,"Foundry is a new breed of public cloud, powered by an orchestration platform that makes accessing AI compute easier.",,EV3 Sal,,https://twitter.com/mlfoundry,,,,,,,true,false
Fr0ntierX,xfunnc,https://www.fr0ntierx.com/,BLOCKCHAIN_INFRA,,,,Fr0ntierX is a blockchain-based cybersecurity company offering data protection and security solutions to enterprises.,,EV3 Sal,,https://twitter.com/FR0NTIER_X,,,,,,,true,false
Fraction AI,ehsx57,https://fractionai.xyz/,AI,,,,"Fraction AI is developing a web3 platform that enables anyone to generate high-quality labelled data for AI models, using blockchain, smart contracts, and gamification",,,,https://x.com/FractionAI_xyz,1226860543529451561,,https://medium.com/@fractionai,,,,true,false
Freatic,php632,https://freatic.team/,BLOCKCHAIN_INFRA,,,,Freatic is a decentralized information markets protocol that aims to use cryptography and game theory to connect people with untapped information and accelerate the flow of real world information about different markets.,,ZZ,,https://x.com/freaticteam,,,https://medium.com/@freaticteam,https://github.com/freatic,https://www.linkedin.com/company/freaticteam/,,true,false
Freename,bta44y,https://www.freename.io/,BLOCKCHAIN_INFRA,,,,"Freename is a TLD and Domain platform for Web3 that allows users to register and mint their own customized Lifetime Web3 TLDs. ",,,,https://twitter.com/freenameio,1040742304526385293,,https://freename.io/blog/,,https://www.linkedin.com/company/freename/,,true,false
FrenRug,ajzp06,https://www.frenrug.com/,AI,,,,Frenrug is an on-chain AI agent that lives in a friend.tech chatroom managing a portfolio of keys; powered by Ritual.,,Sami,,https://x.com/frenrug,,,,https://github.com/frenrug,,,true,false
Friday,iri6ya,https://www.myfriday.io/,NOT_DEPIN,,,,OwnFriday is developing a Mobile App and Protocol that empower users to repossess valuable web2 data and benefit from it directly in web3 by sharing it directly with creators and enterprises.,,,,https://twitter.com/ownfriday,982482496270778419,,https://medium.com/its-friday,,,,true,false
friend.tech,w9son4,https://www.friend.tech/,NOT_DEPIN,,,,Decentralized social media app where users tokenize profiles and buy/sell shares based on influence.,,,,,,,,,,,true,false
Frigg,ymywqi,https://www.frigg.eco/,RWA,,,,"Frigg connects investors to sustainable projects worldwide, streamlining financing for accessible, impactful investments.",,EV3 Sal,,https://x.com/FriggEco,,,,,,,true,false
FriggHome,knny04,https://www.frigghome.com/,SENSORS,,,,FriggHome is a decentralized physical infrastructure for blockchain networks that can validate ETH and other PoS crypto through a Plug2Earn device.,,W. L.,,,,,,,https://www.linkedin.com/company/frigglobal/,,true,false
Frodobots,zsejow,https://www.frodobots.ai/,SENSORS,,,,Frodobots is an open real-world racing game with sidewalk robots.,,,,,943055769157402624,,,,,,true,false
Fronesis,nriggd,https://fronesis.ai/,PENDING,,,,,,W. L.,,https://x.com/Fronesis_ai,,,,,,,true,false
Frontier,9ny56c,https://frontier.tech/,NOT_DEPIN,,,,Frontier Research is an independent research and advisory group formed to bridge the gap between fundamental research and commercial products.,,EV3 Sal,,,,,,,,,true,false
Fry,jgd2lw,https://www.fryfoundation.com/,SENSORS,ALGORAND,FRY,fryscrypto,Fry Foundation is a decentralized aggregator of decentralized networks.,,,,https://twitter.com/FrysCrypto,1004603899598082069,,,,https://www.linkedin.com/company/fry-foundation/,,true,false
FuelDAO,mt3dmz,https://fueldao.io/,MOBILITY,,,,"FuelDAO is a pioneering DAO that provides eco-friendly transport services, including electric scooter rentals, ride-sharing, and fuel-efficient vehicle leasing with a fully community-owned ridesharing fleet powered by blockchain technology.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/fuel_dao,,,,,,,true,false
Functionland,4z5caf,https://fx.land/,COMPUTE,,FULA,,"Functionland is a decentralized storage network utilizing IPFS, providing secure and encrypted file storage.",Storage,,,https://twitter.com/functionland,735961760464502845,https://t.me/functionland,https://fx.land/blog/,https://github.com/functionland/docs,https://www.linkedin.com/company/functionland/,,true,false
FunDeSci,zj4kdo,https://fundesci.com/,SCIENCE,,,,FunDeSci is a decentralized marketplace that facilitates NFT-based fundraising for early-career researchers seeking to finance innovative scientific initiatives.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/fundesci,,,,,,,true,false
Fungi Cloud,btj93l,,BLOCKCHAIN_INFRA,,,,Fungi Cloud is a decentralized data storage and cloud computing company on top of blockchain technology.,,,,,,,,,https://www.linkedin.com/company/fungiprotocol/,,true,false
Funta,sy29f3,https://www.funta.org/,COMPUTE,SOLANA,FUNTA,,"Funta is a spatial computing basic network, combined with XR hardware and IoT devices, provides basic and scalable computing power for XR applications, and provides users with an XR portal in Web3.",,EV3 Sal,,https://x.com/funta_web3,,,,,,,true,false
Fusun,wm21in,https://www.fusun.org/,ENERGY,KASPA,FUSUN,,"Fusun pioneers green energy solutions through community-driven microgrids, peer-to-peer energy trading, and green hydrogen production, emphasizing efficiency, transparency, and sustainability.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/fusun_org,,,,,,,true,false
Future Networks,amd7gb,https://futurenetworks.host/,SENSORS,,,,Future Networks is a DePIN deployment services provider that operates in the UK & Europe.,,ZZ,,https://twitter.com/Fut_Networks,,,,,,,true,false
FWB,kcidbl,https://www.fwb.help/,NOT_DEPIN,ETHEREUM,FWB,friends-with-benefits-pro,Friends With Benefits is a new kind of social network made up of creatives and builders who believe in the promise of a better internet.,,,,https://twitter.com/fwbtweets,749418486874243212,,,,https://www.linkedin.com/company/fwb-pro/,,true,false
FX1,cijdoj,https://fx1.io/,NOT_DEPIN,ETHEREUM,FXI,fx1sports,FX1 is a sports predictions and analytics platform using AI to power the next generation of GambleFi and fan engagement.,Prediction Market,ZZ,,https://twitter.com/FX1Sports,,,,,,,true,false
G.AI.B,7q72zb,https://www.gaib.ai/,PENDING,,,,"G.AI.B is an economic layer(financialization and liquidity) for AI and compute, enabling DePINfi, GPUStablecoin, and more.",,EV3 Sal,,https://x.com/gaib_ai,,,,,,,true,false
GaGaNode,bdx3sf,https://www.gaganode.com/,COMPUTE,,,,"GaGaNode is a Next generation Decentralized Residential IP + Bandwidth marketplace, that aims to alleviate the global shortage of IPv4 addresses with Web3 technology.",,ZZ,,https://x.com/NetworkMeson,,,,https://github.com/daqnext,,,true,false
GaiAI,xhdfho,https://www.gaiai.io/,AI,,,,"GaiAI is a knowledge service layer for DeAI, providing a simple interface for users to access the latest AI technologies, generate human-judge model comparison data, and earn financial compensation for their engagement.",Data,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/gaiaiio,,,,,,,true,false
GaiaNet,wg92va,https://www.gaianet.ai/,AI,,,,"GaiaNet is building a distributed and incentivized GenAI Agent Network, providing a decentralized computing infrastructure allowing users to create, deploy, scale, and monetize their AI agents.",Agents,ZZ,,https://x.com/Gaianet_AI,1215232680942374912,https://t.me/Gaianet_AI,https://medium.com/@Gaianet.ai,https://github.com/GaiaNet-AI,,,true,false
GAIMIN,cgb22x,https://www.gaimin.io/,COMPUTE,NATIVE,GMRX,,"GAIMIN is a Web3 gaming infrastructure project strategically positioned at the disruptive intersection of Web3, gaming, and cloud computing that aims to utilize the unused and underused computational resources of the global gaming community. ",,W. L.,,,,,,,,,true,false
GainFi,qrok1e,https://gainfi.xyz/,SENSORS,,GAINFI,,GainFi is an AI-Enhanced web3 fitness app that allows users to experience professional athlete training programs with engaging gamification and rewarding crypto incentives.,Health,ZZ,,https://x.com/GainFi_Official,,,,,,,true,false
Galadriel,uoatrw,https://galadriel.com/,BLOCKCHAIN_INFRA,,,,Galadriel is an L1 that enables developers to build decentralized AI apps natively with Solidity.,L1/L2,0x911445B1d3eB2af49d08c67ca6E7dc1c464bE5F5,,https://x.com/Galadriel_AI,,,https://galadriel.com/blog,https://github.com/galadriel-ai,,,true,false
Galeon,n9g3gb,https://blockchain.galeon.care/,COMPUTE,BINANCE,GALEON,galeon,"Galeon is a collaborative healthcare cryptocurrency driving the creation of a global medical network, leveraging blockchain to generate structured Electronic Health Records, facilitate medical AI training, and fund transformative research.",,ZZ,,,,,,,,,true,false
Galileo Protocol,b5sx93,https://www.galileoprotocol.io/,BLOCKCHAIN_INFRA,ETHEREUM,LEOX,leox,The Galileo Protocol is a cutting-edge tokenisation platform that aims to revolutionise the authentication and ownership of luxury goods and real-world assets.,,,,,997525040310521906,,,,,,true,false
Galiot,gt13wv,https://www.galiot.io/,WIRELESS,,,,Galiot is a decentralized wireless technology-related services provider dedicated to expanding Helium 5G in Europe and offering innovative Data-as-a-Service solutions.,,ZZ,,https://twitter.com/galiotio,,,https://medium.com/@galiot.io,,https://www.linkedin.com/company/galiot-io/,,true,false
Galvan,deusl5,https://www.galvan.health/,NOT_DEPIN,ETHEREUM,IZE,galvan,"Galvan is a blockchain technology-based mental health tracking app that uses AI, CBT, and rewards to help users achieve a healthier state of mind.",,ZZ,,,909867857540681749,,,,,,true,false
Galxe,tlwvl7,https://galxe.com/,COMPUTE,ETHEREUM,GAL,galxe,Galxe develops a credential infrastructure that all Web3 developers can access.,,,,,824767871183355954,,,,,,true,false
GamerCoin,z2gapv,https://gamercoin.com/en,COMPUTE,ETHEREUM,GHX,gamercoin,GamerCoin is a blockchain-supported application that allows users to exchange desktop computing power for digital goods.,,ZZ,,https://twitter.com/GamerHashCom,460763514357809162,https://gamerhash.com/en/l/l9Nb9,,,,,true,false
GameSwift,goko2h,https://gameswift.io/,NOT_DEPIN,ETHEREUM,GSWIFT,gameswift,"GameSwift is a one-stop shop ecosystem(platform, launcher, and infrastructure) for Web3 gaming based on a modular chain and zkEVM technology.",,ZZ,,,,,,,,,true,false
Gamic,24mp5f,https://gamic.app/,NOT_DEPIN,,GNG,,"Gamic is a decentralized messaging platform and a comprehensive ecosystem where creators, gamers, and community members can interact, transact, and grow together.",Social,ZZ,,https://twitter.com/mygamicHQ,,,,,,,true,false
Gane,d1s1k3,https://gane.com/,WIRELESS,,,,"Gane is a freemium mobile provider for developing countries where users earn free data, voice, and text by using their mobile wallet and interacting with content.",,EV3 Sal,,,,,,,,,true,false
Gargoyle Systems,xgfi3q,https://gargoylesystems.io/,ROBOTICS,,,,"Gargoyle Systems develops advanced Drone Vulnerability Risk Assessment (DVRA) systems to protect airspace for households and commercial buildings, offering robust defense solutions and generating valuable drone activity data.",Drones,Connor,,https://x.com/GargoyleSystems,,,,,,,true,false
Gateway Network,wwio88,https://mygateway.xyz/,NOT_DEPIN,,,,Gateway is a decentralized identity access management protocol that allows users to control and share their data across the web.,Data,ZZ,,https://twitter.com/gateway_xyz,898513755456036925,,,https://github.com/Gateway-DAO,https://www.linkedin.com/company/mygateway/,,true,false
GatlingX,tz7vkn,,NOT_DEPIN,,,,"GatlingX is an applied infrastructure and AI lab that develops GPU-EVM, aiming to be the world's most performant parallel-EVM with a 100x improvement.",,EV3 Sal,,https://x.com/gatling_x,,,,,,,true,false
Gator Labs,n8em0x,https://chomp.games/,NOT_DEPIN,,,,"Gator leverages crypto-native mechanisms to build fun and engaging products, their first product is Chomp, a quiz game that leverages “Wisdom of the Crowd” to get the most likely answers to a question.",Gaming,EV3 Sal,,https://x.com/gator_fyi,,,,,,,true,false
GCaller,w5nbgl,https://gcaller.in/,BLOCKCHAIN_INFRA,,,,GCaller is a decentralized caller ID and spam protection platform that rewards users for identifying spam calls.,,ZZ,,https://twitter.com/gcaller_in,,,,,,,true,false
Gear,c8xut6,https://gear.foundation/,NOT_DEPIN,,,,"Gear: smart contracts, user-friendly, secure networks, infinite sharding.",,,,https://twitter.com/Gear_Foundation,891063355526217738,https://t.me/gear_tech,https://medium.com/@gear_techs,https://github.com/gear-tech,https://vn.linkedin.com/company/gearinc.,,true,false
Gecko Fuzz,u9ir7b,,PENDING,,,,,,ZZ,,,,,,,,,true,false
Geeq,5gczqo,https://geeq.io/,NOT_DEPIN,,,,Geeq is a multi-blockchain platform secured by Proof of Honesty protocol.,,,,https://twitter.com/GeeqOfficial,,https://t.me/GeeqOfficial,https://medium.com/@geeqofficial.crypto,,http://www.linkedin.com/company/geeq,,true,false
Gelato,lvwe8x,https://www.gelato.network/,NOT_DEPIN,ETHEREUM,GEL,gelato,"Gelato is a Rollup-as-a-Service platform that enables the deployment of enterprise-grade modular L2 and L3 chains integrated with Web3 services, automating smart contracts and gasless transactions while ensuring Ethereum-grade security.",,ZZ,,https://twitter.com/gelatonetwork,,https://t.me/gelatonetwork,https://medium.com/@gelatonetwork,https://github.com/gelatodigital,https://no.linkedin.com/company/gelato,,true,false
Geltonas,rw61a3,https://www.geltonas.tech/,SENSORS,ETHEREUM,GEL,,"Geltonas provides an automated eco-label platform powered by satellite data and blockchain to deliver real-time, transparent sustainability assessments and carbon footprint tracking for RWAs in agriculture.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd754,,https://x.com/Geltonastech,,,,,,,TRUE,FALSE
Genaro,5gl2ia,https://genaro.network/en,COMPUTE,ETHEREUM,GNX,genaro-network,"Genaro Network is the first Turing Complete Public Chain with a Decentralized Storage Network, providing blockchain developers with a one-stop solution to deploy smart contracts and store data simultaneously. ",,ZZ,,,,,,,,,false,false
Generaitiv,t6ee2u,https://generaitiv.xyz/,AI,ETHEREUM,GAI,generaitiv,Generaitiv: community-driven AI appstore empowering contributors with scalable approaches.,,,,https://twitter.com/generaitiv,1070064707865677864,https://t.me/generaitiv,https://medium.com/@generaitivai,,,,true,false
GenLayer,yuwdh7,https://genlayer.com/,AI,,,,GenLayer is a decentralized platform that extends the capabilities of traditional smart contracts with AI by making them intelligent and connected to the internet.,,EV3 Sal,,https://twitter.com/GenLayer,,,,,,,true,false
GenoBank,c9k4xd,https://genobank.io/,SCIENCE,,,,GenoBank.io is a Web3 genomics data management platform that enables users to store and manage their DNA data securely and anonymously.,Health,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/genobank_io,,,,,,,TRUE,FALSE
GenomeFi,x5s3a0,https://genomefi.io/,PENDING,,,,,,ZZ,,https://twitter.com/GenomeFi,,,,,,,true,false
Genomes.io,lfu9ni,https://genomes.io/,SCIENCE,ETHEREUM,GENE,genomesdao,"GenomesDAO is a platform for safe, private, and auditable monetization of genomic data using DeFi and DeSci.",,ZZ,,https://twitter.com/genomesdao,844928657407606786,,,https://github.com/genomesio,https://www.linkedin.com/company/genomes-io/,,true,false
Genopets,axuyme,https://www.genopets.me/,SENSORS,SOLANA,GENE,genopets,"Genopets is a Free-to-Play, Move-to-Earn NFT game on Solana that makes it fun and profitable to live an active lifestyle.",Health,ZZ,,https://twitter.com/genopets,,,,,,,true,false
Gensyn,2hl71l,https://www.gensyn.ai/,COMPUTE,,,,"Gensyn is a decentralized machine learning compute network that allows developers to train deep learning models over a network of connected devices, from data centers with excess capacity to personal laptops with latent GPUs.",,ZZ,,https://twitter.com/gensynai,,,,,,,true,false
Geo Web,l66cs4,https://www.geoweb.network/,BLOCKCHAIN_INFRA,,,,"The Geo Web is an open geospatial information network with a set of open protocols and a system of property rights for anchoring digital content to physical land, creating augmented, shared reality.",Positioning,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://twitter.com/thegeoweb,,,,,,,true,false
Geodnet,scli9r,https://geodnet.com/,SENSORS,POLYGON,GEOD,geodnet,Geodnet is a decentralized network of GNSS reference stations.,Positioning,,,https://twitter.com/geodnetinfo,912073116413476875,https://t.me/geodnet,https://medium.com/geodnet/geodnet-revolutionizes-the-global-positioning-industry-with-real-world-web3-reference-network-21183b0ad7eb,https://github.com/geodnet/whitepaper,https://www.linkedin.com/company/geodnet/,,true,false
Gepek,tc3b40,https://thegepek.com/,MOBILITY,,,,"Gepek is a blockchain-based carpooling platform for packages that allows drivers to earn money by delivering packages along their routes, offering fast, flexible, and eco-friendly 24/7 delivery services.",Logistics,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/gepekthe,,,,,,,TRUE,FALSE
Getti,cy5quw,,PENDING,,,,,,EV3 Sal,,,,,,,,,true,false
Gevulot,7bg2pd,https://gevulot.com/,NOT_DEPIN,,,,Gevulot is an Internet-scale compute network for zero-knowledge proofs.,ZK,ZZ,,https://twitter.com/gevulot_network,,,,,,,true,false
Ghostdrive,355uem,https://www.ghostdrive.com/,COMPUTE,,,,"Ghostdrive DePIN is a storage solution that integrates Layer 2 hot storage with the Filecoin network's cold storage layer, offering a groundbreaking solution for efficient and economical decentralized data storage and retrieval.",Storage,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://twitter.com/GhostDrive_Web3,,,,,,,true,false
GIANT,jl19aq,https://giantprotocol.org/,WIRELESS,POLKADOT,,,GIANT is a blockchain protocol aiming to democratize access to internet and financial services by tokenizing bandwidth.,,,,https://twitter.com/giantprotocol,935300367632179210,https://t.me/giantprotocol,,https://github.com/topics/giant,http://www.linkedin.com/company/giantconnectapp,,true,false
gintonicAI,kboud1,https://www.gintonic.ai/,AI,,GIN,,"Gintonic is a decentralized AI ecosystem designed to transform AI development using a modular architecture built on a Level 0 blockchain, allowing the creation of specialized subchains dedicated to distinct AI tasks, promoting collaboration and innovation.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/gintonicai,,,,,,,true,false
Gitopia,ebks77,https://gitopia.com/,NOT_DEPIN,,LORE,gitopia,"Gitopia is the next-generation Code Collaboration Platform fuelled by a decentralized network with an interactive token economy to optimize the open-source software development process through collaboration, transparency, and incentivization.",,ZZ,,https://twitter.com/gitopiaDAO,746365205277179907,https://t.me/Gitopia,https://blog.gitopia.com/,,https://www.linkedin.com/company/gitopia/,,true,false
GitPOAP,2fl69i,https://www.gitpoap.io/,BLOCKCHAIN_INFRA,,,,GitPOAP - recognizing contributions on GitHub with POAP issuance,,,,https://twitter.com/gitpoap,918207795113885737,,https://medium.com/gitpoap,https://github.com/gitpoap,http://www.linkedin.com/company/gitpoap,,true,false
Giza,nlkbyo,https://www.gizatech.xyz/,AI,,,,"Giza is an actionable AI for dApps that allows developers to build reliable, scalable, and easy-to-integrate AI solutions for web3.",,ZZ,,https://twitter.com/gizatechxyz,1070370565761802372,,,https://github.com/maxgillett/giza,https://www.linkedin.com/company/giza-systems,,true,false
Glacier Robots,basiuw,https://endwaste.io/,NOT_DEPIN,,,,"Glacier is developing next-generation, AI-powered sorting robots for recycling facilities.",,EV3 Sal,,https://twitter.com/glaciertechinc,,,,,,,true,false
Glacier,4fstgv,https://www.glacier.io/,AI,,,,"Glacier Network is building a programmable, modular and scalable blockchain infrastructure for agents, models and datasets, supercharging AI at scale.",L1/L2,,,https://twitter.com/GlacierNPS,1049347993817579570,https://t.me/s/glacier_news,,,https://www.linkedin.com/company/endwaste-,,true,false
GLIF,mw0azh,https://www.glif.io/en,NOT_DEPIN,,,,Glif is a developer of Filecoin's Liquid Staker which gives FIL holders a way to earn yield on their assets.,,,,https://twitter.com/glifio,1065279513489051658,,,,,,true,false
Glitter Protocol,hvnixv,https://glitterprotocol.io/,NOT_DEPIN,,,,Glitter Protocol is a decentralized data indexing protocol that provides a way for users to earn revenue from their data.,,ZZ,,https://twitter.com/GlitterProtocol,931397153123876915,,,,https://www.linkedin.com/company/glitterprotocol/about/,,true,false
GlobalBoost,8x6u4s,https://globalboo.st/,COMPUTE,NATIVE,BSTY,globalboost,"GlobalBoost is a decentralized media network that uses blockchain for a secure, transparent, and censorship-resistant social media sharing platform that empowers creators with control to revolutionize online content sharing.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/GlobalBoost,,,,,,,true,false
Glow,m5pwg0,https://www.glowlabs.org/,ENERGY,ETHEREUM,GLOW,,"GlowGreen leads the forefront of climate sustainability with novel game theory and incentive design to champion a sustainble, technology-empowered future.",,,2021,https://twitter.com/glowFND,1126887739795709982,,https://glowlabs.org/blog,https://github.com/glowlabs-org,https://www.linkedin.com/company/glow-intl/,,true,false
Glowstick,pztili,https://glowstick3d.com/,NOT_DEPIN,,,,Glowstick is a user-friendly tool enabling easy 3D environment creation and storytelling.,Gaming,,,,917476252443623435,,,,,,true,false
GlueX,vo7y4s,,PENDING,,,,,,ZZ,,https://x.com/GluexProtocol,,,,,,,true,false
GM Network,6xjes0,https://gmnetwork.ai/,BLOCKCHAIN_INFRA,ETHEREUM,GM,,"GM Network is an AVS Layer2 for AI-Powered Consumer DePIN, generating real-world data through smart devices and electric vehicles, and offering new interaction methods and entry points for AI.",,ZZ,,https://twitter.com/GMNetwork_AI,,,,,,,true,false
gm.ai,txqs5b,https://gm.ai/,PENDING,,,,,,W. L.,,https://x.com/gm_dot_ai,,,,,,,true,false
GNUS.AI,ms5m3y,https://www.gnus.ai/,COMPUTE,,GNUS,,"GNUS.AI is a cutting-edge decentralized computing platform for businesses, games, and AI companies, with a built-in blockchain payment system.",,ZZ,,https://twitter.com/gnusai,,,,,,,true,false
GNY,wjtb2f,http://www.gny.io/,AI,ETHEREUM,GNY,gny,"GNY is a ML predictive platform for blockchain, identifying patterns & predicting user behavior for targeted messaging.",,,,https://twitter.com/gny_io,,,https://medium.com/@james_62282,https://github.com/GNYIO,http://www.linkedin.com/company/gny-io,,true,false
Go SmartChain,pfgspe,https://www.gosmartchain.ai/,RWA,NATIVE,GoXP,,Go! SmartChain AI is a decentralized Layer 1 blockchain that leverages AI and zkEVM technology to enable on-demand tokenization and management of real-world assets.,L1/L2,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/GoRWAChain,,,,,,,TRUE,FALSE
Go!,4h5jhz,https://t.co/QiGg27OEIj,BLOCKCHAIN_INFRA,,,,Go! is a blockchain powering universal basic services.,Health,,,https://twitter.com/GoHealthHero,875930739194093618,https://t.me/gobyhealthhero,,,,,true,false
GoAction,1h2a0w,https://www.goaction.tech/,SENSORS,,GAT,,"GoAction is a deflationary, move-to-earn platform where users earn tokens by cycling or walking, while advertisers can boost earnings by purchasing digital advertising space on bicycles or backpacks, all powered by a liquid NFT ecosystem.",Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/goactionapp,,,,,,,true,false
GoCharge,upg9j5,https://gocharge.tech/,ENERGY,MULTIVERSX,CHARGED,gocharge-tech,GoCharge is a Decentralised Network of Electric Vehicles Chargers and Power Bank Stations.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/gochargehq,,,,,,,true,false
GoKey,pl3j0m,https://gokey.finance/,RWA,CARDANO,GOKEY,,"GoKey is a blockchain-powered real estate investment platform that enables communities to co-own, co-manage, and invest in tokenized properties.",Real Estate,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/GoKeyFinance,,,,,,,TRUE,FALSE
GoldenCrypto,qg6lwg,https://goldencrypto.io/,PENDING,,,,,,,,https://x.com/GoldenDoge11,,,,,,,true,false
Golem,j4istz,https://www.golem.network,COMPUTE,ETHEREUM,GLM,golem,Golem is a decentralized computing marketplace. It consists of a network of nodes that implement the Golem network protocol.,,,,,684703559954333727,,,,,,true,false
GolfN,ojcxn8,https://www.golfn.com/,PENDING,,,,,,ZZ,,https://twitter.com/GolfNApp,,,,,,,true,false
GoMutual,wwmjky,https://www.gooddriver.ai/,MOBILITY,,,,GoMutual is a blockchain-based decentralized mutuality protocol offering a non-insurance alternative to traditional auto insurance.,,ZZ,,https://twitter.com/go_mutual,,https://t.me/gomutual,,,https://www.linkedin.com/company/gomutual2022/,,true,false
Gonesis,em32n6,https://gonesis.ai/,AI,,GAI,,"Gonesis is building an AI agent store and infrastructure, making AI agents accessible, easy to use, and transparent for everyone worldwide, in a decentralized environment.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/gonesisai,,,,,,,true,false
GonnaMakeIt,yts967,https://gonnamakeit.io/,NOT_DEPIN,,,,GonnaMakeIt is a social network that allows competitors and organizers to earn money through event betting.,Social,,,https://twitter.com/GonnaMakeItNFTs,892004089737646151,https://t.me/GonnaMakeitNFTs,,https://github.com/energicryptocurrency,https://www.linkedin.com/company/gonnamakeitnfts/,,true,false
GooseAI,in3vdx,https://goose.ai/,NOT_DEPIN,,,,"GooseAI is a fully managed NLP-as-a-Service, delivered via API.",,ZZ,,https://twitter.com/gooseai_NLP,,,,,,,true,false
GooseFX,1qhz26,https://www.goosefx.io/,NOT_DEPIN,SOLANA,GOFX,goosefx,Solana DeFi,,Connor,,,,,,,,,true,false
GoPlus,02wkqh,https://gopluslabs.io/,NOT_DEPIN,,,,"GoPlus Security is the security data infrastructure layer of Web3. It provides open, permissionless, user-driven security services.",,EV3 Sal,,https://twitter.com/GoplusSecurity,,,,,,,true,false
GoQii,tkkrfm,https://goqii.com/in-en,HUMAN_CAPITAL,,,,GOQii is dedicated to enabling a permanent shift to a healthier lifestyle with the combination of advanced wearable technology.,,,,https://twitter.com/GOQii,,,,,,,true,false
Gora,x4c5qz,https://www.gora.io/,BLOCKCHAIN_INFRA,,,,Gora is a decentralized Oracle network built on Algorand.,Oracle,ZZ,,https://twitter.com/goranetwork,913461245108183090,https://t.me/GoraNetwork,,,http://www.linkedin.com/company/goranetwork,,true,false
Gosleep,bbwgbo,https://gosleep.pro/,SENSORS,ARBITRUM,ZZZ,zzz,"Gosleep is a Web3 sleep tracking and healthy living reward app designed to encourage healthier sleep habits through a combination of HealthFi, GameFi, and SocialFi elements.",Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/gosleep01,,,,,,,true,false
Gostir,o8e9hr,https://www.gostir.ai/,PENDING,,,,,,EV3 Sal,,https://x.com/gostir_ai,,,,,,,true,false
Gps Network AI,g69cmz,https://gpsnetwork.ai/,SENSORS,,GPS,,"Gps Network is a decentralized platform that leverages AI to convert user-uploaded videos into valuable geospatial data, rewarding contributors with token rewards for enhancing smart city development.",Positioning,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/GpsNetworkAI,,,,,,,true,false
GPT Protocol,q2o3u9,https://gptprotocol.org/,AI,ETHEREUM,GPT,gpt-protocol,"GPT Protocol is a decentralized AI network that combines AI with blockchain, allowing users to contribute, monetize, and maintain AI models and data securely through a community-driven ecosystem.",Data,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/gpt_protocol,,,,,,,TRUE,FALSE
Gpu.audio,qr6aiw,https://www.gpu.audio/,NOT_DEPIN,,,,GPU Audio is a platform for audio processing on GPUs.,GPUs,,,https://twitter.com/gpuaudio,930188443282198589,,https://www.linkedin.com/company/gpuaudio/,,,,true,false
GPU.Net,a3fzi6,https://www.gpu.net/,COMPUTE,,,,"United GPU infrastructure that can be utilized for highly optimized 3D rendering, animation, VFX, generative AI, foundation models, LLM training and cryptocurrency mining.",GPUs,W. L.,,https://twitter.com/gpunet,1083646475608784907,https://t.me/brahm_gan,https://medium.com/@GPUnet,https://medium.com/@GPUnet,,,true,false
GPUBot,23jwhw,https://www.gpuboteth.com/,COMPUTE,ETHEREUM,GPUBOT,gpubot,"GPUBot offers decentralized GPU, CPU, and blockchain node rental services through an AI-enabled, blockchain-powered platform accessible via a user-friendly Telegram bot.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/gpuboteth,,,,,,,true,false
GPULabs,1ksn35,https://www.gpulabs.io/,COMPUTE,ETHEREUM,GPUL,,"GPULABS is an advanced platform offering on-demand access to powerful GPUs for AI, machine learning, 3D rendering, and cryptocurrency mining, providing scalable, cost-efficient, and secure high-performance computing solutions.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/gpu_labs,,,,,,,TRUE,FALSE
GPUtopia,lj3v06,https://gputopia.ai/,COMPUTE,,,,GPUtopia is a marketplace for decentralized GPU compute and related AI services.,,ZZ,,https://twitter.com/GPUtopia,1157469556768514068,,https://gputopia.ai/blog,,,,false,false
Gradient,wozun5,https://gradient.network/,COMPUTE,,,,"Gradient Network is an open layer for decentralized edge compute on Solana, aiming to make computing inclusive, accessible, and affordable by enabling a global, meshed network for AI inference, content delivery, and serverless functions.",,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/Gradient_HQ,,,,,,,TRUE,FALSE
Grafilab,zg7frd,https://grafilab.io/,COMPUTE,,GRAFI,,"Grafilab is a CeDePIN aggregator that integrates centralized data centers and decentralized GPU networks, offering a dynamic marketplace for users to access high-performance computing resources for AI, rendering, mining, and more.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/Grafilab_io,,,,,,,true,false
Grand Base,ljrs4j,https://grandbase.io/,NOT_DEPIN,ETHEREUM,GB,grand-base,"Grand Base Protocol is a decentralized finance (DeFi) platform that allows users to create, trade, and stake synthetic assets, known as gAssets. ",,,,https://twitter.com/grandbase_fi,1160639448573284513,,https://medium.com/@grand.base,,,,true,false
Grape,a842rq,https://grap3.com/,BLOCKCHAIN_INFRA,ETHEREUM,GRP,grape-2,"Grape is a decentralized layer one ecosystem with key features that include VINE, a high-speed distributed ledger; ANNE, an AI engine simplifying smart contract and DApp development; and a Decentralized Cloud Storage.",,ZZ,,https://twitter.com/Grap3Inc,1077654543220887553,,,,,,true,false
Graphia,ygkhh2,https://graphia.network/,RWA,NATIVE,GPC,,"Graphia Network is a decentralized platform and blockchain network that allows users to create, buy, and sell Real-World Assets, businesses, and digital experiences and invest in fractions of those assets.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://twitter.com/GraphiaNetwork,,,,,,,true,false
Graphlinq,ofzalk,https://graphlinq.io/,NOT_DEPIN,ETHEREUM,GLQ,graphlinq-protocol,GraphLinq is a no-code blockchain ecosystembuilt for on-chain automationand dApps.,,ZZ,,https://twitter.com/graphlinq_proto,,https://t.me/graphlinq,https://graphlinq.medium.com/,https://github.com/GraphLinq,https://www.linkedin.com/company/graphlinq-protocol/about/,,true,false
Grass,9qbidj,https://www.getgrass.io/,AI,,,,"Grass by Wynd Network is a transparent node marketplace enabling users to earn passive income by renting out their IP address, used for collecting datasets to train AI models.",,W. L.,,https://twitter.com/getgrass_io,,,https://medium.com/@wyndnetwork/,,https://www.linkedin.com/company/wynd-technologies-inc./,,true,false
Graviton,udwaws,https://graviton.xyz/,NOT_DEPIN,COSMOS,GRAV,graviton,"Graviton provides Web3 tools and infrastructure that allows artists to reach fans, advertise and monetize their work.",,ZZ,,https://twitter.com/Graviton_XYZ,1205739617693859900,,https://medium.com/graviton-xyz,https://github.com/GravitonINC,https://www.linkedin.com/company/graviton-xyz/,,false,false
Gravvity,rxjew2,https://www.gravvity.ai/,NOT_DEPIN,,,,"Gravvity is building a gamified shopping/marketing and product testing platform, using the swipe model from dating apps while providing retailers and brands with a new data set on consumer tastes and a marketing channel that drives sales.",,ZZ,,,,,,,,,true,false
Green Fungible Energy,q3nyjk,https://www.gfe.foundation/,ENERGY,,GFE,,Green Fungible Energy (GFE) is an innovative platform tokenizing green energy to offer a sustainable investment opportunity that aligns environmental benefits with economic incentives.,,EV3 Sal,,,,,,,,,true,false
GreenCart,66ypef,https://www.greencart.vet/en/landing,SENSORS,,,,GreenCart is a dApp that rewards users for making sustainable food purchases at supermarkets and local shops by scanning and turning their grocery receipts into rewards.,,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/greencart_vet,,,,,,,TRUE,FALSE
GreenPower,6t7pf0,https://www.greenpowern.com/,ENERGY,,,,GreenPower is a decentralized network of global sustainability activists.,,W. L.,,https://twitter.com/Greenpowertrus,978985389857570826,,https://medium.com/@marketing_84129,https://github.com/laurentphilippe/greenpower,https://au.linkedin.com/company/greenpower-australia,,false,false
Greensparc,j8knk9,https://www.greensparc.com/,COMPUTE,,,,Greensparc: Sustainable computing and ESG analytics.,Environmental,,,https://twitter.com/greensparc,,,https://www.greensparc.com/,,https://www.linkedin.com/company/greensparc/,,true,false
Gridcoin,u7p8wi,https://gridcoin.us/,COMPUTE,,GRC,gridcoin-research,"Gridcoin is an open source cryptocurrency that rewards volunteer computing for science through the BOINC platform and Folding@home. BOINC is an open source platform for volunteer computing that lets individuals use their computers & phones to help science research. ",,,,https://twitter.com/GridcoinNetwork,211637812968161280,https://t.me/gridcoin,,https://github.com/gridcoin,https://www.linkedin.com/company/gridcoin/,,true,false
Gridnet,my4p81,https://gridnet.org/,COMPUTE,,,,"GRIDNET OS is developing the first decentralized Operating System. The decentralized operating system aims to allow for user experience resembling the one known from DOS, LINUX, Windows and Mac OS X centralized operating systems.",,,,https://twitter.com/gridnetproject,1159561046730735668,,,https://github.com/GRIDNETOS/GRIDNETOS,,,true,false
GriffinAI,0i5krr,https://www.griffinai.io/,AI,,,,"GriffinAI is a decentralized network that enables the deployment of autonomous AI agents into any Web3 Dapp, allowing them to securely manage transactions and tasks in a permissionless environment.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/griffin_ai,,,,,,,TRUE,FALSE
Griffy,4loe4v,https://griffy.app/,NOT_DEPIN,,,,Griffy is a poll-based prediction markets protocol.,Prediction Market,,,,,,,,,,true,false
Grove,ibr4u0,https://www.grove.city/,BLOCKCHAIN_INFRA,,,,"Backed by thousands of independent, globally distributed nodes, Grove enables teams to deliver a multi-chain user experience at scale.",,EV3 Sal,,,824324475256438814,,,,,,true,false
Growfitter,8ve4hw,https://www.growfitter.com/,HUMAN_CAPITAL,,,,Growfitter is a gamified digital health reward platform that adds financial benefits to your physical activity.,Health,,,https://twitter.com/growfitter,,,http://www.linkedin.com/company/growfitter.com,,,,true,false
Gstake,n6z698,https://www.gstake.fi/,BLOCKCHAIN_INFRA,,,,Gstake is a liquid staking solution for DePIN.,,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/gstakefinance?t=vROorl7zUTqIzywZDfJaCw&s=09,,,,,,,true,false
GT Protocol,fsdavv,https://www.gt-protocol.io/,AI,BINANCE,GTAI,gt-protocol,"GT-Protocol is a Web3 AI execution technology that provides users with access to CeFi, DeFi, and NFT crypto markets through an all-in-one conversational AI interface.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/gt_protocol,,,,,,,true,false
GTURBO,9stp66,,COMPUTE,,,,GTURBO is a cloud computing infrastructure platform,,ZZ,,https://x.com/gturbo_depin,,,,,,,true,false
Guardian AI,dcth80,,AI,,,,Guardian AI is a network that safeguards DAOs and multisigs with decentralized AI agents.,,,,,,,,,,,true,false
Gun.Eco,fk3mfi,https://gun.eco/,BLOCKCHAIN_INFRA,,,,Gun.Eco is a decentralized distributed graph database engine for developers.,RPC/Indexing,ZZ,,https://twitter.com/databasegun,,,,https://github.com/topics/gunjs,https://www.linkedin.com/company/gun-io,,true,false
GURU,umznmb,https://gurunetwork.ai/,AI,,GURU,,Guru Network is building a Multi-Chain AI Compute Layer that allows dApps and retail users to natively embed orchestrated AI Agents into their routines and earn Network participant rewards.,Agents,EV3 Sal,,https://twitter.com/xgurunetwork,,,,,,,true,false
Hacken,xvra0g,https://hacken.ai/,AI,ETHEREUM,HAI,hacken,"HackenAI is a blockchain cybersecurity application that protects users’ digital assets as well as incentivizes them to learn cybersecurity best practices. ",,ZZ,,,,,,,,,true,false
Hades,gwn489,https://hadesnetwork.tech/,COMPUTE,ETHEREUM,HADES,hades-network,Hades Network provides a decentralized cloud computing network with customizable GPU nodes for AI-powered CPU and GPU rendering.,GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/hadesnetworkerc,,,,,,,true,false
HairDAO,asoezl,https://www.hairdao.xyz/,SCIENCE,ETHEREUM,HAIR,hairdao,HairDAO is an open-source R&D network where patients and researchers collaborate to develop revolutionary new treatments for hair loss.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/hairdao_,,,,,,,true,false
Hajime AI,8qt9zg,https://linktr.ee/hajimeai,COMPUTE,SOLANA,HJM,,"Hajime.AI is a decentralized P2P EdgeAI network, connecting idle edge devices efficiently to democratize access to AI resources, serving as a global incubator for small and medium AI startups.",,ZZ,,https://twitter.com/hajime__ai,,,,,,,true,false
Hal,686w74,https://chatwithhal.vercel.app/,COMPUTE,,,,Hal is a chatbot built on BitTensor.,,,,https://x.com/chatwithhal,1110297556606533744,https://chatwithhal.vercel.app/platforms/telegram,,,https://linkedin.com/company/vercel,,true,false
Halliday,vq2wa3,https://www.halliday.xyz/,BLOCKCHAIN_INFRA,,,,"Halliday provides a programmable ERC-4337 Smart Accounts that are fully non-custodial, built to scale, and most importantly, designed specifically for games.",,,,https://twitter.com/HallidayHQ,996214840882372639,,https://medium.com/@HallidayHQ,,https://www.linkedin.com/company/halliday/,,true,false
Handshake,m9gkfk,https://handshake.org/,NOT_DEPIN,,HNS,handshake,"Handshake is a decentralized, permissionless naming protocol where every peer is validating and in charge of managing the root DNS naming zone.",,ZZ,,https://twitter.com/hns,822591034202521641,https://t.me/handshake_hns,,https://github.com/handshake-org/hsd,https://www.linkedin.com/company/hns-handshake/,,true,false
Hapi,um75jm,https://hapi.one/,NOT_DEPIN,ETHEREUM,HAPI,hapi-one,"HAPI is an essential second layer of web3 security, providing unrestricted, business, and user-centric scope of cybersecurity solutions.",,,,https://twitter.com/i_am_hapi_one,854680817661640754,https://t.me/hapiHF,https://medium.com/i-am-hapi,https://github.com/HAPIprotocol,https://www.linkedin.com/company/hapi-protocol/,,true,false
HappyDAO,4xq2hv,,SCIENCE,,,,"HappyDAO connects a global community to develop anxiety and depression therapies, improving patient outcomes worldwide.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/happy_dao_,,,,,,,true,false
HARA AgriTech,fz0shx,https://www.hara.ag/,SENSORS,NATIVE,HARA,,"HARA is a blockchain-based data exchange platform empowering the agricultural sector with valuable, traceable data through an incentivized data-sharing system for informed decision-making and improved productivity.",Data,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/HARA_AgriTech,,,,,,,TRUE,FALSE
Harvest,gh0bso,https://goharvest.app/,NOT_DEPIN,,,,"Harvest is the world's first Tokenized Natural Resource Marketplace that will feature land, cattle, and other natural investments.",,ZZ,,https://twitter.com/HarvestMkpl,,,,,,,true,false
Hash,b89wnw,https://hashnetwork.io/,PENDING,,,,,,EV3 Sal,,https://x.com/hashnetwork_eth,,,,,,,TRUE,FALSE
HashMind,8is5b3,https://hashmind.tech/,COMPUTE,ETHEREUM,HASH,,HashMind aims to revolutionize DePIN and bridge off-chain value to on-chain users. Their decentralized platform on the Ethereum mainnet primarily focuses on two core features: Cloud Computing/VM Service and Protocol-Owned Nodes/Miners(PON/POM).,,ZZ,,,,,,,,,true,false
HashMix,5v5xcz,https://www.hashmix.org/en/#intro,NOT_DEPIN,,,,"HashMix is a next-generation hashrate tokenization and marketplace protocol. It allows anyone to buy, sell, lend, and swap mining power for various PoW blockchains in a decentralized way.",,ZZ,,https://twitter.com/HashMixOfficial,1036550293455917096,https://t.me/HashMixChannel,https://hashmix.medium.com/,https://github.com/HashMixProject,,,true,false
Haven,29gzf9,,COMPUTE,,XHV,haven,Haven partners with Anchorage to provide secure staking services for Filecoin tokens.,,,,,,,,,,,true,false
HEALE,90b0aw,https://healelabs.com/,SENSORS,NATIVE,HEALE,,"HEALE is an open, decentralized logistics infrastructure that streams real-world data from smart devices to compute ""proofs of real-world activity,"" triggering smart contracts to tokenize data, automate shipments, distribute payments, and reward behaviors.",Logistics,EV3 Sal,,https://twitter.com/HEALENetwork,947659106330767360,,,,,,true,false
Healix,b0ykr5,https://healixprotocol.com/,HUMAN_CAPITAL,BINANCE,HLX,,"Healix is an AI-powered, blockchain-based health and wellness ecosystem that incentivizes users to improve their well-being through personalized healthcare services, rewards, and seamless access to global wellness providers.",Health,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/HealixProtocol,,,,,,,TRUE,FALSE
HealthBase,7hgqjr,https://www.healthbase.ai/,SENSORS,,HBD,,"HealthBase is a comprehensive human health ecosystem for users to improve their health and lifestyle habits through a concept of ""Health to Rich, gamified sleep challenges, sleep character NFTs, AI health assistants, and smart DePIN Health Ring.",Health,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/healthbaseai,,,,,,,true,false
Healthblocks,qu45sj,https://www.healthblocks.ai/,SENSORS,IOTEX,,,HealthBlocks is a decentralized health-oriented community that rewards users for a healthy lifestyle.,Health,,,https://twitter.com/HEALTHBLOCINC,,,,,https://www.linkedin.com/company/healthblocks-inc,,true,false
HealthReady,6kw658,https://neuroblastoma.gethealthready.com/,SCIENCE,,,,HealthReady is an open research platform enabling users to anonymously share healthcare data with researchers to accelerate pediatric cancer treatments while rewarding participants for their contributions.,,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/gethealthready,,,,,,,TRUE,FALSE
HealthSci,wdoh7d,https://healthsci.ai/,SCIENCE,ETHEREUM,HSAI,,"HealthSci is an AI-driven healthcare platform using NVIDIA Healthcare Generative AI on DeCloud, offering applications like medical imaging diagnosis, personalized treatment recommendations, drug discovery, and virtual health assistants.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/healthsci_ai,,,,,,,true,false
Healthtracka,mq0qgk,https://www.healthtracka.com/,NOT_DEPIN,,,,Healthtracka is a health tech startup that aims to decentralize lab testing in Africa with at-home testing and digital results.,Health,,,https://twitter.com/healthtracka,,,https://blog.healthtracka.com/,,https://www.linkedin.com/company/healthtracka/,,true,false
heata,mcke93,https://www.heata.co/,ENERGY,,,,Heata is a green compute network that uses wasted heat from computers to warm water for homes.,,,,https://twitter.com/heatacompute,,,https://medium.com/@heata_cloud_compute,,https://www.linkedin.com/company/heatacompute/,,true,false
Hedera,zkb0bw,https://hedera.com/,NOT_DEPIN,NATIVE,HBAR,hedera,"Hedera is a decentralized, open-source, proof-of-stake public ledger that utilizes the leaderless, asynchronous Byzantine Fault Tolerance (aBFT) hashgraph consensus algorithm.",,,,https://twitter.com/hedera,373889138199494658,https://t.me/hederahashgraph,https://hedera.com/blog,https://github.com/hashgraph,https://www.linkedin.com/company/hashgraph/,,true,false
Hedgehog,r7jfzw,https://githedgehog.com/,NOT_DEPIN,,,,Hedgehog enables Cloud Native apps on edge compute and distributed cloud infrastructure.,,ZZ,,https://twitter.com/githedgehog,,,,https://github.com/githedgehog,https://www.linkedin.com/company/githedgehog/,,true,false
HeFi,yu0yyk,https://www.hefi.life/,HUMAN_CAPITAL,BINANCE,HEFI,hefi,"HeFi is a blockchain-powered digital platform that integrates healthcare services, wearables, and tokenized rewards, allowing the elderly to monitor their health, access personalized care, and earn rewards by sharing health data for healthy aging.",Health,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/hefiofficial,,,,,,,TRUE,FALSE
Helice,ms78la,https://helice-prosthesis.com/,SCIENCE,ETHEREUM,H,,Hélice is a blockchain-based financial engineering platform that aims to halve the price of high-tech prosthetics and artificial organs while accelerating innovation in the biotechnology sector.,,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/helice_h,,,,,,,TRUE,FALSE
Heliotics,9nzov6,https://www.heliotics.com/,WIRELESS,,,,Heliotics provides a complete portfolio of Internet of Things (IoT) solutions leveraging existing LoRaWAN and NB-IoT network coverage and smart sensors integrated into a fully customized platform.,,EV3 Sal,,,,,,,,,true,false
Heliport,1eq6lx,,NOT_DEPIN,,,,Heliport is a decentralized wallet and device which are able to make payments and transactions on Solana through the IoT infrastructure of the Helium Network.,Wallet,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/heliportwallet,,,,,,,true,false
Helium,5bm99m,https://www.helium.com/,WIRELESS,SOLANA,HNT,helium,"Helium is a decentralized network of networks with Mobile, IoT, & other subnetworks.",Mobile,,,http://twitter.com/helium,404106811252408320,https://telegram.me/s/HELIUM,https://heliuminc.medium.com/,https://github.com/helium,http://www.linkedin.com/company/heliumnetwork,,true,false
Helius,kj3v3r,https://www.helius.dev/,BLOCKCHAIN_INFRA,,,,Helius is the ultimate developer platform for building on Solana.,RPC/Indexing,,,https://twitter.com/heliuslabs,992616840251584633,--,https://www.linkedin.com/company/heliusapi/,https://www.helius.dev/blog,https://github.com/helius-labs,,true,false
Hellas,rdcq7x,https://hellas.ai/,COMPUTE,,,,Hellas is a decentralized compute marketplace offering customizable AI model deployment using unique compute graphs and a custom deep-learning framework.,,EV3 Sal,,,,,,,,,true,false
Hello,k4h7w9,https://hello.app/,COMPUTE,ETHEREUM,HELLO,hello-labs,"Hello is a user-controlled, open-source, encrypted, geo-redundant decentralized storage software/ infrastructure.",Storage,ZZ,,https://twitter.com/joinhelloapp,,,,https://github.com/hello-storage,https://www.linkedin.com/company/hellostorage/,,true,false
Hemera,uefnla,https://thehemera.com/main/home,BLOCKCHAIN_INFRA,,,,Hemera Protocol is a decentralized account-centric programmable indexing network that enables developers to harness web3 data with ease and unlock the full potential of the ever-growing network of data in web3.,,EV3 Sal,,https://twitter.com/HemeraProtocol,,,,,,,true,false
HENRY,cgv0cg,https://www.henry.social/,PENDING,,,,,,EV3 Sal,,https://x.com/henrysocialxyz,,,,,,,true,false
Hera,hrymjy,https://hera.finance/,AI,ETHEREUM,HERA,hera-finance,Hera Finance is a multichain dex aggregator using AI for the widest token range and best route discovery.,,,,https://twitter.com/heraaggregator,963060487203983410,https://t.me/heraaggregator,https://heraaggregator.medium.com/,https://github.com/heraaggregator,,,true,false
Hermez,wkap7y,https://hermez.io/,NOT_DEPIN,ETHEREUM,"HEZ ",hermez-network,"Polygon Hermez is an open-source ZK-Rollup optimized for secure, low-cost, and usable token transfers on the wings of Ethereum.",,ZZ,,,,,,,,,true,false
Herodotus,aytyhd,https://herodotus.dev/,NOT_DEPIN,,,,Herodotus is building storage-proof technology to enable synchronous cross-layer data access between Ethereum blockchains.,ZK,ZZ,,https://twitter.com/herodotusdev,1016649863666094160,,,,,,true,false
Herond,4609bx,https://herond.org/,PENDING,,,,,,ZZ,,https://x.com/HerondLabs,,,,,,,true,false
Hetu,lu6z6s,https://hetu.org/,BLOCKCHAIN_INFRA,,,,Hetu is the intersubjective attribution layer bringing real-time finality to DeAI systems.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/hetu_protocol,,,,,,,true,false
Heurist,kr9y4z,https://www.heurist.ai/,AI,,,,"Heurist is a Layer 2 network for AI model hosting and inference, bridging GPU miners with the open-source AI community.",,ZZ,,https://twitter.com/heurist_ai,,,,,,,true,false
Hexagon,vwstsz,https://www.hexagonwireless.com/,BLOCKCHAIN_INFRA,,,,Hexagon builds and operates decentralized wireless infrastructure. SHUT DOWN AS OF 2023.,,,,https://twitter.com/hexagonab,449876411973632010,https://t.me/s/hexsecret?before=27,,https://github.com/hexagonkt,https://www.linkedin.com/company/hexagon_2,,false,false
Heylana,bonzt3,,AI,,,,Heylana offers voice-controlled devices for seamless audio on Solana blockchain.,,,,,,,,,,,true,false
HigherOrder,mue6ls,https://higherorderco.com/,NOT_DEPIN,,,,A tech startup with the goal of building the inevitable massively parallel future of computers.,,EV3 Sal,,,912426566838013994,,,,,,true,false
Highstreet,9k3nyr,https://www.highstreet.market/,PENDING,,,,,,ZZ,,https://twitter.com/highstreetworld,,,,,,,true,false
HILO,250jwq,https://www.hilomarket.com/,NOT_DEPIN,ETHEREUM,HILO,hilo,"The HILO dApp is a platform where users can place predictions on virtually anything in the world, all in a fully gamified, fun, and social manner.",Prediction Market,ZZ,,,,,,,,,true,false
Hippocrat,36sdcf,https://hippocrat.io/,SCIENCE,ETHEREUM,HPO,hippocrat,Hippocrat is transforming healthcare by empowering individuals to take control of their health data through blockchain and zero-knowledge-proof technologies.,,ZZ,,,1154385678738657321,,,,,,true,false
HitMakr,6ky9sj,https://hitmakr.io/,INTELLECTUAL_PROPERTY,ETHEREUM,HMKR,hitmakr,"Hitmakr is a Web3 audio player and marketplace that enables creators to gate, monetize, and license their audio, while rewarding artists and allowing communities to engage through playlists, royalties, and advanced analytics.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd744,,https://x.com/hitmakrr,,,,,,,TRUE,FALSE
Hive,fnhg5q,https://www.hivenet.com/,COMPUTE,,,,hiveNet is a distributed data storage and computing platform that allows users to rent their computing resources and store and process their data in a co-located manner.,Storage,ZZ,,,1012643477399552041,,,,,,true,false
Hivello,560f30,https://www.hivello.com/,WIRELESS,,,,Hivello is a startup providing Helium hotspots to expand the helium digital network and increase connectivity.,,,,,,,,,http://www.linkedin.com/company/hivello,,true,false
Hivemapper,o1qnxa,https://hivemapper.com/explorer,SENSORS,SOLANA,HONEY,hivemapper,Hivemapper is a decentralized network for street-level imaging and mapping.,Positioning,,,https://twitter.com/Hivemapper,715439007764316191,,https://medium.com/@hivemapper,https://github.com/hivemapper,https://www.linkedin.com/company/hivemapper/,,true,false
Holium,qaeque,https://www.holium.com/,BLOCKCHAIN_INFRA,,,,"Holium is building Realm, a platform for new social experiences. They're working in message boards/newsfeeds that incentivize quality engagement. ",,,,,,,,,,,true,false
Holo,lp1mgw,https://www.holochain.org/,COMPUTE,ETHEREUM,HOT,holotoken,"Holo: P2P, open-source framework for decentralized applications with a focus on privacy and security.",,,,https://twitter.com/holochain,919686143581253632,,https://medium.com/holochain,https://github.com/holochain,http://www.linkedin.com/company/holochain,,true,false
Holonym,5h27sn,https://holonym.id/,BLOCKCHAIN_INFRA,,,,"Holonym is a privacy-preserving identity protocol that uses zero-knowledge proofs to enable secure, transparent, and compliant digital interactions without revealing users' sensitive information.",ZK,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/0xholonym,,,,,,,true,false
Homeqube,qmkwkt,https://www.homeqube.com/,NOT_DEPIN,,QUBE,,"HomeQube is a blockchain-powered gamified commerce for the home value chain industry that serves as a platform for the AEC industry, and homeowners to buy and sell products and services, as well as rent out properties.",,EV3 Sal,,https://twitter.com/QubeToken,,,,,,,true,false
HomeSmartChain,gtkedo,https://www.homesmartchain.com/,SENSORS,BINANCE,HSC,,"HomeSmartChain is a decentralized smart home network powered by blockchain and AI, enhancing data security and processing efficiency while incentivizing users with rewards for device connectivity, data sharing, and community participation.",Smart Home,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/homesmartchain,,,,,,,TRUE,FALSE
Hooked,t03cbk,https://hooked.io/,NOT_DEPIN,BINANCE,HOOK,hooked-protocol,Hooked Protocol is a Web3 social learning platform that offers gamified Learn and Earn experiences.,,,,https://twitter.com/HookedProtocol,1042355429667258378,https://t.me/HookedProtocolOfficial,https://medium.com/hookedprotocolofficial,,https://www.linkedin.com/company/hooked-protocol-2023/about/,,true,false
HOPR,rdr178,https://hoprnet.org/,WIRELESS,ETHEREUM,HOPR,hopr,HOPR connects unused internet bandwidth for monetization.,,ZZ,,https://twitter.com/hoprnet,679586195529007116,https://t.me/hoprnet,https://medium.com/hoprnet,https://github.com/hoprnet,https://www.linkedin.com/company/hoprnet,,true,false
Horizen,951y23,https://www.horizen.io/en,NOT_DEPIN,NATIVE,ZEN,horizen,"Horizen is a layer0 blockchain that underpins the zero-knowledge network of blockchains powered by the largest node system and a massively scalable cross-chain protocol, Zendoo.",,ZZ,,,,,,,,,true,false
Hotspotty,8hmhev,https://hotspotty.net/,WIRELESS,,,,Hotspotty is a tool for ordering and managing helium hotspots.,,,,https://twitter.com/hotspotty,874255050929745930,,https://medium.com/hotspotty,https://github.com/hotspotty,https://www.linkedin.com/company/hotspotty-official/,,true,false
HPChain,hypd80,https://www.hpchain.ai/,COMPUTE,,HPC,,"HPChain is a cutting-edge platform that merges GPU rendering with blockchain technology, offering a decentralized network for high-performance computing, tailored for AI and cloud gaming applications.",,ZZ,,,,,,,,,true,false
Hub3,m2236c,https://hub3.ee/,NOT_DEPIN,,,,"Hub3 is a social-fi platform that enables creators to monetize their content and connect with exclusive communities while utilizing token-gated communities, one key ahead.",,,,https://twitter.com/hub3ee,1056847160597041262,https://t.me/hub3official,,,,,true,false
Hubble Protocol,ztuwxq,https://hubbleprotocol.io/,NOT_DEPIN,SOLANA,USDH,usdh,Hubble Protocol is a financial platform building sustainable Decentralized Finance services on Solana and offers USDH an overcollateralized stablecoin.,,ZZ,,https://twitter.com/hubbleprotocol,901231379587670066,https://t.me/hubbleprotocol,https://blog.hubbleprotocol.io/,https://github.com/hubbleprotocol,https://www.linkedin.com/company/hubbleprotocol/,,true,false
Huddle01,3r2xgz,https://huddle01.com/,COMPUTE,,,,"Huddle01 enables high-quality audio, video, and live-streaming in 1 day. Our SDKs are Faster, Secure, and Scalable for mobile and web apps.",,EV3 Sal,,,890224574761926756,,,,,,true,false
HUDI,0g5m8r,https://humandataincome.com/,HUMAN_CAPITAL,BINANCE,HUDI,hudi,"HUDI is a DeFi data monetization ecosystem that empowers users and organizations to collect, enrich, and trade their data for profit while maintaining privacy and anonymity.",Data,0x9d73ca4689788f6d4be686e9150d6efe75ffd748,,https://x.com/humandataincome,,,,,,,TRUE,FALSE
HUMAN Protocol,g2eg60,https://www.humanprotocol.org/,HUMAN_CAPITAL,ETHEREUM,HMT,human-protocol,"HUMAN Protocol is a decentralized marketplace for humans to contribute their reasoning, skills, and knowledge to help businesses build global technologies.",,ZZ,,,786316364150341682,,,,,,true,false
Human,gs9m0p,https://joinhuman.com/,BLOCKCHAIN_INFRA,,,,"Human is a global financial and identity network with a unique digital ID, currency, and mobile wallet app.",L1/L2,ZZ,,https://twitter.com/humanapp,913558929995358228,https://t.me/joinhmn,,https://github.com/joinhuman,https://linkedin.com/company/joinhmn,,true,false
Humane,pmo0qr,https://humane.com/,SENSORS,,,,"Humane is the developer of Ai Pin, a wearable, multi-modal device with an AI digital assistant that handles various tasks, enhancing productivity for users.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/humane,,,,,,,true,false
Humanity,8nfsmi,https://www.humanity.org/,NOT_DEPIN,,,,Humanity Protocol introduces a new palm recognition technology for establishing human proofs in Web3 while protecting privacy.,,EV3 Sal,,https://twitter.com/Humanityprot,1201822428880437319,,,,,,true,false
Humanode,ful6z6,https://humanode.io/,BLOCKCHAIN_INFRA,,HMND,humanode,"Humanode is the first crypto-biometric network where one human equals one node, providing sybil resistance and innovative governance models to the crypto industry using private biometric technology.",,ZZ,,https://twitter.com/humanode_io,819836895739248700,https://t.me/humanode,https://blog.humanode.io/,https://github.com/humanode-network,https://www.linkedin.com/company/human-node/,,true,false
Humans.ai,c7sbzs,https://humans.ai/,AI,ETHEREUM,HEART,humans-ai,Humans.ai is a deep-tech company creating an ethical and scalable AI ecosystem on the blockchain.,,,,https://twitter.com/humansdotai,999302051538411671,https://t.me/humansdotai,https://medium.com/humansdotai,,http://www.linkedin.com/company/humansdotai,,true,false
Humanscape,6ixtt2,https://humanscape.io/en/index.html,NOT_DEPIN,,,,Humanscape is a blockchain-based decentralized patient network that can help patients overcome diseases through intellectual and emotional interaction based on community activities.,,,,,,,,,,,true,false
Humcen,0bvsxt,https://humcen.com/,NOT_DEPIN,,,,"Humcen is a global IP Aggregator service provider for Innovators, Creators, and Businesses worldwide.",NFTs,,,https://twitter.com/Humceng,,,http://www.linkedin.com/company/humcen-co,,,,true,false
Hybrid,pcaj2r,https://buildonhybrid.com/,AI,NATIVE,HYB,,"Hybrid is an EVM-compatible Layer 1 blockchain that integrates a Mixture of Experts (MoE) framework, enabling easy creation and monetization of AI agents in a plug-and-play approach.",Agents,ZZ,,https://twitter.com/buildonhybrid,,,,,,,true,false
Hydro,i0yv6s,https://www.hydro.online/,HUMAN_CAPITAL,,,,"Hydro is a decentralized monetization engine empowering publishers to earn through user engagement and dwell time, reducing reliance on ads.",Advertising,ZZ,,https://twitter.com/Hydro_Online_,,,,,,,true,false
HYFIX,8svnlw,https://hyfix.ai/,SENSORS,,,,HYFIX develops IoT-friendly low-cost embedded software and hardware solutions for centimeter accurate GNSS.,IoT,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/HyfixAI,,,,,,,true,false
Hylé,s6qmgb,https://www.hyle.eu/,NOT_DEPIN,,,,"Hylé is the core layer for the modular ZK stack, a secure, decentralized, censorship-resistant settlement layer for all ZK proofs.",ZK,ZZ,,https://twitter.com/hyle_org,,,,,,,true,false
HyperAGI,yuyvil,https://www.hyperagi.network/,AI,NATIVE,HYPT,hyperdust,"HyperAGI is a blockchain platform designed to achieve Unconditional Basic Income (UBI) through decentralized AGI, offering a GPU DePIN infrastructure, AI computing framework, and personal agents powered by advanced neural programming.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/HyperDustIO,,,,,,,true,false
Hyperas,lupgqd,https://www.hyperaschain.com/,COMPUTE,ARBITRUM,HYRA,,Hyperas chain is building an infinitely scalable distributed high-performance computing power network based on blockchain that allows individuals to earn an attractive passive income while providing enterprises with affordable AI computing resources.,,W. L.,,https://twitter.com/hyperaschain,,,,,,,true,false
Hyperaware,x2zh3j,https://hyperaware.io/,SENSORS,,,,"Hyperaware: a decentralized app for governing connected devices based on location, utilizing IoT and smart contracts.",IoT,,,,,,,,,,false,false
Hyperbolic,8heoo1,https://hyperbolic.xyz/,COMPUTE,ETHEREUM,HYPE,hyperbolic-protocol,Hyperbolic Labs is a decentralized microservices platform building the web for Web3.,GPUs,,,https://twitter.com/hyperbolic_labs,1196951041971863664,,,,http://www.linkedin.com/company/hyperbolic-labs,,true,false
Hypercycle,cs121o,https://www.hypercycle.ai/,AI,ETHEREUM,HYPC,hypercycle,"Hypercycle is a blockchain network designed to supply massively scalable, low-cost infrastructure for decentralized AI, and other applications.",,ZZ,,https://twitter.com/hypercycle_ai,,https://t.me/hypercycle_ai,,,https://www.linkedin.com/company/hypercycle-ai/,,true,false
HyperGPT,fc3wuj,https://hypergpt.ai/,AI,,HGPT,,"HyperGPT is a decentralized AI marketplace on the blockchain, offering a secure and transparent platform for buying, selling, and exchanging AI applications, enhanced by AI-driven features and smart contract automation.",,ZZ,,,1099928259115876432,,,,,,true,false
Hyperline,y0wpxj,https://www.hyperline.xyz/,BLOCKCHAIN_INFRA,,,,"Hyperline is a fully managed Blockchain Data Platform for Analytics, Data Science, and Machine Learning workloads.",,ZZ,,https://twitter.com/hyperline_xyz,,,https://medium.com/@hyperline,,https://www.linkedin.com/company/hyperlinexyz/,,true,false
Hypersign,nir8er,https://hypersign.id/,NOT_DEPIN,ETHEREUM,HID,hypersign-identity-token,Hypersign is a decentralized identity layer for the internet.,ZK,,,https://twitter.com/hypersignchain,777575858075861033,https://t.me/hypersignchain,https://hypersign.id/blogs,https://github.com/hypersign-protocol,https://www.linkedin.com/company/hyperminetech/,,true,false
Hyperspace,oevejl,https://aios.network/,AI,,,,"aiOS by Hyperspace is a decentralized AI network, enabling users to run nodes and create AI agents using the Mistral-7B model on their own devices without monthly subscriptions.",,,,https://x.com/HyperspaceAI,,,,,,,true,false
Hypertensor,dxp78t,https://hypertensor.org/,AI,NATIVE,TENSOR,wrapped-hypertensor,"Hypertensor is an AI Layer 1 blockchain designed for further decentralizing, interfacing, incentivizing, validating, and democratizing decentralized AI models through a peer-to-peer network.",,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/hyper_tensor,,,,,,,TRUE,FALSE
Hyperway,uo9pya,https://hyperway.io/,SENSORS,,,,"Hyperway specializes in advanced hardware solutions for the low-altitude economy, providing air mobility infrastructure for drones, air taxis, smart cities, and marine vessels.",,W. L.,,https://x.com/hyperway_,,,,,,,true,false
iAgent,1m2jmd,https://www.iagentpro.com/,AI,,AGNT,,"iAgent protocol enables world gamers to train their AI agents from gameplay footage, powered by a decentralized GPU infrastructure network, creating a new on-chain asset class.",,ZZ,,https://twitter.com/iAgentProtocol,,,,,,,true,false
Iagon,omgud6,https://iagon.com/,BLOCKCHAIN_INFRA,CARDANO,IAG,iagon,"Iagon is a decentralized cloud network built on Cardano, revolutionizing data storage and processing.",IoT,ZZ,,https://twitter.com/IagonOfficial,837215135999197246,https://t.me/Iagon_official,,,https://www.linkedin.com/company/iagon/,,true,false
iApro,50z1ys,https://linktr.ee/iapro.ai,AI,SOLANA,iApro,,"iApro AI is an Intelligent Agent Platform that enables Web3 businesses to deploy intelligent agents for marketing, customer service, information, and trading services.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/iapro_ai,,,,,,,true,false
Icenet,3746aq,https://www.icenet.app/,COMPUTE,,,,"ICE uses 256-bit AES encryption to nullify critical knowledge attacks and disguise all connections as encrypted web traffic. ",,W. L.,,,1079703982320132096,,,,,,true,false
IdeaCorp,x3y6f3,https://www.ideacorporation.org/,PENDING,,IDEA,,,,EV3 Sal,,https://twitter.com/ideacorp_,,,,,,,true,false
idOS,oe1vcp,https://idos.network/,PENDING,,,,,,ZZ,,https://x.com/idOS_network,,,,,,,true,false
IDriss,5w1adt,https://www.idriss.xyz/,NOT_DEPIN,,,,IDriss is a community-owned and operated suite of tools that makes web3 more usable for everyone.,Identity,,,https://twitter.com/IDriss_xyz,895318072179716106,,,,,,true,false
iExec,2drl3l,http://iex.ec/,COMPUTE,ETHEREUM,RLC,iexec-rlc,"RLC: Monetize or rent out computational resources, datasets, and applications through iExec.",,W. L.,,https://twitter.com/iEx_ec,841605628928458762,https://t.me/iexec_rlc_official,https://medium.com/iex-ec,https://github.com/iExecBlockchainComputing,http://www.linkedin.com/company/iex.ec,,true,false
iGam3,ldey5f,https://igam3.com/,AI,,,,"iGam3 is an AI-powered, plug-and-play DePIN device that enables users to earn passive income by contributing to a decentralized network and supporting AI computing tasks.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/igam3_ai,,,,,,,TRUE,FALSE
iKnowSpots,46ij86,https://solana.iknowspots.com/,NOT_DEPIN,,,,iKnowSpots is a versatile event hosting & ticketing platform that simplifies the process for organizers and attendees.,NFTs,,,https://twitter.com/iknowspots,,,,,https://www.linkedin.com/company/iknowspots/,,true,false
Illuvium,jmqb38,https://illuvium.io/,NOT_DEPIN,ETHEREUM,ILV,illuvium,Illuvium is a video game developer and publisher of AAA play-to-earn crypto games.  Illuvium games are built on the Ethereum blockchain with collectible NFTs across the DeFi metaverse.,,ZZ,,,,,,,,,true,false
Imbue,i8a066,https://imbue.com/,NOT_DEPIN,,,,Imbue trains foundation models to create practically useful AI agents.,,,,https://twitter.com/imbue_ai,,,http://www.linkedin.com/company/imbue-ai,https://imbue.com/blog/,,,true,false
IMGNAI,du3f01,https://imgnai.com/,AI,ETHEREUM,IMGNAI,imgnai,"ImgnAI's flagship product is Nai, an AI bot that turns anything users write into an anime, 3D, or hyper-realistic image.",,,,https://twitter.com/imgn_ai,1053754972753383474,https://t.me/imgnAI,https://imgnai.medium.com/,https://github.com/search?q=nirvana+labs,http://www.linkedin.com/company/imgnai,,true,false
Immu3,d3nhk5,https://immu3.io/,BLOCKCHAIN_INFRA,,,,Immu3 is an ultimate Web3-Infra stack for building and utilizing on-chain communication applications.,,EV3 Sal,,https://twitter.com/immu3_io,,,,,,,true,false
impactMarket,p19y87,https://www.impactmarket.com/,NOT_DEPIN,ETHEREUM,PACT,impactmarket,ImpactMarket enables communities to implement financial inclusive mechanisms like Unconditional Basic Income (UBI).,,,,https://twitter.com/impactmarket,809102018827255868,https://t.me/impactMarketOfficial,https://medium.com/impactmarket,https://github.com/impactMarket,https://www.linkedin.com/company/impactmarket,,true,false
Impermax,d869lq,http://www.impermax.finance/,NOT_DEPIN,ETHEREUM,IBEX,impermax-2,Impermax: Cross-chain lending protocol offers yield for lenders and borrowers.,,,,https://twitter.com/ImpermaxFinance,782387768411815947,,https://impermax.medium.com/,https://github.com/Impermax-Finance,http://www.linkedin.com/company/impermax-finance,,true,false
Impossible Cloud Network,vv3bfg,https://www.icn.global/,COMPUTE,,ICNT,,"Impossible Cloud Network (ICN) is a decentralized, multi-service cloud platform that connects hardware and service providers through a transparent marketplace, offering scalable, secure, and high-performance cloud services.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd745,,https://x.com/ICN_Protocol,,,,,,,TRUE,FALSE
Impossible Cloud,qcgu9q,https://www.impossiblecloud.com/,COMPUTE,,,,"Impossible Cloud is a decentralized, enterprise-grade cloud storage platform. It leverages a network of data centers to deliver low-cost object storage with a longer term goal to create a more comprehensive cloud offering.",,W. L.,,,,,,,,,true,false
Inco Network,s1rmn5,https://www.inco.org/,NOT_DEPIN,,,,"Inco Network is an EVM Layer-1, utilizing fully homomorphic encryption (FHE) to enable composable and operable confidential states.",,,,,1150292382416392315,,,,,,true,false
Inco,5m5fev,https://www.inco.org/,BLOCKCHAIN_INFRA,,,,"Inco is a universal confidentiality layer for Web3, enabling the development of next-generation dApps, and providing confidentiality to existing blockchains.",,ZZ,,https://twitter.com/inconetwork,,,,,,,true,false
Incognito,g8ux2k,https://incognito.org/,COMPUTE,ETHEREUM,PRV,incognito-2,Incognito is a privacy hub for privately shielded cryptocurrency transactions.,,W. L.,,https://twitter.com/IncognitoChain,1046631732067184711,https://t.me/incognitochain,https://medium.com/@incognitochain,https://github.com/incognitochain,https://linkedin.com/company/incognitochain,,FALSE,false
Indexing Co,zy0ke7,https://www.indexing.co/,BLOCKCHAIN_INFRA,,,,Indexing Co is a developer of a web3 data management platform with a mission to solve data accessibility to unlock the next generation of web3 products.,Data,EV3 Sal,,https://twitter.com/indexingco,,,,,,,true,false
Indicio,m5wcp4,https://indicio.tech/,NOT_DEPIN,,,,"Indicio.tech is a professional services firm specializing in decentralized identity architecture, engineering, and consultancy.",,,,https://twitter.com/indicioid,,,,,https://www.linkedin.com/company/indiciotech/,,true,false
Individuum,qajop0,,PENDING,,,,,,EV3 Sal,,,,,,,,,true,false
Induced,m8lgxf,https://www.induced.ai/,NOT_DEPIN,,,,"Induced AI develops a cloud-based automation solution that allows businesses to input their workflows in plain English, instantly transforming these instructions into pseudo-code for handling repetitive tasks typically managed by back offices.",,EV3 Sal,,https://twitter.com/inducedai,1148694836103348274,,,,,,true,false
Inery,l93p26,https://www.inery.io/,NOT_DEPIN,BINANCE,INR,inery,Provider of a decentralized database management system built on a layer-1 proprietary blockchain solution.,L1/L2,ZZ,,https://twitter.com/ineryblockchain,,https://t.me/inery_blockchain,https://www.inery.io/blog/,,https://www.linkedin.com/company/inery/,,true,false
Infera,zi5qku,https://www.infera.org/,COMPUTE,,INFER,,Infera is a decentralized AI inference network that unifies global computing power by allowing anyone to utilize idle GPUs to perform inference tasks and earn rewards in tokens.,GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/infera_network,,,,,,,TRUE,FALSE
Inference Labs,qi9eg6,https://inferencelabs.com/,AI,,,,"Inference Labs develops infrastructure and products for AI on web3, specializing in zero-knowledge proofs for transparent and secure AI operations in a decentralized ecosystem.",,ZZ,,https://twitter.com/inference_labs,,,,,,,true,false
Inferium,mo1htj,https://www.inferium.io/,PENDING,,,,,,EV3 Sal,,https://x.com/InferiumAI,,,,,,,TRUE,FALSE
Inferix,adhfwc,https://inferix.io/,COMPUTE,,,,"Inferix is a Decentralized GPU network for 3D rendering, AI training & inference.",GPUs,Jonah,,https://twitter.com/inferixgpu,1139015527939981453,,,,,,true,false
INFINET,nf9tce,https://infinetsolutions.io/,WIRELESS,,INFI,,"Infinet is a decentralized, privacy-focused network that provides scalable and secure connectivity for IoT and 5G devices using zk-Rollups and multi-protocol support while rewarding users for contributing to network coverage.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/Infinet_io,,,,,,,TRUE,FALSE
infinitio AI,dqucfx,https://www.infinitio.ai/,AI,,,,"infinitio AI is a generative AI ecosystem harnessing the power of blockchain to ensure unparalleled traceability, ownership & monetization of GPUs, data, trained models, and outputs. ",,EV3 Sal,,,,,,,,,true,false
InfinityVM,ct3zlr,https://infinityvm.xyz/,PENDING,,,,,,EV3 Sal,,https://x.com/infinity_vm,,,,,,,TRUE,FALSE
Inflectiv AI,e4gewq,https://inflectiv.ai/,AI,,,,"Inflectiv is a decentralized, scalable node network that powers Web3 AI applications, enabling secure data processing and connectivity across both commercial and decentralized AI systems.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/inflectivAI,,,,,,,TRUE,FALSE
Influx,kemox7,https://influx.exchange/,NOT_DEPIN,,,,Influx is a next-generation AMM perpetual futures protocol.,DeFi,vkurup.eth,,,,,,,,,true,false
InfraX,3zzj4y,https://infrax.network/,COMPUTE,ETHEREUM,INFRA,infrax,"InfraX is an innovative cloud-computing platform offering GPU and AI resources for rental, lending, and processing, to democratize access to advanced technologies.",,ZZ,,https://twitter.com/InfraX_,,,,,,,true,false
Ingonyama,cv434n,https://www.ingonyama.com/,NOT_DEPIN,,,,"Ingonyama is a next-generation semiconductor company, focusing on Zero-Knowledge Proof hardware acceleration. ",ZK,ZZ,,https://twitter.com/Ingo_zk,1063033227788423299,,https://medium.com/@ingonyama,https://github.com/ingonyama-zk,https://www.linkedin.com/company/ingonyama/,,true,false
inheritance Art,0a4vnn,https://www.inheritance-art.com/,NOT_DEPIN,ETHEREUM,IAI,inheritance-art,Inheritance Art aims to be the largest NFT/AI-NFT producer and studio for mixed reality and hyper realistic productions.,,,,https://twitter.com/InheritanceArt,961723689324413008,,,,http://www.linkedin.com/company/inheritance-art,,true,false
InitVerse,bxei7q,https://testnet.inichain.com/,COMPUTE,NATIVE,INI,,InitVerse is a decentralized cloud computing service platform and low-gas blockchain ecosystem.,,ZZ,,https://twitter.com/initverse,,,,,,,true,false
Injective,t2mgs2,https://injective.com/,NOT_DEPIN,ETHEREUM,INJ,injective-protocol,"Injective is a finance-oriented blockchain for DeFi apps: exchanges, lending, and prediction markets.",L1/L2,,,https://twitter.com/Injective_,739552603322450092,https://t.me/joininjective,https://medium.com/injective-labs,https://github.com/InjectiveLabs,http://www.linkedin.com/company/injective-labs,,true,false
Innovative Bioresearch,5nhgo4,https://www.innovativebioresearch.com/,SCIENCE,ETHEREUM,INNBC,innovative-bioresearch,Innovative Bioresearch is a biotech company bringing disruptive innovation to pharma using blockchain technology to decentralize biomedical research.,Pharmaceutical,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/innbioresearch,,,,,,,TRUE,FALSE
Innovex,f1c14s,https://www.innovex.cc/,AI,IOTEX,,,"Innovex is a decentralized computing and AI Layer 2 platform built on IoTeX, offering scalable and privacy-preserving solutions for high-demand applications like DePIN, AI-powered dApps, and edge computing.",L1/L2,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/innovex_ai,,,,,,,TRUE,FALSE
Inpersona,80egp2,https://www.vyvo.org/,SENSORS,NATIVE,VSC,vyvo-smart-chain,"InPersona by Vyvo Smart Chain is a Web3 Metaverse platform that incentivizes positive health and lifestyle behavior using wearable technology, together with novel HealthFi and SocialFi reward programs.",,W. L.,,https://twitter.com/inPersonaNFT,,,,,,,true,false
Inscription Alliance,ybrdmc,https://www.inscriptionalliance.com/,BLOCKCHAIN_INFRA,,,,Inscription Alliance is an L1 DePIN network that provides efficient cross-chain infrastructure for aggregating and trading digital inscriptions.,L1/L2,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/inscripalliance,,,,,,,TRUE,FALSE
Instruxi,28tasf,https://www.instruxi.io/,BLOCKCHAIN_INFRA,,,,"Instruxi is a Web 3.0 company focused on helping clients hyperscale data availability through Asset Tokenization and Attestation services, and the Instruxi Data Mesh, which simplifies developing applications on complex and disparate systems.",,EV3 Sal,,https://twitter.com/instruxi,,,,,,,true,false
inSure,l4srh8,https://insuretoken.net/,NOT_DEPIN,ETHEREUM,SURE,insure,"inSure: Community-based crypto insurance, distributed ownership risks, dynamic pricing model.",,,,https://twitter.com/InsureToken,,https://t.me/insuredefi,https://insureteam.medium.com/,https://github.com/inSureToken/SmartContract/blob/master/inSure.sol,http://www.linkedin.com/company/insure-technologies,,true,false
INT,c77cyh,https://intchain.io/#/,BLOCKCHAIN_INFRA,NATIVE,INT,internet-node-token,"INT is an IoT blockchain infrastructure, focusing on DePIN, IoT and RWA.",,EV3 Sal,,https://twitter.com/INTCHAIN,819034774252552262,https://t.me/INTchain_officialtelegram,https://medium.com/int-chain,https://github.com/intfoundation,,,true,false
Integritee,6hlk6x,https://www.integritee.network/,BLOCKCHAIN_INFRA,POLKADOT,TEER,integritee,Integritee is a TEE-based secure computation platform.,TEE,,,https://twitter.com/integri_t_e_e,877203191396192316,https://t.me/Integritee_Official,https://www.integritee.network/blog,,http://www.linkedin.com/company/integritee,,true,false
Interlock,ogli6i,https://www.interlock.network/,AI,,ILOCK,,Interlock is a blockchain-based security product for individuals and enterprises that leverages blockchain technology and AI and harnesses the power of the crowd to share essential threat intelligence data between consumers and enterprises.,,ZZ,,https://twitter.com/interlockweb3,,,,,,,true,false
Internet Computer,edypr6,https://internetcomputer.org/,NOT_DEPIN,NATIVE,ICP,internet-computer,Internet Computer (ICP) is a set of protocols that allow independent data centers around the world to band together and offer a decentralized alternative to the current centralized internet cloud providers.,,,,https://twitter.com/dfinity,,,https://internetcomputer.org/blog,https://github.com/dfinity,https://www.linkedin.com/company/internet-computer-protocol/,,true,false
Internxt,fsemso,https://internxt.com/,COMPUTE,ETHEREUM,INXT,internxt,"Internxt is a provider of decentralized, privacy-focused cloud storage services.",,ZZ,,,,,,,,,true,false
Intlayer,0moger,https://linktr.ee/intlayer,BLOCKCHAIN_INFRA,,IN,,"IntLayer is the state-of-the-art Data Intelligence layer of the World Computer, delivering decentralized data intelligence through AI-driven live data streaming, zero-trust verifiability, and on-chain proofs for smart contracts.",Data,ZZ,,https://x.com/Int_Layer,,,,,,,true,false
Intu,yxypiw,https://intu.xyz/,PENDING,,,,,,vkurup.eth,,https://x.com/IntuOfficial,,,,,,,true,false
Intuition,kx9y1a,https://intuition.systems/,NOT_DEPIN,,,,"Intuition is a decentralized platform that enhances decision-making by leveraging crowd-sourced knowledge and attestations, empowering users with a peer-to-peer, data-driven ecosystem for intuitive and sovereign interactions.",,ZZ,,https://twitter.com/0xintuition,909531430881746974,,https://medium.com/0xintuition,,https://www.linkedin.com/company/0xintuition/,,true,false
InvArch,m2541n,https://www.invarch.network/,NOT_DEPIN,,,,InvArch allows organizations & individuals to manage assets & execute transactions across any blockchain using a single non-custodial account.,L1/L2,,,https://twitter.com/InvArchNetwork,876974985984487484,https://t.me/InvArch,https://invarch.medium.com/,,https://www.linkedin.com/company/invarch/,,true,false
Invision,74fmsb,https://invision.ai/,BLOCKCHAIN_INFRA,,,,Invision AI enables real-time object detection and tracking on mainstream processors.,Software,,,http://twitter.com/invisionai,,,,,https://www.linkedin.com/company/invisionai,,true,false
IO.Net,61zuw7,https://io.net/,COMPUTE,SOLANA,IO,io,IO.Net is a decentralized computing platform for ML applications built on Solana.,,,,https://discord.com/invite/kqFzFK7fg2,1080817368646819941,https://t.me/ionet_official,,https://github.com/ionet-official,https://www.linkedin.com/company/ionet-official/,,true,false
IOEN,xzwxgd,https://www.ioen.tech/,PENDING,,,,,,W. L.,,https://x.com/IOEN_tech,,,,,,,true,false
ioFog,g9rym4,https://iofog.org/,COMPUTE,,,,Eclipse ioFog: Open-source edge computing platform for ECN.,,,,,,,,,,,true,false
ioPay,95178g,https://iopay.me/,NOT_DEPIN,,,,"ioPay is a DePIN-focused multi-chain wallet that allows users to store and send crypto assets, including IOTX, ETH, BNB, and other crypto assets.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/iopaywallet,,,,,,,true,true
IOTA,gobzn5,https://www.iota.org/,BLOCKCHAIN_INFRA,NATIVE,IOTA,iota,"IOTA uses Tangle instead of blockchain, offering faster speeds for the Internet of Things ecosystem.",IoT,,,https://twitter.com/iota,,,https://medium.com/@iotafoundation,https://github.com/iotaledger,http://www.linkedin.com/company/iotafoundation,,true,false
IoTEdge,olcvcb,https://iotedge.co/,COMPUTE,,,,"IoTEdge is a decentralized edge computing network for Internet of Things, built on blockchain technology.",IoT,,,https://twitter.com/iotedgechain,,https://t.me/IotedgeOfficalEN,,,,,true,false
IoTeX,oqhdss,https://iotex.io/,BLOCKCHAIN_INFRA,IOTEX,IOTX,iotex,"IoTeX is a blockchain-based sensor solution called Pebble, integrating numerous functions in one device.",IoT,,,https://twitter.com/iotex_io,534888542648664074,https://t.me/IoTeXGroup,https://medium.com/fmfw-io/introducing-iotex-3c14699aeecd,https://github.com/iotexproject,http://www.linkedin.com/company/iotex,,true,false
IOTY,zm7sou,https://www.iotyprotocol.com/,PENDING,,,,,,W. L.,,https://x.com/Ioty_protocol,,,,,,,true,false
IPFS,ebcetj,https://ipfs.tech/,COMPUTE,,,,"IPFS is an open-source, peer-to-peer protocol that manages data without a central server, ensuring decentralized, verifiable, and resilient storage and sharing across various industries.",,ZZ,,https://twitter.com/ipfs,806902334369824788,,https://blog.ipfs.tech/,https://github.com/ipfs,https://www.linkedin.com/company/protocollabs/,,true,false
IPSX,8er1ir,https://ip.sx/,COMPUTE,,,,IPXS is a decentralized proxy marketplace connecting users peer-to-peer for monetizing unused IPs.,,ZZ,,https://twitter.com/ipexchange1,,https://t.me/IPExchange,https://medium.ip.sx/,https://github.com/ip-exchange,https://linkedin.com/company/ipsxnetwork,,true,false
IQ,8gkezm,https://iq.wiki/,AI,ETHEREUM,IQ,everipedia,IQ: AI and blockchain firm with applications like IQ.wiki and HiIQ for staking.,,,,https://twitter.com/everipedia,920369137828655144,https://t.me/everipedia,,https://github.com/EveripediaNetwork,http://www.linkedin.com/company/iqdotwiki,,true,false
Iron Mill,eq79la,https://www.ironmill.xyz/,NOT_DEPIN,,,,"IronMill is a web3 infrastructure company that focuses on providing an integrated solution tailored for software developers, allowing them to seamlessly integrate zero-knowledge technology into new applications.",ZK,ZZ,,https://twitter.com/ironmill_xyz,,,,,,,false,false
Ironfish,h21nov,https://ironfish.network/,NOT_DEPIN,,,,"Iron Fish encrypts every transaction, shielding your sensitive asset information from public view.",,EV3 Sal,,,771503434028941353,,,,,,true,false
Irreducible,liwr2s,https://www.irreducible.com/,NOT_DEPIN,,,,Irreducible is an Enterprise Grade Zero-Knowledge Proof Acceleration Platform supporting web3 technologies.,ZK,ZZ,,,,,,,,,true,false
Irys,tjyvc7,https://irys.xyz/,COMPUTE,,,,"Irys is a multi-chain solution for Arweave, enabling native support for Arweave storage on different blockchains.",Storage,,,https://twitter.com/irys_xyz,864852288002850866,https://t.me/TheBundleCommunity,https://medium.com/bundlr-network,https://github.com/topics/bundlr,https://uk.linkedin.com/company/bundlr-network?trk=ppro_cprof,,true,false
Ispolink,vv9w8b,https://www.ispolink.com/,HUMAN_CAPITAL,ETHEREUM,ISP,ispolink,"Ispolink is a GameFi AI-driven platform for Web3 developers. Their cross-chain ATS platform streamlines the hiring process and empowers Blockchain, DeFi, Gaming, and IT firms to source leading tech talents with AI-powered algorithms.",,ZZ,,,886996103793356890,,,,,,true,false
Itheum,tww5o4,https://www.itheum.io/,NOT_DEPIN,,ITHEUM,itheum,Itheum is a Decentralized Data Ownership Platform that enables seamless data asset tokenization for individuals and enterprises.,,ZZ,,,,,,,,,true,false
Its AI,9rq0a1,https://its-ai.org/,AI,BITTENSOR,,,"It's AI is a subnet on the Bittensor Network that incentivizes the development of distributed solutions to accurately identify AI-generated content, aiming to commercialize detection tools for widespread use.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/ai_detection,,,,,,,true,false
IX Swap,lgggcx,https://www.ixswap.io,RWA,ETHEREUM,IXS,ix-swap,IX Swap is a Real World Asset (RWA) Tokenization Launchpad and DEX,,EV3 Sal,,,899582968463495218,,,,,,true,false
Ixian,kpjsfw,https://www.ixian.io/,BLOCKCHAIN_INFRA,NATIVE,IXI,ixicash,"Ixian is building an open and secure environment for data streaming. The Ixian platform comprises the Ixian DLT, a Distributed Ledger, the S2 Streaming network, a P2P data transmission network, and Spixi, a decentralized and secure chat app.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/ixian_io,,,,,,,true,false
IYO,n20fci,https://iyo.audio/,PENDING,,,,,,,,https://x.com/iyo_audio,,,,,,,true,false
Jackal,127k4x,https://jackalprotocol.com/,COMPUTE,NATIVE,JKL,jackal-protocol,Jackal is a decentralized cloud storage network designed to safeguard extremely sensitive data.,Storage,ZZ,,https://x.com/Jackal_Protocol,,https://t.me/+rtuZnbTlHaIzNjVh,https://www.jackalprotocol.com/news,https://github.com/JackalLabs,https://ca.linkedin.com/company/jackal-storage,,true,false
Jam Galaxy,w97xeb,https://linktr.ee/thejamgalaxy,PENDING,,,,,,ZZ,,https://x.com/TheJamGalaxy,,,,,,,true,false
Jambo,37y7e6,https://www.jambo.technology/,WIRELESS,,,,"Jambo is building an affordable web3 and gaming smartphone, JamboPhone for emerging markets to enhance Web3 accessibility and education.",,EV3 Sal,,https://twitter.com/jambotechnology,,,,,,,true,false
Janction,c9z6gg,https://www.janction.io/,AI,,,,"Janction is an AI-focused DePIN Layer 2 that stands at the forefront of the AI revolution, propelling innovation through the strategic deployment of GPU clusters.",,ZZ,,https://twitter.com/JanctionMGT,,,,,,,true,false
Jasmine,bwhoon,https://www.jasmine.energy/,ENERGY,,,,"Jasmine Energy is a decentralized market for claiming, trading, and redeeming renewable energy certificates.",,ZZ,,https://twitter.com/Jasmine_Energy,1012757430779789403,,https://medium.com/jasmine-energy?source=topics_v2-8-84022bb4b1_df6b_4af1_8461_679c57abc67d-17,https://github.com/jasmine,https://www.linkedin.com/company/jasmine-energy,,true,false
Jasmy,h1tz1v,https://jasmy.global/,BLOCKCHAIN_INFRA,ETHEREUM,JASMY,jasmycoin,Jasmy is a tokenized platform that champions the democratization of data by combining blockchain and IoT technology to provide an infrastructure that allows anyone to use and share their IoT data safely and securely.,,ZZ,,,,,,,,,true,false
JDI,cjfsd9,https://jdi.group/,BLOCKCHAIN_INFRA,,,,JDI builds hardware and software solutions for the Decentralized Wireless Network and IoT industry.,,,,https://twitter.com/jdiyield,,,https://medium.com/@jdi.gwh/about,,https://www.linkedin.com/company/jdi-data,,true,false
Jellyfish Mobile,njll7b,https://jellyfi.me/,WIRELESS,ETHEREUM,JFISH,jellyfish-mobile,SIM3 by Jellyfish Mobile is a special SIM card for mobile phones that combines traditional telecommunications with Web3 by offering built-in hardware wallet capabilities for managing cryptocurrencies and accessing blockchain applications.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/jellyfishmobile,,,,,,,true,false
jfrazier.eth's stealth project,75exdm,,AI,,,,Developing a project that currently exploring new ways to architect how blockchains can handle AI-training data.,,,,,,,,,,,true,false
Jim,b9tawl,https://www.jimaistudios.com/,AI,ETHEREUM,JIM,roasthimjim,Jim is an AI Bot that responds intelligently on social platforms.,,,,https://twitter.com/JimAIstudios,,https://t.me/RoastHimJim,,,,,true,false
Jinni,xkquis,http://www.jinni.com/,AI,,,,"Jinni is an AI project making AI accessible to all, revolutionizing the global AI landscape.",,,,https://twitter.com/jinnidotcom,,,https://medium.com/@njinn,https://github.com/jinni,https://www.linkedin.com/company/jinni/,,false,false
Jiritsu,j68t8z,https://www.jiritsu.network/,RWA,,,,"The Jiritsu blockchain is a Layer 1 solution for tokenizing and managing real-world assets using Zero-Knowledge Proofs and Multi-Party Computation, ensuring secure, private verification and regulatory compliance.",L1/L2,ZZ,,https://twitter.com/Jiritsu_Network,,,,,https://www.linkedin.com/company/jiritsunetwork/,,true,false
JobChain,zyhloi,https://www.jobchain.com/,BLOCKCHAIN_INFRA,ETHEREUM,JOB,jobchain,JobChain: Connects job seekers with employers for efficient job search and recruitment processes.,,,,https://twitter.com/antigravity1729,527549139429490688,https://t.me/JobchainOfficial,,,https://www.linkedin.com/company/jobchainofficial/,,true,false
JoinCare,44tj86,https://health-care.global/,HUMAN_CAPITAL,SOLANA,JCC,,"JoinCare is a Web3 health management platform integrating AI, blockchain, and IoT to offer personalized health care, enabling users to control their data while benefiting from decentralized data circulation and gamified health experiences.",Health,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/JoinCare_Server,,,,,,,TRUE,FALSE
JPEG'd,ngxl5h,https://jpegd.io/,NOT_DEPIN,ETHEREUM,JPEG,jpeg-d,JPEGd is a decentralized lending protocol enabling businesses to borrow pETH or PUSd using NFTs as collateral.,DeFi,,,https://twitter.com/JPEGd_69,906554976178933840,,https://medium.com/@jpegd,https://github.com/topics/jpeg-decoder,https://www.linkedin.com/company/jpeg,,true,false
JuiceUp,yfg7hd,https://juiceup.network/,ENERGY,PEAQ,,,JuiceUp is a decentralized platform of community-owned power bank stations that enables users to earn passive income through an automated rental system.,,W. L.,,https://x.com/juiceup_network,,,,,,,true,false
JunLaLa,jpm76z,https://junlala.network/,SENSORS,TON,JUN,,"JUNLALA develops Jun Watch, a smart wearable integrating AI and DePIN to securely store users' emotional and health data through encrypted anonymity, ensuring privacy while providing data for AI training and personalized smart assistant features.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/junlalaltd,,,,,,,true,false
Juno,e277dp,https://junonetwork.io/,NOT_DEPIN,COSMOS,JUNO,juno-network,Juno is decentralized network for interoperable apps,,,,https://twitter.com/JunoNetwork,816256689078403103,https://t.me/JunoNetwork,https://medium.com/@JunoNetwork,https://github.com/CosmosContracts,http://www.linkedin.com/company/juno-network,,true,false
Jur,y5mzyr,https://jur.io/,BLOCKCHAIN_INFRA,VECHAIN,JUR,jur,Jur is a Web3 project building a decentralized protocol for the Digital Economy on the Polkadot ecosystem.,,ZZ,,https://twitter.com/JurProject,1012640826742018048,,,,https://linkedin.com/company/jur-network,,true,false
JurnyOn,r1g3pk,,MOBILITY,,,,"JurnyOn AI is a ticketing app for train and bus travel, delivering digital access to Transport for Wales railcards.",,,,,,,,,,,true,false
K3 Labs,3spycf,https://www.k3-labs.com/,BLOCKCHAIN_INFRA,,,,"K3 Labs combines Kubernetes and template-driven web-service deployment for Web3, enabling easy design and deployment of business workflows and applications leveraging decentralized compute, storage, and execution.",,EV3 Sal,,https://twitter.com/k3_labs,,,,,,,true,false
Kadena,ss5p8b,https://kadena.io/,NOT_DEPIN,COSMOS,KDA,kadena,"Kadena is a Layer-1 Proof-of-Work blockchain that scales with Pact, a human-readable smart contract language.",,,,https://twitter.com/kadena_io,502858632178958377,https://t.me/kadena_io,https://medium.com/kadena-io,https://github.com/kadena-io,https://linkedin.com/company/kadena-llc/,,true,false
Kage,z0d4xm,https://kagenetwork.io/,WIRELESS,ETHEREUM,KAGE,,Kage Network is a hardware-based decentralized VPN router and private cloud data storage network that allows users to become nodes in a private cloud storage network and earn rewards.,VPN,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/kagenetwork,,,,,,,true,false
Kaisar,9hscs3,https://kaisar.io/,COMPUTE,ETHEREUM,KAI,,"Kaisar Network is a DePIN protocol optimized for decentralized computing and AI, incentivizing GPU providers and end-users alike.",,ZZ,,https://twitter.com/KaisarNetwork,,,,,,,true,false
Kaito,pgim2q,https://www.kaito.ai/,AI,,,,"Kaito AI is an AI-powered search and recommendation engine for digital assets,",,ZZ,,https://twitter.com/_kaitoai,1062261368809603165,,,,,,true,false
Kalima,3wa5r0,https://www.kalima.io/,BLOCKCHAIN_INFRA,ETHEREUM,KLX,,"Kalima is a layer 1, 3rd generation blockchain made for the IoT industry that enables users to independently govern, manage, and monetize data, build decentralized applications, and create tokens for smart-rewarding systems.",,ZZ,,,968078515926876160,,,,,,true,false
Kalp,b5okyb,https://www.kalp.network/,PENDING,,,,,,EV3 Sal,,,,,,,,,true,false
Kanda Weather,flp6ko,https://www.kandaweather.com/,SENSORS,,,,"Kanda Weather is a weather data network that uses blockchain, LoRaWAN, solar energy, and 3D printing to build a weather balloon IoT radiosonde network.",Environmental,W. L.,,https://twitter.com/kandaweather,859677745860968469,,,,,,true,false
Kandola,8y4g79,https://kandola.network/,COMPUTE,,,,Kandola is a decentralized Chip-to-Cloud IoT Protocol.,IoT,,,https://twitter.com/KandolaNetwork,958002050174709761,https://web.telegram.org/a/,https://medium.com/@KandolaNetwork,,https://www.linkedin.com/company/kandola-network/,,true,false
Kansi,3jrl09,https://www.kansi-solutions.de/,BLOCKCHAIN_INFRA,,,,Kansi Solutions is a DePIN hosting platform offering mining opportunities for end-users to earn passive income.,,ZZ,,https://twitter.com/kanisolutions,,https://t.me/s/kansi_hilfestellung?before=27,,https://github.com/KanisiTech,https://in.linkedin.com/company/kansi-solutions,,true,false
KaratDAO,6ptk5o,https://karatdao.com/,NOT_DEPIN,,KAT,karat,KaratDAO is a revolutionary crypto native engine in Web3 that offers a bilateral service data marketplace that helps users take control of their Web2 and Web3 data while earning rewards.,,ZZ,,,935510554112565248,,,,,,true,false
KarinaAI,fgcxrz,https://karinaai.finance/,AI,SOLANA,KAI,,"Karina AI is a decentralized AI platform that leverages blockchain to provide secure, scalable services for building, executing, and monetizing AI models, featuring AI-powered assistants, smart contract generation, and trading tools.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/thekarinacoin,,,,,,,true,false
Karrier One,j9n1l6,https://karrier.one/,WIRELESS,POLYGON,,,Karrier One is a mobile network company running on decentralized telecom infrastructure.,,W. L.,,https://twitter.com/karrier_one,1003510714666860695,,https://karrier-one.medium.com/celebrating-q1-2023-milestones-expanding-karrier-ones-global-wireless-telecom-network-33977918e52d,,https://www.linkedin.com/company/karrier-one/,,true,false
Kaspa,a2so9v,https://kaspa.org/,NOT_DEPIN,NATIVE,KAS,kaspa,"Kaspa (KAS) is a revolutionary cryptocurrency that stands out as the world's first blockDAG, a digital ledger that enables parallel blocks and instant transaction confirmation.",,,,,599153230659846165,,,,,,true,false
Katzentracker,6t9cvb,https://katzentracker.com/,SENSORS,,,,Katzentracker is a developer of a cat tracker system powered by Helium.,,,,https://twitter.com/katzentracker,,,https://blog.berlintracker.de/,,,,true,false
KebApp,3w1ai8,https://kebapp.club/,SENSORS,SOLANA,KEBABS,,"KEBAPP is a DePIN project on Solana, decentralizing kebab shops and boosting small owners democracy. It uses token rewards for incentivizing supply chain networks, offering decentralized data storage, and rewarding loyalty for RWAs.",,ZZ,,https://twitter.com/KebAppCoin,,,,,,,true,false
Keep Green,uhnsu2,https://www.keepgreen.io/,PENDING,,,,,,ZZ,,https://twitter.com/KeepGreenSOL,,,,,,,true,false
Keet,wskl5g,https://keet.io/,COMPUTE,,,,"Keet is a Peer-to-Peer Chat App, built with the Holepunch platform that allows anyone to create apps that don’t use any servers.",,EV3 Sal,,,985129863348371516,,,,,,true,false
Kenshi,n3l5qj,https://kenshi.io/,BLOCKCHAIN_INFRA,ETHEREUM,KNS,kenshi,"Kenshi is a blockchain company offering services such as Custom Oracle Network, blockchain IoT SDK, Deep Indexing, GraphQL, and Reverse-API (webhooks) on Ethereum, Arbitrum, Aurora, Avalanche, Fantom, Polygon, Bitgert, and the BNB Smart Chain.",,ZZ,,https://twitter.com/KenshiTech,,,,,,,true,false
Kepler Digitals,uxehnk,https://www.keplerdigitals.io/,MOBILITY,AVALANCHE,AVIA,,"Kepler Digitals develops specialized blockchain solutions that connect and secure aviation operations, integrating AI and pNFTs to enhance sustainability, efficiency, and innovation in urban air mobility and asset tracking.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/keplerdigitals,,,,,,,true,false
Kepple,xpng8u,https://kepple.io/,WIRELESS,BINANCE,KPL,kepple,Kepple (previously QLC Chain) brings Web3 features on the BNB Chain to Social Media platforms through an All-In-One Extension,,,,https://twitter.com/kepple_io,,https://t.me/KeppleAnnouncements,https://keppleio.medium.com/,,http://www.linkedin.com/company/qlcchain,,true,false
Kerlink,7bkw67,https://www.kerlink.com/,WIRELESS,,,,"Kerlink is a premier provider of IoT connectivity equipment, software, and services for businesses, cities, industries, and network operators to quickly and easily deploy public and private IoT networks.",IoT,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/kerlink_news,,,,,,,true,false
Ketchup Republic,jktemz,https://gemgemgo.xyz/,SENSORS,,,,Ketchup Republic is a DePIN-driven fog network that allows consumers and merchants to enjoy decentralized peer-to-peer payment and customer loyalty services.,,EV3 Sal,,https://twitter.com/ketchuprepublic,,,,,,,true,false
Keyring,3s01ds,https://www.keyring.network/,PENDING,,,,,,ZZ,,https://twitter.com/KeyringNetwork,920027753900810281,,,,https://www.linkedin.com/company/keyring-network/,,true,false
Khalani,80qryr,https://khalani.network/,BLOCKCHAIN_INFRA,,,,Khalani is the first decentralized solvers platform for intent-driven generative coordination.,,EV3 Sal,,https://twitter.com/khalani_network,1118192786127212578,,,,,,true,false
Kilt,bcanxl,https://www.kilt.io/,BLOCKCHAIN_INFRA,,,,"KILT is a blockchain-based identity platform offering decentralized, secure, and scalable solutions.",,,,https://twitter.com/Kiltprotocol,847445252663148565,,https://kilt-protocol.medium.com/,https://github.com/KILTprotocol,https://in.linkedin.com/company/kilt,,true,false
Kinic,vx3le1,https://kinic.io/,AI,,KINIC,,"Kinic is a dedicated data AI and search engine for web3 content hosted on blockchain or decentralized storage networks, enabling on-chain search, ZKML, and dApp discoverability.",Data,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/kinic_app,,,,,,,true,false
Kino,u1g1gw,https://www.kino.studio/,NOT_DEPIN,,,,KINO aims to make the film/tv industry more equitable for all.,NFTs,,,https://twitter.com/kinomakesmovies,,,https://www.linkedin.com/company/kinomakesmovies/,,,,true,false
Kinode,42vmzf,https://kinode.org/,COMPUTE,,,,Kinode is a decentralized operating system and peer-to-peer app framework that simplifies the development and deployment of dApps by enabling permissionless computing on personal server nodes and clusters.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/KinodeOS,,,,,,,TRUE,FALSE
KIP,wwnksh,https://kip.pro/,AI,,KIP,,"KIP Protocol is the decentralized base layer that AI models, apps, and data owners build on, to safely transact and monetize in Web3.",,,,https://twitter.com/KIPprotocol,1154122622750167100,,,,,,true,false
Kizuna,gvclfq,https://kizunatoken.io/,NOT_DEPIN,ETHEREUM,KIZUNA,kizuna,"Kizuna is a token built from Decentralized AI, inspired by Ryoshi's principles of decentralized maximalism.",,,,https://twitter.com/KizunaToken,,,https://kizunatoken.medium.com/,,,,true,false
KIZZY,tmsb4i,https://www.kizzy.io/,NOT_DEPIN,,,,The first content prediction marketplace.,Prediction Market,,,https://twitter.com/kizzymobile,,,,,,,true,false
Kleo,bzfyw0,https://www.kleo.network/,AI,,KLEO,,"Kleo Network is a Data Liquidity Provider (DLP) for the VANA Protocol, enabling individuals to securely anonymize, govern, and earn from their personal consumption data through AI agents, data marketplaces, and aggregators.",Data,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/kleo_network,,,,,,,TRUE,TRUE
Kleros,z2bo5e,https://kleros.io/,NOT_DEPIN,ETHEREUM,PNK,kleros,Kleros is a decentralized arbitration protocol for disputes in the web3 economy. It relies on game theoretic incentives to have anonymous jurors rule cases correctly.,,ZZ,,,805775179442683904,,,,,,true,false
Klever,xarvqb,https://klever.org/,NOT_DEPIN,,,,A peer-to-peer network for everyone.,,EV3 Sal,,,,,,,,,true,false
KlimaDao,8bbq2m,https://www.klimadao.finance/,ENERGY,POLYGON,KLIMA,klima-dao,"KlimaDAO is building an infrastructure for a transparent, neutral, and public Digital Carbon Market to accelerate climate finance on a global scale.",,,,,841390338324824096,,,,,,true,false
KLON,0r4esj,https://www.klon.ai/,AI,POLYGON,KLON,,"KLON is an Al agent for autonomous digital self-representation, integrated with a decentralized identity suite.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/klon_ai,,,,,,,TRUE,FALSE
Kluster AI,g0sa01,https://kluster.ai/,AI,,,,Kluster AI is a distributed AI platform that empowers developers to run and tune large AI models on a distributed compute grid sourced by GPU providers.,,EV3 Sal,,https://twitter.com/klusterai,,,,,https://www.linkedin.com/company/kluster-ai/,,true,false
KnoxFS,1wbpqo,https://www.knoxfs.com/,COMPUTE,NATIVE,KFX,knoxfs,"Knox Project offers a secure, decentralized data storage solution using blockchain and IPFS, rewarding users with KFX tokens for participation and offering passive income through masternodes.",,ZZ,,,425320914335432719,,,,,,true,false
Koda,7z84do,https://www.koda9.com/,COMPUTE,,,,KODA is the world's first decentralized AI robotic dog with the option to store data on IPFS/Filecoin Network.,,ZZ,,https://twitter.com/KodaRobotDog,,,,,https://www.linkedin.com/company/kodarobot,,true,false
Koii,xfjtib,https://www.koii.network/,BLOCKCHAIN_INFRA,NATIVE,,,Koii is a platform enabling passive income by connecting idle devices to transparent apps and audit systems.,,W. L.,,https://twitter.com/KoiiNetwork,,https://t.me/koiinetwork,https://koii-network.medium.com/,https://github.com/koii-network/,http://www.linkedin.com/company/koii-network,,true,false
Koinos,83tc81,https://koinos.io/,NOT_DEPIN,NATIVE,KOIN,,Koinos is a blockchain network with free-to-use apps and dynamic resource pricing.,,,,https://twitter.com/koinosnetwork,613823471679438898,https://t.me/joinchat/SXe6mLnb8Ssywlq9,https://medium.com/koinosnetwork/tagged/koinos,https://github.com/koinos,http://www.linkedin.com/company/koinosnetwork,,true,false
Komputai,ry3lir,https://komput.ai/,AI,ETHEREUM,KAI,komputai,Komputai is a computing power marketplace leveraging decentralized GPU/TPU resources for AI computation and LLM training.,GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/komput_ai,,,,,,,true,false
Kondukt,1kp1wv,https://kondukt.app/,AI,,KND,,"Kondukt is a decentralized, AI-driven GPU yield optimizer that intelligently allocates GPU resources between Bitcoin mining and powering decentralized LLMs to maximize efficiency and profitability.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/KonduktAi,,,,,,,true,false
Kondux,a3tmez,https://kondux.info/,NOT_DEPIN,ETHEREUM,KNDX,kondux-v2,"Kondux is a virtual design lab for artists, brands, and manufacturers that help bridge creativity & technology together.",,ZZ,,https://twitter.com/Kondux_KNDX,850088387796271154,,,,,,true,false
KonnektVPN,9rn01z,https://www.konnektvpn.com/,WIRELESS,,KPN,,"KonnektVPN is a Next Generation VPN powered and driven by AI to enhance user's digital experience. While users use the app, they help train the AI and earn rewards.",VPN,ZZ,,https://twitter.com/konnektVPN,1168892183068295328,,,,,,true,false
Kontigo,45oymd,https://www.kontigo.lat/,HUMAN_CAPITAL,,,,"Kontigo is developing a blockchain based, automated bank built-in Whatsapp for gig workers in LatAm.",,,,,,,,,,,true,false
Kontos,bf586p,https://kontos.io/,NOT_DEPIN,,,,,,EV3 Sal,,https://x.com/kontosio,,,,,,,TRUE,FALSE
Kosen,6b3lxu,https://www.kosen.ai/,AI,,,,Kosen Labs aims to be at the intersection of AI and web3. Their mission is to bring the benefits of advanced AI to the blockchain space to develop the decentralised future.,,ZZ,,https://twitter.com/kosenlabs,872508100240896052,,https://medium.com/kosenlabs,https://github.com/kosen-labs,https://www.linkedin.com/company/kosenlabs/,,false,false
Krang AI,u1io58,https://krang.ai/,PENDING,,,,,,W. L,,https://x.com/KrangHQ,,,,,,,true,false
Kresko,pks4ee,https://kresko.xyz/,NOT_DEPIN,,,,"Making wealth accessible to anyone, anywhere. An open platform for synthetic stocks, commodities, and crypto.",,,,https://twitter.com/kreskofi,910667307888570458,https://t.me/kreskofi,https://medium.com/kreskofi,https://github.com/kreskohq/,https://www.linkedin.com/company/kreskolabs/,,true,false
krest,tkmyxi,https://krest.peaq.network/,NOT_DEPIN,PEAQ,KREST,krest,Krest is Peaq network's sister network. It is the world's first and only simulation network for DePIN and the Economy of Things.,,,,https://twitter.com/krestnetwork,,,https://www.peaq.network/blog,,,,true,false
Kroo,z1mpcu,https://www.kroo.us/,WIRELESS,,,,"Kroo: 5G rooftop connectivity infra for real estate owners, harnessing power of 5G.",,,,https://twitter.com/KrooBank,,,https://medium.com/kroo,https://github.com/b-social,http://www.linkedin.com/company/kroous,,false,false
Kryptos,os4h8o,https://kryptos.io/,PENDING,,,,,,EV3 Sal,,https://x.com/KryptosConnect,,,,,,,TRUE,FALSE
Kryptview,3zopno,https://kryptview.com/,BLOCKCHAIN_INFRA,NATIVE,KVT,kryptview,Kryptview rewards users for analyzing cryptos using P2P and Blockchain mechanisms.,,,,https://twitter.com/thekryptview,925090445187506217,,https://kryptview.medium.com/,,,,true,false
Kunji,9zg5p3,https://www.kunji.finance/,NOT_DEPIN,ARBITRUM,KNJ,kunji-finance,"Mimik Finance (formerly Kunji Finance) is a decentralized social trading and portfolio management that allows users to mimic expert traders’ portfolios across EVM, BRC-20 and other chains.",DeFi,ZZ,,https://twitter.com/kunjitweets,922736855097679892,https://t.me/+qUmTI8yQNQozNTc1,https://medium.com/@Kunjifinance,,http://www.linkedin.com/company/kunjiofficial,,true,false
Kurobi,j0o171,https://kurobi.io/,HUMAN_CAPITAL,SOLANA,KURO,kurobi,"Kurobi is a blockchain-powered platform that offers borderless opportunities for experts, coaches, mentors, influencers to make money for their time.",,,,https://twitter.com/kurobi_io,1196209056747102268,https://t.me/kurobi_io,https://kurobi.medium.com/,,https://www.linkedin.com/company/kurobi/,,true,false
Kuva,77bx8k,https://kuva.com/,NOT_DEPIN,,,,We believe advanced financial services should be simple and borderless for consumers & businesses.,,,,https://twitter.com/KuvaNet,522509292490719235,https://t.me/kuvanetwork,,,https://www.linkedin.com/company/kuvanetwork/,,true,false
Kuzco,7syzhg,https://kuzco.xyz/,COMPUTE,SOLANA,KZO,,Kuzco is a distributed GPU cluster for LLM inference on Solana.,,EV3 Sal,,https://twitter.com/kuzco_xyz,1100110477599723550,,,,,,true,false
KWAI,4ccixw,https://kwailabs.com/,AI,BINANCE,KWAI,kwai,"KWAI develops AI-powered smart assistant for Web3. Offers tools for crypto swapping, staking, and market tracking.",,,,https://twitter.com/kwai_labs,,https://t.me/kwai_labs_announcement,https://kwailabs.medium.com/,,,,true,false
Kwil,9xue69,https://www.kwil.com/,BLOCKCHAIN_INFRA,,,,Kwil is a permissionless SQL database for the decentralized internet.,Data,,,https://twitter.com/KwilTeam,819855804554543114,,https://medium.com/kwildb,https://github.com/kwilteam,http://www.linkedin.com/company/kwilteam,,true,false
Kwill,o0n1qq,https://www.kwil.com/,COMPUTE,,,,"Kwil is a decentralized, community-owned SQL database solution for building advanced dApps and protocols.",,ZZ,,https://twitter.com/KwilTeam,,,,,,,true,false
KYVE,u6mo76,https://www.kyve.network/,BLOCKCHAIN_INFRA,COSMOS,KYVE,kyve-network,"KYVE provides next gen data management solutions, unlocking next-level scalability for blockchains and rollups.",Data,ZZ,,https://twitter.com/KYVENetwork,817113909957361664,https://t.me/kyvenet,https://kyve.medium.com/,https://github.com/KYVENetwork,http://www.linkedin.com/company/kyve,,true,false
LabDAO,8w0zbp,https://www.labdao.xyz/,SCIENCE,,,,LabDAO is an online life science research collective that provides and uses open tools and infrastructure for computational life science projects.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/lab_dao,,,,,,,true,false
LABEL Foundation,rmq528,https://label.foundation/,NOT_DEPIN,ETHEREUM,LBL,label-foundation,"LABEL has developed the world's first platform that includes a Listen-And-Earn mechanism, TRACKS, for the Web 3.0 music platform ecosystem.",,,,,991242808818159758,,,,,,true,false
Lagrange,romv3v,https://www.lagrange.dev/,NOT_DEPIN,,,,The Lagrange Protocol is a cross-chain infrastructure that enables the creation of generalized state proofs across all major blockchains.,ZK,ZZ,,https://twitter.com/lagrangedev,,,,,,,true,false
Laika,i2hs36,https://www.laika-ai.io/,PENDING,,,,,,ZZ,,https://twitter.com/laika_ai,1135794443757301830,https://t.me/Laikaaiofficial,,,,,true,false
LAK3,4y3k4h,https://lak3.io/,RWA,ETHEREUM,LAK3,,LAKE is an RWA ecosystem that leverages blockchain technology to decentralize the water industry.,,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/lake_lak3,,,,,,,true,false
Lake,cpzurk,https://lakenetwork.io/,COMPUTE,,LNT,,"Lake is a Decentralized storage for DApps and Blockchains that incentivizes users to provide Storage and Bandwidth. ",Storage,ZZ,,https://twitter.com/_lakenetwork,,https://t.me/lakenetwork,,,http://www.linkedin.com/company/lakenetwork,,true,false
Lambda,129gin,https://lambda.im/,COMPUTE,,,,Decentralized Storage 3.0 Evolution - LWS Modular Storage Network,Storage,W. L.,,,998081240697679924,,,,,,true,false
Landshare,v4pxv7,https://www.landshare.io/,NOT_DEPIN,BINANCE,LAND,landshare,"Landshare turns real-world properties into asset-backed, yield-bearing, and fully tradeable asset tokens on the Binance Smart Chain.",,ZZ,,,,,,,,,true,false
LandX,fz4zvo,https://landx.fi/,RWA,ETHEREUM,LNDX,landx-governance-token,LandX is the first global decentralized RWA platform for investing and trading farmland and agricultural commodities.,,ZZ,,https://x.com/landxfinance,,,,,,,true,false
Lanify,2sr2vy,https://www.lanify.ai/,AI,ETHEREUM,LAN,lanify,"Lanify is a browser extension that allows users to monetize their internet connection by selling unused network resources in real-time. It acts as a decentralized gateway to the public web, providing access to essential data for training AI models.",,ZZ,,https://twitter.com/LanifyAI,1210272098803781643,,,,,,true,false
Latitude,n0489d,https://www.latitude.sh/,COMPUTE,,,,"Latitude.sh is provider of a network that allows developers to deploy and manage GPU and CPU servers globally and easily. ",,,,https://twitter.com/latitudesh,,,https://www.latitude.sh/blog,https://github.com/latitudesh,https://www.linkedin.com/company/22318494/,,true,false
Lava,jq8mvz,https://www.lavanet.xyz/,BLOCKCHAIN_INFRA,,,,Lava is a modular data access (RPC & indexing) layer for rollups and blockchains.,RPC/Indexing,ZZ,,,963778337904427018,,,,,,true,false
Lavita.AI,tylsdp,https://www.lavita.ai/,AI,NATIVE,LAVITA,lavita,"LAVITA is a blockchain and AI based next generation healthcare platform, that enables the use of massive biomedical datasets for research while preserving individual privacy and ownership of data.",Health,ZZ,,https://twitter.com/LavitaAI,1041587307419017246,https://t.me/Lavita_AI,https://lavita-ai.medium.com/,,http://www.linkedin.com/company/lavita-ai,,true,false
Law Blocks,22i2z3,https://www.lawblocks.io,HUMAN_CAPITAL,XDC,LBT,law-blocks,"Law Blocks AI is a decentralized legal tech platform that leverages AI and blockchain to streamline legal document creation and management, offering digital signatures, alternate dispute resolution, and a lawyer marketplace.",Legal,0x395aB080688983b5a2F203B49cE44D66b30360AB,,https://x.com/lawblockstoken,,,,,,,TRUE,FALSE
Lay3rs,pwkpga,https://lay3rs.io/,AI,ETHEREUM,LAY,,"Lay3rs is a decentralized platform integrating blockchain and AI to create, manage, and monetize AI materials. Their first product is Build3rs, a Web3 crowdfunding platform for preserving historic monuments with a catalog of 3D models.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/lay3rsxr,1047840279119544392,https://t.me/lay3rs_announcements,https://medium.com/@Lay3rsXR,,https://www.linkedin.com/company/lay3rs-xr/,,true,false
Layer N,nvisfm,https://www.layern.com/,NOT_DEPIN,,,,"Layer N is an Ethereum StateNet—A novel L2 designed as a network of custom VMs, called XVMs, powered by a shared communication and liquidity layer.",,,,,1038972328828219462,,,,,,true,false
LayerAI,y3zupj,https://layerai.org/,AI,ETHEREUM,LAI,cryptogpt-token,"LayerAI is a blockchain for AI dev, providing layer-2 solution for efficient and secure applications.",,,,https://twitter.com/LayerAIorg,1158724762726584361,https://t.me/LayerAI_org,https://layeraiorg.medium.com/layerai-the-technology-ecosystem-for-the-data-first-age-8ffe4f25e236,,http://www.linkedin.com/company/layeraiorg,,true,false
LayerEdge,xqianc,https://www.layeredge.io/en,PENDING,,,,,,EV3 Sal,,https://x.com/layeredge,,,,,,,TRUE,FALSE
LayerNet,mhypx1,https://layernet.ai/,AI,,,,LayerNet builds a decentralized AI ecosystem to empower native blockchain infrastructure and applications.,,ZZ,,https://twitter.com/layernet_ai,,,,,,,true,false
LayerZero,cpd9pq,https://www.layerzero.io/,BLOCKCHAIN_INFRA,,,,LayerZero builds DeWi infrastructure in LA.,,,,,,,,,,,true,false
LBRY,jn69a0,https://lbry.com/,COMPUTE,NATIVE,LBRY,lbry-credits,"LBRY protocol is a decentralized network for content sharing and publishing. It enables users to access, publish, and share digital content without intermediaries, ensuring creators and consumers maintain control over their content and data.",,ZZ,,,362322208485277697,,,,,,true,false
LBS,elto7m,https://lbschain.org/,BLOCKCHAIN_INFRA,NATIVE,LBS,,"LBS Chain is a Layer 3 blockchain designed for location-based services, empowering developers to build affordable Web3 Dapps while enabling users to contribute to and profit from location data.",,ZZ,,https://twitter.com/lbschain,,,,,,,true,false
Leap,3w2wtc,https://www.leap.energy/,ENERGY,,,,Leap is the leading global platform for generating new value from grid-connected resources and devices through integration with energy markets.,,ZZ,,https://twitter.com/leapdex,,,https://www.leap.energy/blog,,https://www.linkedin.com/company/18116834/,,true,false
LENA,2qzmdn,https://www.lena.network/,NOT_DEPIN,,,,"LENA: Web3 liquidity provider for NFT lending and borrowing. ETH pools, user autonomy.",,,,https://twitter.com/LENA_Network,1003197622665879562,,https://medium.com/@LENA_Network,,http://www.linkedin.com/company/lena-network,,true,false
Lendr,z0hk5p,https://lendr.network/,RWA,NATIVE,LNDR,,"Lendr Network is a fully decentralized RWA tokenization protocol creating RWA tokens representing a variety of asset classes enabling investors to diversify their holdings, avoid inflation, and use real-world assets in DeFi.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/lendrnetwork,,https://t.me/lendrnetwork,https://lendr.medium.com/,,,,true,false
Lendwill,xofl5l,https://lendwill.com/,NOT_DEPIN,,,,"Lendwill is a sharing economy app where people invest money in each other, all while building a verifiable credit history on the blockchain.",DeFi,ZZ,,https://twitter.com/lendwill,,,,,https://www.linkedin.com/company/lendwill/,,true,false
Lepasa,99w0lz,https://www.lepasa.com/,COMPUTE,TON,LEPA,,"Lepasa is a decentralized GPU infrastructure and innovative Web3 solution, enhancing virtual environments with real-time 3D rendering, scalable server management, and blockchain-integrated security.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/lepasaorg,,,,,,,true,false
Lever,2xb653,https://www.lever.io/,HUMAN_CAPITAL,,,,"Lever is a Web3 influencer marketplace that offers an easy-to-use, all-in-one platform that makes booking influencers safe, quick, and easy for brands and creators alike.",,EV3 Sal,,,,,,,,,true,false
Leviatom,wfygoz,https://www.leviatom.network/,COMPUTE,NATIVE,LVT,,"Leviatom is a high-performance decentralized cloud computing infrastructure network designed to empower the functionality of Web 3.0 and Web 2.0 applications, offering inherent support for data connectivity on-chain and off-chain.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/LeviatomNetwork,,,,,,,true,false
Lexi AI,9crbiu,https://lexiai.tech/,PENDING,,,,,,ZZ,,https://x.com/LexiAIETH,,,,,,,true,false
LFIT,endvub,https://lfit.io/,HUMAN_CAPITAL,POLYGON,LFIT,,"LFIT is a blockchain-powered healthcare platform that securely manages medical data, offers personalized healthcare services, and integrates an ecosystem for insurance, data monetization, and health-focused crypto rewards.",Health,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/LifespanFIT,,,,,,,TRUE,FALSE
Libera Global AI,ddedsb,https://liberaglobal.ai/,PENDING,,,,,,EV3 Sal,,https://x.com/LIBERA_GLOBALAI,,,,,,,true,false
Libertai,c1lms4,https://libertai.io/,AI,,,,"Libertai is a decentralized artificial intelligence assistant that operates without a centralized server, allowing for increased privacy and security and employs machine learning algorithms for improved language processing capabilities.",,ZZ,,https://twitter.com/Libertai_DAI,,,,,,,true,false
Liberte,c6hicp,,COMPUTE,,,,Liberte is a DePIN compute framework for on-chain games.,Gaming,,,,,,,,,,true,false
libp2p,hsbb4a,https://libp2p.io/,BLOCKCHAIN_INFRA,,,,"libp2p is a modular system of protocols, specifications, and libraries that enable the development of peer-to-peer network applications.",,ZZ,,https://twitter.com/libp2p,,,https://blog.libp2p.io/,https://github.com/libp2p,https://www.linkedin.com/company/protocollabs/,,true,false
LIFE Network,8aa0dm,https://www.lifenetwork.ai/,SCIENCE,,,,"LIFE Network is a privacy-first, AI-powered blockchain for the mass adoption of DeSci. It allows users to earn rewards by taking control of their genetic data while empowering researchers and companies with effortless data access.",,EV3 Sal,,https://twitter.com/LifeNetwork_AI,,,,,,,true,false
Life,olep9m,https://lifeprotocol.org/#/home,SCIENCE,,,,"Life Protocol is a DeSci-focused fhEVM network for verified humanity, offering a universal biometric verification system powered by DNA and secured by Fully Homomorphic Encryption (FHE).",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/life_protocol,,,,,,,true,false
LifeCall,sgwrn0,,PENDING,,,,,,ZZ,,https://x.com/lifecall_xyz,,,,,,,true,false
Lifechain,nihfn5,https://www.lifechainfoundation.com/chain,PENDING,,,,,,EV3 Sal,,,,,,,,,true,false
Light,ndq38r,https://lightprotocol.com/,NOT_DEPIN,,,,"Light is a protocol on Solana introducing ZK compression, enabling secure scaling of state directly on L1, and supporting custom ZK compute for advanced computation designs.",ZK,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/lightprotocol,,,,,,,true,false
Lighthouse,24l8zf,https://www.lighthouse.storage/,COMPUTE,,,,Lighthouse is a permanent file storage protocol allowing one-time payment for storing files forever.,,,,https://twitter.com/lhediscovery,920900030771109908,https://t.me/LighthouseStorage,,https://github.com/GoogleChrome/lighthouse,https://www.linkedin.com/company/lighthouse-global/,,true,false
LikeMe,o0rqtl,https://likemecoin.com/,NOT_DEPIN,BINANCE,LMC,,"LikeMe is a decentralized social media platform leveraging blockchain technology to provide secure, transparent, and user-centric interactions with full control over data and digital assets.",Social,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/LikeMeCoin,,,,,,,true,false
lilAI,4orxub,https://lilai.co/,AI,ARBITRUM,LILAI,lilai,"lilAI is an AI powered, smart automated community management solution built on Arbitrum.",,,,,,,,,,,true,false
LILLIUS,1gej83,https://www.lillius.net/,HUMAN_CAPITAL,POLYGON,LLT,lillius,"LILLIUS is an app-based Web3 sports challenge platform that uses AI motion recognition and blockchain technology to reward users for completing workouts and challenges, creating a global sports ecosystem.",Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/lilliusofficial,,,,,,,TRUE,FALSE
Lilypad,2hvgy5,https://lilypad.tech/,COMPUTE,,,,"Lilypad develops a trustless, distributed compute network that enables internet-scale data processing, AI, ML & other arbitrary computation from blockchains while unleashing idle processing power & unlocking a new marketplace for computing.",,EV3 Sal,,,1212897693450641498,,,,,,true,false
LimeWire,ubt5kj,https://limewire.com/,AI,ETHEREUM,LMWR,limewire,"LimeWire is an AI-powered content publishing platform that allows users to create, publish, and monetize images, videos, and music with the power of AI. ",,ZZ,,,933277850004508702,,,,,,true,false
Linea,xg7vy5,https://linea.build/,NOT_DEPIN,,,,Linea is an EVM-equivalent zk-rollup for scaling Ethereum dapps.,ZK,ZZ,,,,,,,,,true,false
Linera,avq9ep,https://linera.io/,NOT_DEPIN,,,,Linera is a Blockchain Infrastructure for Highly Scalable Web3 Applications that give users their own blockspace with microchains.,,,,https://twitter.com/linera_io,984941796272521226,https://t.me/linera_official,https://medium.com/@linera,,https://www.linkedin.com/company/linera-io/,,true,false
LingoAI,8mqjwd,https://lingoai.io/,AI,,,,"LingoAI is a decentralized multilingual data platform for AI, featuring LingoPod, a Web3.0 AI Agent that leverages transformer large language models to revolutionize communication between humans and machines, and among people of different languages.",,EV3 Sal,,https://twitter.com/LingoAI_io,1105875394462228530,https://t.me/lingoaitech,https://medium.com/@lingoai,,,,true,false
LinqAI,v539fk,https://linqai.com/,PENDING,ETHEREUM,LNQ,linqai,,,ZZ,,https://twitter.com/linq_ai,,,,,,,true,false
Lit,cv1odr,https://www.litprotocol.com/,COMPUTE,,,,"Lit Protocol is an autonomous cloud network for decentralized signing, encryption, and compute.",,ZZ,,https://twitter.com/LitProtocol,896185694857343026,,,,,,true,false
Lithium,iggqt8,https://lith.finance/,AI,ETHEREUM,LITH,lithium-finance,"Lithium Finance is the first decentralized protocol to harness the power of AI and crowd wisdom. Fundamentally, Lithium Finance uses machine learning algorithms to evaluate historical market data and to identify potential data issues.",,ZZ,,,905903292926808145,,,,,,true,false
LiveMind,yeobvh,https://livemind.ai/,AI,,,,"LiveMind.ai is an AI-powered platform designed to help businesses, creatives, and agencies transform their operations with innovative AI technology.",,EV3 Sal,,,,,,,,,true,false
Livepeer,0dpzm4,https://livepeer.org/,COMPUTE,ETHEREUM,LPT,livepeer,Livepeer is a decentralized network for video encoders and streamers.,,W. L.,,https://twitter.com/livepeerorg,423160867534929930,,https://medium.com/livepeer-blog,,http://www.linkedin.com/company/livepeer,,true,false
LM Studio,vh0qps,https://lmstudio.ai/,AI,,,,LM Studio allows users to run local/open LLMs on their computers.,,,,https://twitter.com/LMStudioAI,1110598183144399058,,,https://github.com/lmstudio-ai,,,true,false
Lmao,4sx681,https://lmao.fun/,PENDING,,,,,,vkurup.eth,,https://x.com/lmaohq,,,,,,,true,false
LocalPro,0pgbgt,https://www.getlocalpro.xyz/,BLOCKCHAIN_INFRA,,,,"LocalPro: gamifies experiences, promotes trust, quests, badges, rewards, enhances skills, incentivizes collaboration.",Loyalty,,,https://twitter.com/localpro_,,,,,https://www.linkedin.com/company/localpro-x,,true,false
Lofty,a0pcew,https://www.lofty.ai/,NOT_DEPIN,,,,Lofty is a fractional real estate marketplace that consists of buyers (token investors) and sellers (people who want to sell their properties).,,,,,,,,,,,true,false
Log Store,bs5j3i,https://www.usher.so/technology/,BLOCKCHAIN_INFRA,ETHEREUM,LSAN,,"The Log Store Network is a decentralized, time-series database specializing in high-frequency, time-indexed cryptographic attestations, facilitating real-time data collection through a peer-to-peer data transport layer.",,ZZ,,https://twitter.com/usher_web3,,,,,,,true,false
Logion,p1vtxx,https://www.logion.network/,NOT_DEPIN,,LGNT,,Logion is a pioneering blockchain platform that transforms tokens into legal-grade digital assets.,,,,,786689460178911273,,,,,,true,false
Logos,dojvzb,https://logos.co/,BLOCKCHAIN_INFRA,,,,"Logos provides trust-minimized, corruption-resistant governing services and institutions for citizens.",Legal,ZZ,,https://twitter.com/Logos_state,,,,https://github.com/logos-co,https://linkedin.com/company/logos-internet-marketing-experts,,true,false
LogX,c9gt14,https://www.logx.trade/,NOT_DEPIN,,,,,Prediction Market,EV3 Sal,,https://x.com/LogX_trade,,,,,,,TRUE,FALSE
Loke,6b4f0x,https://getloke.com/,NOT_DEPIN,,LOKE,,Loke is a gamified social layer for action sports.,,EV3 Sal,,https://twitter.com/getloke,,,,,,,true,false
LongFi,nbam9o,https://www.longfisolutions.com/,WIRELESS,,,,LongFi Solutions: Decentralized Infrastructure for community connectivity,,,,https://twitter.com/LongFiSolutions,,,,https://github.com/topics/longfi,https://www.linkedin.com/company/longfisolutions/,,true,false
Loom,el7s07,https://loomx.io/,NOT_DEPIN,ETHEREUM,LOOM,loom-network-new,"Loom Network is a production-ready, multichain interoperability platform that enables developers to launch high-performance dapps with seamless UX across multiple blockchains.",,ZZ,,https://twitter.com/loomnetwork,,https://t.me/loomnetwork,https://medium.com/loom-network,https://github.com/loomnetwork,https://www.linkedin.com/company/loom-network/,,true,false
Loop,t38une,https://www.theloopnetwork.org/,NOT_DEPIN,BINANCE,LOOP,loopnetwork,Loop is a Layer-1 crypto ecosystem to address scalability in smart contracts.,L1/L2,,,https://twitter.com/loopnetwork3,,https://t.me/loopnetwork,,,,,true,false
Loot Labs,9h7vrf,,PENDING,,,,,,EV3 Sal,,,,,,,,,TRUE,FALSE
Lotus,8lf7at,https://docsend.com/v/hy9yw/lotus-deck-wo-nda,PENDING,,,,Decentralized Security and Data Ownership for Edge Devices,,EV3 Sal,,,,,,,,,TRUE,FALSE
Lox Network,noieih,https://loxnetwork.co.uk/,WIRELESS,,LOX,lox-network,Lox Network provides the world’s first global IMEI blacklist database for smartphone crime using blockchain. Their project is designed to target and dismantle the phone theft industry through a decentralized blacklist.,,ZZ,,https://twitter.com/LoxNetwork,,,,,,,true,false
Loxodrome,vvesfw,https://loxodrome.xyz/,NOT_DEPIN,,,,"Loxodrome is a pioneering DePIN-Focused Dex on the IoTeX, establishing itself as the first native liquidity marketplace focused on DePIN.",,ZZ,,,1190209193039380501,,,,,,true,false
LTA Labs,cuwbq1,https://ltalabs.io/,NOT_DEPIN,,,,"LTA Labs aims to enhance global financial freedom and self-sovereignty through smartphone-accessible solutions, leveraging cryptography, AI, and advanced blockchain technologies.",,EV3 Sal,,https://twitter.com/LTALabs_,,,,,,,true,false
LTHN,5is0s2,https://lthn.org/,PENDING,,,,,,EV3 Sal,,https://x.com/lithium_network,,,,,,,true,false
LTO Network,tny0s0,https://www.ltonetwork.com/,NOT_DEPIN,ETHEREUM,LTO,lto-network,"LTO Network is a Layer 1 blockchain with a Public and Private layer to bridge the gap between real-world and digital ownership, decentralized identities, and privacy.",,ZZ,,,,,,,,,true,false
Lucres,rnzg6l,https://lucres.com/,PENDING,,,,,,EV3 Sal,,https://x.com/lucresnetwork,,,,,,,TRUE,FALSE
LUKSO,saeow6,https://lukso.network/,NOT_DEPIN,ETHEREUM,LYX,lukso-token,"LUKSO is a next-generation EVM blockchain based on Casper PoS that aims to revolutionize the way brands, creators, and users interact with blockchain technology in the New Creative Economy.",,,,,359064931246538762,,,,,,true,false
Luma Protocol,1gblon,https://www.lumaprotocol.com/,SCIENCE,SOLANA,LUMA,,Luma Protocol is a DePIN-focused Dex on Solana.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/luma_protocol,,,,,,,true,false
Lumerin,f0vw9s,https://lumerin.io/,BLOCKCHAIN_INFRA,ETHEREUM,LMR,lumerin,"Lumerin is an open-source foundational layer utilizing smart contracts to facilitate decentralized P2P trading of Bitcoin hashpower, while also expanding to allocate AI compute power, enable novel applications on DePIN, and the tokenization of RWAs.",,,,https://twitter.com/hellolumerin,875744643378200577,,,,,,true,false
Lumino,3ttk4l,https://www.luminolabs.ai/,COMPUTE,,,,Decentralized GPU network built on Filecoin,,EV3 Sal,,,,,,,,,true,false
Lumishare,6s00n5,https://lumishare.io/,ENERGY,BINANCE,LUMI,lumishare,"LumiShare, powered by $LUMI, is a financial blockchain ecosystem focused on tokenizing renewable energy assets through its NFT Marketplace.",,ZZ,,,,,,,,,true,false
Lumoz,x60254,https://lumoz.org/,BLOCKCHAIN_INFRA,,,,Lumoz is a Modular Compute Layer and ZK-RaaS platform that utilizes a PoW mining mechanism to provide ZKP arithmetic for ZK-Rollup.,,ZZ,,https://twitter.com/LumozOrg,,,,,,,true,false
Lunyr,74rmzw,https://lunyr.com/,BLOCKCHAIN_INFRA,ETHEREUM,LUN,lunyr,"Lunyr is an Ethereum-based decentralized crowdsourced encyclopedia that rewards users with app tokens for peer-reviewing and contributing information, aiming to become the go-to source for reliable data and enable future technologies like AI, VR, and AR.",,ZZ,,https://twitter.com/LunyrInc,365609106863816704,https://t.me/lunyrcommunity,https://medium.com/lunyr,,https://www.linkedin.com/company/lunyr/about/,,true,false
Lyfelynk,iqrb82,https://lyfelynk.in/,BLOCKCHAIN_INFRA,,,,"LyfeLynk is a blockchain-based platform providing secure, user-controlled health data storage, personalized health insights, and opportunities to monetize health data.",Data,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/lyfelynk,,,,,,,true,false
Lynq,jq8ero,https://lynqnetworks.com/,WIRELESS,,,,"Lynq enables innovators to design high-value products with infrastructure-free, long-range, and secure network connectivity through their software that can be integrated into any device, starting with drones, two-way radios, and mobile phones.",,,,https://twitter.com/lynqnetworks,,,,,https://www.linkedin.com/company/lynqnetworks/,,true,false
Lyzis Labs,hffbvt,,NOT_DEPIN,,,,Lyzis Labs is an incentive-driven and democratic protocol built upon a decentralized online marketplace based on blockchain technology.,,ZZ,,https://twitter.com/lyzislabs,984133538427338772,https://t.me/lyzislabsoff,https://medium.com/@lyzislabsofficial,,https://www.linkedin.com/company/lyzis-labs/about/,,false,false
M^ZERO,oane9t,https://www.m0.org/,NOT_DEPIN,,,,M^0 is decentralized money middleware that allows institutions to issue cryptodollars.,,ZZ,,https://twitter.com/m0foundation,,,,,https://www.linkedin.com/company/m-zero-labs/,,true,false
M3tering,ae6gb1,https://m3tering.whynotswitch.com/,ENERGY,GNOSIS,SLX,,M3tering incentivizes solar energy investment for underserved regions.,,ZZ,,https://twitter.com/whyNotSwitch,1128564139472736296,,,https://github.com/M3tering,http://www.linkedin.com/company/whynotswitch,,true,false
Macha,4i6mkb,https://macha.ai/,BLOCKCHAIN_INFRA,,,,Macha is a private and secured AI-powered search infrastructure for interoperable web powered by Data SDK.,,EV3 Sal,,https://twitter.com/macha0x,,,,,,,true,false
Magicblock,i15p9n,https://www.magicblock.gg/,BLOCKCHAIN_INFRA,,,,Magicblock is an open-source stack that enables anyone to build and play on-chain games on Solana & SVM,,,,,943797222162726962,,,,,,true,false
Magie,hoxww0,,NOT_DEPIN,,,,Magie aims to be a customer-aligned financial platform that starts with a WhatsApp-based payment assistant for power users and evolves into a network leveraging Open Finance and tokenization to offer competitive financial products and shared ownership.,DeFi,EV3 Sal,,https://twitter.com/dgntec,,,,,,,true,false
Magna,zbf95j,https://www.magna.so/,PENDING,,,,,,vkurup.eth,,https://x.com/magna_digital,,,,,,,true,false
MagnetAI,1yb2sw,,AI,,,,"Magnet AI is a scalable, permissionless and cost-efficient platform for accessing compute power for inference.",GPUs,,,,,,,,,,true,false
Magneto HR,vqx6fd,https://magnetohr.com/,HUMAN_CAPITAL,,MAGNETO,,"Magneto HR is a decentralized recruiting platform powered by AI and DePIN, offering secure, efficient job matching while rewarding candidates and companies with tokens for platform participation.",Labor,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/magnetohr,,,,,,,true,false
MAI3,m6vq5r,https://www.mai3.io/,BLOCKCHAIN_INFRA,NATIVE,MAI3,,"MAI3 is a Web3 Game Collaborative Platform that optimizes the entire game development process with advanced AI and blockchain technology and connects users, creators, and game developers within the Web3 ecosystem.",Gaming,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/miracleai_3,,,,,,,true,false
MaidSafeCoin,ubmhxr,https://maidsafe.net/,COMPUTE,ETHEREUM,EMAID,maidsafecoin,MaidSafeCoin is a decentralized data network built on autonomous principles for secure and efficient data-sharing.,,W. L.,,https://twitter.com/maidsafe,1209059621319221268,https://t.me/safenetwork,https://medium.com/safenetwork,https://github.com/maidsafe/maidsafe.net,https://www.linkedin.com/company/maidsafe/about/,,true,false
MailZero,jmf0vl,https://www.mailzero.network/,BLOCKCHAIN_INFRA,,MAIL,,MailZero is a decentralized mail protocol enabling Web2 to Web3 interoperability where users earn tokens by engaging on the MailZero omnichain social protocol.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/mailzeronetwork,,,,,,,true,false
MammothAI,4gt6gm,https://www.mammothai.io/,PENDING,,,mammothai,,,ZZ,,https://twitter.com/mammothai_,,https://t.me/Mammoth_AI,,,,,true,false
Mamori,gbih6w,https://mamori.xyz/,BLOCKCHAIN_INFRA,,,,"Mamori is an ML-enabled pathfinder for blockchain value extraction, applicable to zero-day economic exploits, MEV searching, and intent solving, addressing the challenges of scalability, automation, exploit detection relevance, and efficacy.",,vkurup.eth,,https://mobile.x.com/mamori_xyz,,,,,,,true,false
Mandala Chain,wwsvwb,https://www.mandalachain.io/,BLOCKCHAIN_INFRA,NATIVE,KPG,,Mandala Chain is a hybrid layer 1 blockchain where Government & Enterprise Applications Integrate Seamlessly with Public & Retail Applications.,L1/L2,EV3 Sal,,https://twitter.com/MandalaChain,,,,,,,true,false
Mande,f3629t,https://www.mande.network/,BLOCKCHAIN_INFRA,,,,Mande is a decentralized reputation & credibility network.,,,,https://twitter.com/MandeNetwork,953348696098103366,,https://www.linkedin.com/company/mande-chain/,,,,true,false
Mangata,k4jlda,https://www.mangata.finance/,NOT_DEPIN,,,,"Mangata is a multi-rollup interchain infrastructure that allows users to trade any token, from any chain. Their goal is to build the world's first true interchain trading app using multi-chain ZK rollup technology.",,,,,776977650907480074,,,,,,true,false
Manta,m3djiu,https://manta.network/,NOT_DEPIN,POLKADOT,MANTA,,Manta Pacific is the first EVM-equivalent ZK-application platform that is scalable and secure through Celestia DA and Polygon zkEVM.,,ZZ,,https://twitter.com/mantanetwork,795390654628102165,https://www.t.me/mantanetworkofficial,https://mantanetwork.medium.com/,https://github.com/manta-network,https://www.linkedin.com/company/mantanetwork,,true,false
MANTRA,jnhaaq,https://www.mantrachain.io/,RWA,ETHEREUM,OM,mantra-dao,"MANTRA is a Security First RWA Layer 1 Blockchain, capable of adherence to real world regulatory requirements.",L1/L2,ZZ,,https://twitter.com/MANTRA_Chain,821988232538357761,https://t.me/MANTRA_omniverse,https://mantraomniverse.medium.com/,,https://www.linkedin.com/company/mantraomniverse/,,true,false
Maple,622qp6,https://www.maple.finance/,BLOCKCHAIN_INFRA,ETHEREUM,MPL,maple,Maple Finance is an institutional capital marketplace powered by blockchain technology focused exclusively on serving Institutional and Individual Accredited Investors with high-quality lending opportunities.,,ZZ,,,,,,,,,true,false
Mapmetrics,lp6ty8,https://mapmetrics.org/,MOBILITY,SOLANA,MMAPS,mapmetrics,Mapmetrics is a web3 navigation app that rewards users with tokens and NFTs.,,ZZ,,https://twitter.com/MapMetrics,900389466781401098,,,https://github.com/MobileRoboticsSkoltech/map-metrics,https://nl.linkedin.com/company/mapmetrics,,true,false
Mappasaurus,97s7op,https://mappasaurus.com/,SENSORS,,MAPPA,,"Mappasaurus is a decentralized navigation app that uses fully proofed, state-of-the-art AI-based software and DePIN to create real-time, detailed maps, incentivizing users to collect on-road data while ensuring privacy.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/mappasaurus,,,,,,,true,false
Mapping,lpepsn,https://mappingnetwork.ca/,SENSORS,,,,"Mapping Network is a Canadian distributor for Helium Hotspot, Miners, and LoRaWAN Accessories.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/mappingnetworks,,,,,,,TRUE,TRUE
MAPS,dp6jkl,https://maps.me/,NOT_DEPIN,SOLANA,MAPS,maps,Maps.me 2.0 aims to be the ultimate travel companion app that provides both online and offline maps while offering DeFi functionalities.,,ZZ,,,,,,,,,true,false
Marina,b6dsog,https://marina-protocol.com/,BLOCKCHAIN_INFRA,BINANCE,SURF,,"Marina Protocol is an app-based Global Web 3 tutorial platform, providing users new to blockchain and Web 3 with easy-to-use content and advanced interfaces for activities like mining, staking, launchpads, and transfers.",,ZZ,,https://twitter.com/MARINA_PROTOCOL,,,,,,,true,false
Marlin,7ipv0f,https://www.marlin.org/,COMPUTE,ETHEREUM,POND,marlin,Marlin is an open-source project aimed at scaling peer-to-peer platforms by optimizing the communication between nodes(incentivized libp2p).,,ZZ,,,,,,,,,true,false
Maro,q8qiuw,https://ma.ro/,NOT_DEPIN,ETHEREUM,MARO,maro,Developer of a token-incentivized social networking protocol designed to create blockchain-decentralized applications and promotions.,,,,,,,,,,,true,false
Masa,dahm7v,https://www.masa.ai/,COMPUTE,AVALANCHE,MASA,,"Masa is building a Decentralized Google, an open, secure, and incentivized economy for the world’s personal data.",ZK,,,https://twitter.com/getmasafi,https://discord.gg/masafinance,https://t.me/masafinance,https://medium.com/masa-finance,https://github.com/masa-finance/,https://www.linkedin.com/company/masa-network/,,true,false
Mask,ub9kgi,https://mask.io/,NOT_DEPIN,ETHEREUM,MASK,mask-network,"Mask Network is a protocol that allows users to seamlessly send encrypted messages, cryptocurrencies, and DApps (Defi, NFTs, DAO) over the top of social networks without migrating, thereby creating a decentralized Applet(DApplet) ecosystem.",,EV3 Sal,,https://twitter.com/realMaskNetwork,,,,,,,true,false
MASQ,0ezngt,https://www.masqbrowser.com/,WIRELESS,ETHEREUM,MASQ,masq,"MASQ is a private Web3 Browser, Decentralized Multihop-VPN, dApp Store, and earning ecosystem that aims to make Web3 anonymous and private.",VPN,ZZ,,https://twitter.com/MASQ_ai,800920941861404733,https://t.me/MASQ_ai,https://medium.com/masq-project,https://github.com/MASQ-Project,https://linkedin.com/company/masqproject,,true,false
Massa,10vi0m,https://massa.net/,NOT_DEPIN,NATIVE,MASSA,massa,Massa is a blockchain based on a multithreaded technology that supports more than 10'000 transactions per second in a fully decentralized network with thousands of nodes.,,ZZ,,https://twitter.com/massalabs,828270821042159636,https://t.me/massanetwork,https://massalabs.medium.com/,https://github.com/massalabs/massa,https://www.linkedin.com/company/massa-labs/,,true,false
Massive,s4glrh,https://www.joinmassive.com/,COMPUTE,,,,Massive is an SDK enabling developers to offer premium content to users by leveraging their unused processing power.,,ZZ,,,,,,https://github.com/topics/massive,https://www.linkedin.com/company/massive/about/,,true,false
Matchain,yt0o4m,https://www.matchain.io/,BLOCKCHAIN_INFRA,BINANCE,,,"Matchain is a decentralized AI blockchain focused on data and identity sovereignty, utilizing advanced AI for data aggregation, analytics, and user profiling to enhance decentralized identity solutions and data management.",L1/L2,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/matchain_io,,,,,,,TRUE,FALSE
MatchX,sr6yh3,https://matchx.io/,WIRELESS,,,,MatchX is a hardware and software company specializing in IoT solutions for the industry.,IoT,,,https://twitter.com/matchx_iot,525329441371717675,,,,https://www.linkedin.com/company/matchx/,,true,false
Matrix AI,iev3ik,https://www.matrix.io/,AI,NATIVE,MAN,matrix-ai-network,Matrix combines neuroscience with AI and blockchain to create digital user avatars in the Metaverse.,,,,https://twitter.com/MatrixAINetwork,984618085023612999,https://t.me/matrixainetwork,https://matrixainetwork.medium.com/,https://github.com/MatrixAINetwork,http://www.linkedin.com/company/matrixainetwork,,true,false
Matrix One,vcaj1y,https://www.matrix.one/,AI,SOLANA,MATRIX,matrix-one,"Matrix One is a decentralized, collaborative AI character protocol that enables developers to create and deploy human-like AI characters with multimodal perception, seamlessly integrating them into both virtual and real-world environments.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/matrixoneai,,,,,,,true,false
Mawari,ygaj99,https://www.mawari.io/,WIRELESS,,,,Mawari: Decentralized 3D content delivery platform for mobile XR devices.,CDN,,,https://twitter.com/mawarijp,,,,,https://www.linkedin.com/company/mawari/,,true,false
MeAI,jh5gfw,https://www.meai.app/,SENSORS,,MEAI,,"MeAI is an AI-driven Web3 lifestyle app that allows users to boost their health with GameFi and SocialFi and earn token rewards. ",Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/meai_app,,,,,,,true,false
Measurable Data Token,jlivte,https://mdt.io/,BLOCKCHAIN_INFRA,ETHEREUM,MDT,measurable-data-token,"Measurable Data Token (MDT) is a decentralized data exchange economy connecting users, data providers, and buyers, rewarding users for contributing anonymous data while offering businesses real-time, actionable insights through secure blockchain.",Data,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/MeasurableData,,,,,,,true,false
MedeLeite,jtrmoh,https://www.medeleite.com/,BLOCKCHAIN_INFRA,,,,Full-stack supply chain platform for mlik production,Software,,,,,,,,,,true,false
Media,iqnvgc,https://www.media.network/,COMPUTE,ETHEREUM,MEDIA,media-network,Media Network is a decentralized hub for web services.,,W. L.,,https://twitter.com/Media_FDN,832942573642973194,https://t.me/Media_FDN,https://mediafoundation.medium.com/,https://github.com/mediafoundation,https://www.linkedin.com/company/media-network-inc./about/,,true,false
MediBloc,6l4loy,https://medibloc.com/,HUMAN_CAPITAL,COSMOS,MED,medibloc,"MediBloc is a blockchain-based platform empowering patients with full control over their health data, ensuring privacy, security, and seamless interoperability within a decentralized healthcare ecosystem.",Health,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/_MediBloc,,,,,,,TRUE,FALSE
MedicalVeda,riq8lw,https://medicalveda.com/,NOT_DEPIN,ETHEREUM,MVEDA,medicalveda,"Medical Veda aims to be the world’s leading open-source health ecosystem for enabling decentralized ownership of patient data while enabling all industry players to get access to this data in a seamless, secure, and instant manner.",,ZZ,,,,,,,,,true,false
Medifakt,dibbji,https://medifakt.com/,NOT_DEPIN,ETHEREUM,FAKT,medifakt,"MEDIFAKT is a decentralized healthcare ecosystem utilizing Blockchain, IoT, and ML to secure and integrate patient data across a cross-chain network, enhancing interoperability and patient outcomes while ensuring data ownership and privacy.",Health,ZZ,,https://twitter.com/medifakt,,,,,,,true,false
meet48,mvulhh,https://www.meet48.xyz/,NOT_DEPIN,,,,"MEET48 is an immersive intelligent social Metaverse that integrates AI large models & WEB3, featuring idol entertainment content, AI-driven content & Web3 game.",,EV3 Sal,,https://twitter.com/meet_48,,,,,,,true,false
MelosBoom,4ms79a,https://melosboom.ai/,SENSORS,,BOOM,,MelosBoom is a music-based DePIN and web3 speaker with an AI-powered listen-to-earn system.,,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/MelosBoom,,,,,,,true,false
Mem Tech,5fzcjp,https://www.mem.tech/,COMPUTE,,,,The web3-ready serverless functions platform. Build and deploy trustless dApps in record time,,EV3 Sal,,,999990037779333130,,,,,,true,false
MeMeTalk,09v332,https://memetalk.net/,PENDING,,,,,,ZZ,,https://x.com/memetalk_sol,,https://t.me/memetalk_sol,,,,,true,false
MemoLabs,8ul10b,https://www.memolabs.org/,COMPUTE,,,,"Provide decentralized underlying data storage technology for Metaverse&NFT to open up data value transfer channels, and help human civilization survive forever. ",Storage,W. L.,,https://twitter.com/MemoLabsOrg,849100463441444894,,https://memolabs.medium.com/,https://github.com/memoio,,,true,false
MeMusic,lwwf21,https://www.memusic.io/,NOT_DEPIN,NATIVE,MMT,memusic,"MeMusic is a blockchain end-to-end platform designed to create, listen, and share music.",,ZZ,,https://twitter.com/MeMusicNews,,,,,,,true,false
Mentaport,y363g8,https://www.mentaport.xyz/,NOT_DEPIN,,,,"Mentaport provides a content-authenticating platform that protects the work of musicians, artists, and creators with its advanced fingerprinting technology to ensure authenticity and track ownership.",,EV3 Sal,,https://twitter.com/mentaportinc,,,,,,,true,false
Mentat Minds,21t52o,,NOT_DEPIN,BITTENSOR,,,"Mentat Minds is a TAO delegation platform on Bittensor. ",,EV3 Sal,,https://x.com/mentatminds,,,,,,,true,false
Menthol,b9egeq,https://www.mentholprotocol.com/,BLOCKCHAIN_INFRA,,COOL,,Menthol Protocol is a multi-chain decentralized regeneration protocol that automatically calculates and offsets the environmental impact of user and dApp transactions using globally verified renewable energy and carbon credits.,,ZZ,,https://twitter.com/MentholProtocol,852523511414784027,https://t.me/mentholprotocol,https://medium.com/mentholprotocol,https://github.com/mentholprotocolfoundation,https://www.linkedin.com/company/menthol-protocol/,,true,false
Meromai,v9u4dg,http://www.merom.ai/,PENDING,,,,,,W. L.,,https://x.com/MeromaiOfficial,,,,,,,TRUE,FALSE
MeshBox,exsuua,https://meshbox.io/,COMPUTE,ETHEREUM,MESH,meshbox,"MeshBox is a decentralized node providing efficient routing, storage, and data streaming, to mesh networks where smartphones and IoT devices are the common nodes.",Mobile,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/Mesh_Box,,,,,,,true,false
MeshMap,eur7m4,https://meshmap.com/,SENSORS,,,,MeshMap is building a decentralized and open 3D map of the world through community-submitted 3D scans rewarded by token incentives and fun gameplay.,,EV3 Sal,,https://x.com/meshmapxyz,,,,,,,true,false
Meshmerize,s8j4j9,https://meshmerize.net/,WIRELESS,,,,"Meshmerize is an industry-grade mesh network software that enhances off-the-shelf WiFi hardware to deploy an ultra-reliable mesh network, ensuring highly reliable, resilient, and low-latency connectivity specifically designed for moving machines.",,,,https://twitter.com/meshmerizenet,,,https://meshmerize.net/blog/,,https://www.linkedin.com/company/meshmerize/,,true,false
Meshtastic,8b6kci,https://meshtastic.org/,WIRELESS,,,,"Meshtastic is an open source, off-grid, decentralized, mesh network built to run on affordable, low-power devices.",,ZZ,,https://twitter.com/TheMeshtastic,867578229534359593,,,https://github.com/meshtastic,,,true,false
Meson,wop23m,https://www.meson.network/,WIRELESS,ETHEREUM,MSN,meson-network,Meson is building a decentralized CDN and Bandwidth Exchange.,CDN,,,,784251111678148608,,,,,,true,false
MesoReef,oo6fpf,https://linktr.ee/mesoreefdao,SCIENCE,,,,MesoReefDAO (Mesoamerican Reef DAO) is a Regenerative Coral Reef Science initiative that focuses on the creation of a DAO of DeSci that seeks to scale coral reef conservation efforts in the Mesoamerican Barrier Reef System.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/mesoreefdao,,,,,,,true,false
Metablox,k5fxwj,https://metablox.io/,WIRELESS,,,,"Roam by MetaBlox is a decentralized Global WiFi network that offers seamless roaming, advanced network security, and rewards users for every connection and check-in around the world.",,W. L.,,https://twitter.com/weRoamxyz,916937100744597548,,https://metabloxnetwork.medium.com/metablox-x-cryptolab-ama-recap-highlights-ba556d3ce506,https://github.com/MetaBloxIO,https://www.linkedin.com/company/metablox/,,true,false
MetaEngine,l7klou,https://www.metaengine.gg/,NOT_DEPIN,,,,MetaEngine is a decentralized all-in-one platform for the development and publishing of GameFi / Metaverse games and apps.,Gaming,,,https://twitter.com/meta_engine,915343753726799902,https://t.me/metaEngine_Community,https://metaengine.medium.com/,,https://www.linkedin.com/company/metaengine/,,true,false
Metafi,cu6hqb,https://www.metafi.org/,NOT_DEPIN,,,,MetaFi is a crowdfunding ecosystem that allows users to acquire tokens of upcoming technology innovators.,DeFi,ZZ,,https://twitter.com/MetaFi_Official,,,https://medium.com/easify-network/a-brief-about-metafi-cf3f1736e930,https://github.com/metafiofficial,https://uk.linkedin.com/company/meta-fi,,true,false
MetaFlora,qup4wl,https://metaflora.xyz/,BLOCKCHAIN_INFRA,ETHEREUM,OG,,"MetaFlora is a BioTech DePIN knowledge hub, community platform, and DNA-verifiable Repository platform for cannabis and agriculture farms, commercial cultivators, home growers, and connoisseurs. ",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/metafloralabs,,,,,,,true,false
MetaFlyers,k9uwcc,https://www.metaflyers.xyz,NOT_DEPIN,,,,"MetaFlyers: a decentralized rewards marketplace connecting consumers, brands, and NFT communities.",,,,https://twitter.com/metaflyers,,,https://medium.com/@metaflyers,,https://www.linkedin.com/company/metaflyers?trk=similar-pages,,true,false
MetafourAI,wko5kg,,AI,,,,,,,,,,,,,,,false,false
MetaGravity,jvfvyy,https://www.metagravity.com/,COMPUTE,,,,MetaGravity is a company building distributed compute infrastructure for metaverse gaming and virtual world simulations.,Gaming,,,https://twitter.com/MetaGravity_,885910230007951460,https://t.me/Felikxz,https://metagravity.medium.com/,,https://www.linkedin.com/company/metagravityltd,,true,false
Metakraft,v7n4we,https://www.metakraft.ai/,AI,NATIVE,KRAFT,,"Metakraft AI is an AI-powered platform simplifying 3D content creation, enabling creators to produce immersive experiences and monetize their work as NFTs, leveraging advanced machine learning, blockchain, and spatial computing technologies.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/themetakraft,,,,,,,true,false
Metale,qvmpry,https://www.metale.world/,NOT_DEPIN,,,,"Metale Protocol is a peer-to-peer web3 content distribution protocol that provides on-chain services for content subscription, transparent profit-sharing, and asset transactions.",,ZZ,,https://twitter.com/MetaleProtocol,,,,,,,true,false
MetaLink,rqiole,https://metalink.metabitglobal.com/,AI,,MLINK,,"MetaLink is an intelligent resource allocation platform that combines AI and blockchain to maximize MetaBit's networking and computing power, integrating virtual and physical routers for efficient network optimization.",Data,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/metalink_depin,,,,,,,true,false
MetaMirror,trtwoi,,NOT_DEPIN,,,,"MetaMirror is specializing in Decentralized Identity (DID), focused on empowering individuals with control over their personal data.",,ZZ,,https://twitter.com/Auth3MetaMirror,885347675510288444,https://t.me/MetaMirror,https://medium.com/metamirror,,https://www.linkedin.com/company/metamirror/about/,,false,false
MetaPhone,prs8dc,https://metaphone.io/,WIRELESS,,,,"MetaPhone is a Web3-native smartphone project powered by the TON blockchain, fostering a comprehensive TON ecosystem and enabling users to access sought-after TON applications while participating in a decentralized marketing network.",Mobile,ZZ,,https://twitter.com/metaphone_ton,,,,,,,true,false
MetaSafe,z41ick,https://metasafe.one/,COMPUTE,,,,The MetaSafe platform is a decentralized storage and peer-to-peer network that enables anyone with an Internet connection to store their information securely from any computing device.,Storage,W. L.,,,,https://t.me/+qAdGHkxRl_RjMjAx,,,http://www.linkedin.com/company/grupometasafe,,true,false
MetaSpace,65et59,https://www.metaspacechain.com/,NOT_DEPIN,,,,"MetaSpace: Decentralized 3D metaverse for interaction, gaming, concerts, and NFT trading.",,,,https://twitter.com/metaspace_verse,1056618109118709802,https://t.me/MetaSpace_Metaverse,https://metaspace-metaverse.medium.com/,,http://www.linkedin.com/company/metaspace-academy,,true,false
Metaweave,4kyl37,https://metaweave.com/,BLOCKCHAIN_INFRA,,,,Metaweave is a social permadapp enabling direct interaction with the Blockweave using Arweave wallet.,,,,,,,,,,,true,false
Metaxar,kzbct0,https://metaxar.io/,NOT_DEPIN,NATIVE,XAR,,"Metaxar.io is a decentralized gaming marketplace and metaverse that offers a free-to-list platform for play-and-earn games, empowering developers and players globally by providing an ecosystem for creating games with earning potential.",,ZZ,,,969150813194813500,,,,,,true,false
Meterbox,smjywm,https://www.themeterbox.com/,ENERGY,,,,The Meter Box is used to accurately measure your power usage in live time.,,EV3 Sal,,,,,,,,,true,false
Metis,0mfb31,https://www.metis.io/,NOT_DEPIN,ETHEREUM,METIS,metis-token,Metis: Scalable platform for Ethereum & infrastructure development,L1/L2,,,https://twitter.com/MetisDAO,859838997874475008,https://t.me/MetisDAO,https://metisdao.medium.com/,https://github.com/MetisProtocol,http://www.linkedin.com/company/metis-io,,true,false
MEVFree,8sxorc,https://mevfree.com/,AI,ETHEREUM,MEVFREE,mevfree,MEVFree: Platform for crypto traders with tools and services to maximize profits.,,,,https://twitter.com/mevfree,1011294496123789322,https://t.me/MevFree,,https://github.com/mevfree,,,true,false
Mey,hps5ky,https://mey.network/,RWA,NATIVE,MEY,,"Mey Network is a blockchain ecosystem that bridges physical assets and the digital world by enabling secure asset tokenization and decentralized finance through its Layer 1 blockchain, Meychain, and its DeFi platform, MeyFi.",DeFi,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/Mey_Network,,,,,,,TRUE,FALSE
MicroAI,a69lpw,https://micro.ai/,NOT_DEPIN,,,,"MicroAI is an Edge AI-enablement company for the Manufacturing, O&G, Automotive, Telecom, and Silicon sectors.",,,,https://twitter.com/gomicroai?s=11,,,https://www.linkedin.com/company/microai-ai/,,,,true,false
MicroVisionChain,tt8j7l,https://www.microvisionchain.com/,NOT_DEPIN,NATIVE,SPACE,microvisionchain,"MicroVisionChain: UTXO-based public blockchain with PoW, high-concurrency, Layer-1 smart contracts, and DID solution.",,,,https://twitter.com/mvcglobal,1009003006408282112,https://t.me/mvcofficial,,https://github.com/mvc-labs/microvisionchain,https://www.linkedin.com/in/mvc-mvcglobal-3a3a24248/,,true,false
Midas,82xezj,https://midas.app/,RWA,,,,"Midas is an asset tokenization protocol bringing regulatory-compliant exposure to institutional-grade assets onchain, unlocking DeFi composability for RWAs.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/midasrwa,,,,,,,true,false
Millicent Labs,s1f9ke,https://www.millicent.io/,NOT_DEPIN,,,,Millicent Labs upgrades financial systems with distributed ledger technology.,,,,https://twitter.com/MillicentLabs,,,https://www.millicent.io/blog,,https://www.linkedin.com/company/millicentlabs/,,true,false
Mina,0mam0q,https://minaprotocol.com/,BLOCKCHAIN_INFRA,NATIVE,MINA,mina-protocol,"Mina is the world’s lightest blockchain, powered by participants. Rather than apply brute computing force, Mina uses advanced cryptography and recursive zk-SNARKs to design an entire blockchain that is and always will be about 22KB.",,ZZ,,,,,,,,,true,false
Mind Network,q3503f,https://mindnetwork.xyz/,NOT_DEPIN,,,,"Mind Network is a Zero Trust Layer that offers a security and data privacy solution that achieves true CrossFi scale, complying with regulatory requirements while staying true to Web3 principles of asset tokenization and individual data ownership.",FHE,EV3 Sal,,,1052487383083393095,,,,,,true,false
MindAI,0980mk,https://mindaiproject.com/,PENDING,,MDAI,,,,ZZ,,https://x.com/MindAIProject,,https://t.me/MindAIProject,,,,,true,false
Mindland,pheffj,https://mndlnd.xyz/,SENSORS,,,,Mindland is a meditation incentivization company that uses crypto incentives to encourage meditation practices.,Health,ZZ,,https://twitter.com/MndlndOfficial,999441437743644782,,,,,,true,false
MindLanguage,mssc3j,https://mindlang.ai/,AI,,,,"Mind is an agnostic graph-based meta-programming language designed for both AI & humans, enabling easy program creation & modification through natural language.",,Sami,,,1184811001837797456,,,,,,true,false
Mindplex,cb8km1,https://mindplex.ai/,INTELLECTUAL_PROPERTY,,MPX,,"Mindplex is a blockchain-based decentralized media network consisting of a magazine and a social media platform providing a dynamic space for creators, influencers, and media enthusiasts to connect and collaborate.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/mindplex_ai,,,,,,,true,false
Mindra,4rvov4,https://mindra.ai/,AI,,MINDRA,,"Mindra is a decentralized large model infrastructure network (DeMIN) that enables users to build and run personalized AI applications using dual-layer LLMs, prioritizing privacy, collaboration, and access to powerful network intelligence.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/mindra_ai,,,,,,,TRUE,FALSE
Mindsync,gpjz8o,https://mindsync.ai/,NOT_DEPIN,,MAI,,"Mindsync connects AI enthusiasts, miners, and businesses for AI solutions.",,ZZ,,https://twitter.com/mind_sync,,https://t.me/mindsyncai,https://medium.com/mindsync-ai,https://github.com/mindsync-ai,https://www.linkedin.com/company/mindsync/,,false,false
MineFi,qwuvox,https://minefi.io/,COMPUTE,,,,"MineFi is a decentralized service platform built with FVM smart contracts to encourage more people to provide storage services for Filecoin and deliver a more convenient, efficient, safe, and high-yield Filecoin token reward experience.",Storage,EV3 Sal,,https://twitter.com/MineFiDAO,,https://t.me/MineFiTG,,,,,true,false
mineTON,jtpc7i,https://www.mineton.io/,COMPUTE,TON,,,"mineTON is a DePIN cloud mining platform on the TON blockchain that allows users to complete tasks, and earn rewards.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/mineton_app,,,,,,,true,false
Minima,w75xgw,https://www.minima.global/,BLOCKCHAIN_INFRA,NATIVE,WMINIMA,wrapped-minima,Minima is a decentralized Layer 1 DePIN blockchain designed to be accessible to as many people as possible by making it compact enough to run on mobile and IoT devices.,Mobile,,,https://twitter.com/Minima_Global,562272317930209280,https://t.me/Minima_Global,https://www.minima.global/,https://github.com/minima-global,http://www.linkedin.com/company/minimaglobal,,true,false
Mintera,irfly1,https://mintera.co/,RWA,ETHEREUM,MNTE,,"Mintera is a climate-positive financial ecosystem based on blockchain technology, providing green digital assets and investment solutions backed by real assets and strong environmental commitments.",Environmental,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/mintera_co,,,,,,,true,false
MintMe,6927wm,https://www.mintme.com/,NOT_DEPIN,ETHEREUM,MINTME,webchain,"MintMe secures Smart-Contract-powered DApps using internet-connected devices, leveraging CPU resources.",,,,https://twitter.com/mintmeproject,524539167720341514,https://t.me/joinchat/Hzio4lCr-95bHcbB1-RX9Q,,https://github.com/mintme-com,http://www.linkedin.com/company/mintme,,true,false
Mintstars,gt1ww4,https://www.mintstars.com/,NOT_DEPIN,,,,Mintstars is a subscription-based NFT platform empowering creators to control their content and earnings.,,,,https://twitter.com/MintStarsReal,938410181749002280,,,,http://www.linkedin.com/company/mintstars,,true,false
Mintycode,98du7c,https://mintycode.io/,NOT_DEPIN,,,,"MintyCode is a decentralized marketplace that helps software creators monetize their work by selling priority support, and feature requests, and helps buyers of Open Source Software pay for priority support.",,ZZ,,https://twitter.com/MintyCodeDao,,https://t.me/mintycodedao,https://mintycode.io/blog,,https://linkedin.com/company/mintycode-dao,,true,false
Minutes,xwgcij,https://minutesnetwork.io/,WIRELESS,,MNT,,Minutes Network is a blockchain-based international voice-calling and wholesale termination service provider.,,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/Minutes_Network,,,,,,,true,false
Mira,bod0af,https://mira.network/,PENDING,,,,,,EV3 Sal,,https://x.com/Mira_Network,,,,,,,true,false
Mirada AI,ngp19v,https://mirada.ai/,AI,NATIVE,MIRX,mirada-ai,"Mirada AI is a decentralized AI platform that uses blockchain to offer advanced AI capabilities, including AI chat, search, image, and animation generation, and an autonomous AI community manager, all with enhanced privacy and reduced biases.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/miradaai,,,,,,,true,false
Mirai,49spsp,,PENDING,,,,,,EV3 Sal,,https://x.com/themiraiapp,,,,,,,true,false
Mistral AI,dtkxu9,https://mistral.ai/,NOT_DEPIN,,,,Mistral AI is an open and portable generative AI for devs and businesses.,,ZZ,,https://twitter.com/MistralAI,1144547040454508606,,,,,,true,false
MIZU,gzf4tn,https://mizu.global/,AI,,,,"MIZU is developing a decentralized open data network, integrating high-quality public datasets with advanced synthetic data to empower AI innovation and democratize access to valuable information resources.",Data,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/0xmizu_ai,,,,,,,true,false
Mizzle,7df9uj,https://mizzle.io/,COMPUTE,,,,Mizzle is a DePIN platform building AI-driven DevOps with advanced encryption for secure and scalable decentralized compute and storage applications.,,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/Mizzle_io,,,,,,,true,false
mLayer,cas4sm,https://www.mlayer.network/,BLOCKCHAIN_INFRA,COSMOS,MSG,,"mLayer is a modular Layer 1/Layer 2 blockchain optimized for secure, privacy-centric, trustless, and incentivized real-time data communication empowering developers to create distributed applications for P2P messaging, DePIN, IoT, and Gaming.",L1/L2,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/mlayer_protocol,,,,,,,true,false
MNTD,zm9ms2,https://getmntd.com/,WIRELESS,,,,MNTD is a brand by RAKwireless solely focused on making crypto-hardware accessible for everyday users.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/getmntd_,,,,,,,TRUE,TRUE
MobiFi,ars9qg,https://mobifi.io/,MOBILITY,ETHEREUM,MOFI,mobifi,MobiFi rewards users for making smarter mobility decisions.,,,,https://twitter.com/mobifi,1141302849482006672,,https://medium.com/mobifi,,https://uk.linkedin.com/company/mobifi,,true,false
Mobilian,diyark,https://mobiliancoin.com/,MOBILITY,,,,Mobilian is a blockchain network empowering secure autonomous vehicles.,,,,https://twitter.com/MobilianCoin,,https://t.me/mobiliancoin,,,https://www.linkedin.com/company/mobiliancoin/,,true,false
MODA,qwsoln,https://www.moda.audio/,NOT_DEPIN,ETHEREUM,MODA,moda-dao,"MODA DAO empowers music industry with NFTs, licensing, and DeFi.",,,,https://twitter.com/moda_dao,808463591102873601,https://t.me/modadao,,,https://www.linkedin.com/company/moda-foundation/,,true,false
Modal,xegpzk,https://modal.com/,COMPUTE,,,,"Modal Labs offers Modal, a runtime for data teams.",,,,https://twitter.com/modal_labs,,,,https://github.com/modal-labs,https://www.linkedin.com/company/modal-labs/,,true,false
Modelex,vvkhnp,https://modelex.ai/,PENDING,,,,,,EV3 Sal,,https://x.com/modelex_ai,,,,,,,true,false
Modriv,8t15gn,https://www.modrivdepin.xyz/,MOBILITY,BINANCE,MDR,,"MoDriv is an open, community-owned IoT network empowering vehicle owners to monetize their data while providing developers with a stable platform to innovate mobility products and services.",,ZZ,,https://x.com/Modriv_DePin,,,,,,,true,false
Modulus,93up2s,https://www.modulus.xyz/,AI,,,,Modulus is developing a technology to bring powerful AI on-chain with specialized ZK.,,ZZ,,https://twitter.com/ModulusLabs,,,https://medium.com/@ModulusLabs,https://github.com/Modulus-Labs,https://www.linkedin.com/company/moduluslabs/about/,,true,false
Moflix,u35fhl,https://www.moflixgroup.com/,WIRELESS,,,,Moflix enables telco operators to become the backbone of Web3.,,,,,,,,,,,true,false
Mogul,129mdn,https://www.mogul.club/,RWA,,,,Mogul is a blockchain-based platform enabling direct investment in cash-flowing properties for as little as $100.,,,,,,,,,,,true,false
MOI,0wfhe4,https://iome.ai/,NOT_DEPIN,,,,MOI Protocol and IOMe: user-owned decentralized identities.,,,,,,,,,,,true,false
Moken,aqputr,https://moken.io/,WIRELESS,,,,"Moken by Moken/Helium Deploy is a platform for the Helium community, offering the Moken Explorer to provide detailed metrics, historical data, and powerful mapping for IOT and MOBILE hotspots, enhancing mining and data analysis.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/MokenMarket,,,,,,,true,true
Molecule,w3p4bn,https://www.molecule.xyz/,SCIENCE,ETHEREUM,IPT,,Molecule is a decentralized biotech protocol where drug development researchers and investors collaborate to invent therapeutics.,,ZZ,,https://twitter.com/Molecule_dao,,,,,,,true,false
Monad,b207ll,https://www.monad.xyz/,NOT_DEPIN,,,,"Monad is a decentralized, developer-forward Layer 1 smart contract platform that ushers in a new paradigm of possibility through pipelined execution of Ethereum transactions. ",,,,https://twitter.com/monad_xyz,1036357772826120242,https://t.me/monad_xyz,https://medium.com/monad-labs,,https://www.linkedin.com/company/monadlabs/,,true,false
monai,c9xdxq,https://monai.dev/,AI,ETHEREUM,MONAI,monai,"Monai is developing an uncensored suite of generative AI tools, including a flagship unrestricted LLM, integrated with the high-throughput, secure blockchain platform Monad for decentralized, scalable, and innovative AI applications.",,ZZ,,https://twitter.com/monaidev,,,,,,,true,false
Monte Carlo,tjf1xo,https://montecarlo.io/,AI,,,,Monte Carlo is a decentralized computing power protocol that incentivizes miners to provide off-chain computing power.,,,,https://twitter.com/montecarlostyle,,,,,http://www.linkedin.com/company/monte-carlo-fashions,,true,false
MooFi,wa70xv,https://linktr.ee/moofiapp,PENDING,,,,,,ZZ,,https://twitter.com/moofiapp,,,,,,,true,false
Moonbeam,xu30b0,https://moonbeam.network/,BLOCKCHAIN_INFRA,POLKADOT,GLMR,moonbeam,Moonbeam is a cross-chain smart contract platform allowing users to interact with multiple blockchains simultaneously.,,,,https://twitter.com/moonbeamnetwork,745382242326413442,,https://medium.com/moonbeam-network,,https://www.linkedin.com/company/moonbeaminc,,true,false
MoonRing,suk6o8,https://moonring.ai/,SENSORS,,,,Moonring is an AI-powered DePIN ring that allows users to share their behavioral data and earn token rewards.,Health,EV3 Sal,,https://x.com/Moonringai,,,,,,,true,false
Moonwalk,vrcvor,https://moonwalk.fit/,SENSORS,,,,"Moonwalk is a fitness accountability app that combines daily goals with incentives. Users can set a daily step target, and stake their crypto. Achieving goals protects their deposit while failing leads to a forfeiture of a portion of their stake.",Health,EV3 Sal,,https://twitter.com/moonwalkfitness,,,,,,,true,false
MOROS NET,adwvwk,https://morosnet.com/,NOT_DEPIN,ETHEREUM,MOROS,moros-net,"MOROS is a DAO that aims to fund and support open-source developers, hackers, and educators in their journey of developing local AI, cybersecurity technology, privacy, DeFi, and tech education.",,ZZ,,,,,,,,,true,false
Morpheus,ocgn0p,https://mor.org/,AI,ETHEREUM,MITX,morpheus-labs,"Morpheus is designed to incentivize the first peer-to-peer network of personal AIs, known as Smart Agents.",,EV3 Sal,,,1151741790408429580,,,https://github.com/MorpheusAIs/Morpheus/blob/main/ollama_instructions_in_pictures.md,,,true,false
Morpheus.Network,39uynx,https://morpheus.network/,BLOCKCHAIN_INFRA,ETHEREUM,MNW,morpheus-network,"Morpheus.Network is a supply chain SaaS middleware platform that integrates both legacy systems and emerging technologies like blockchain, IoT, and RFID.",,,,https://twitter.com/MNWSupplyChain,962783332821790780,https://t.me/MorpheusNetworkAnnouncements,https://news.morpheus.network/,,https://www.linkedin.com/company/morpheus-network/,,true,false
Morphware,olkani,https://www.morphware.io/,AI,ETHEREUM,,,Morphware is a decentralized machine learning system that allows users to outsource the training and testing of machine learning models by leveraging idle GPU power through a peer-to-peer network.,GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/morphwareai,,,,,,,true,false
Moso,7xm8fe,https://moso.xyz/,NOT_DEPIN,,,,Moso is a crypto rewards platform and browser extension that enables users to earn the cryptocurrency of their choice while shopping from partnered merchants.,,ZZ,,https://twitter.com/mosohq,,,,,,,true,false
MosoLabs,r0vdzn,https://www.mosolabs.com/,WIRELESS,,,,"MosoLabs builds products that empower people to build state-of-the-art private networks and open, decentralized, blockchain-powered wireless networks.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/mosolabs,,,,,,,TRUE,TRUE
MOTI,vxbfh0,https://home.moti.bio/,HUMAN_CAPITAL,,,,"MOTI is a decentralized, peer-to-peer social network built on the Koii Network, enabling users to build, monetize, and authenticate their digital identity for genuine social connections through an omnichain decentralized identity protocol.",Identity,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/moti_bio,,,,,,,TRUE,FALSE
Motivus,6la025,http://motivus.cl/,COMPUTE,,,,Motivus: collaborative HPC for algorithm creation and distribution.,,,,https://twitter.com/motivushpcn,,,https://medium.com/@Motivus,https://github.com/motivus,https://www.linkedin.com/company/motivus/,,false,false
MoveApp,jchoix,https://move-app.com/,SENSORS,BINANCE,MOVE,,"MoveApp is a web3 lifestyle app that merges exercise with gaming elements, allowing users to earn rewards for staying active.",Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/Move_app_,,,,,,,true,false
Moverse,z1frb9,https://moverse.run/,HUMAN_CAPITAL,BINANCE,MGET,,"Moverse is an app-based Web3 fitness and social lifestyle app offering Move-to-Earn and Engage-to-Earn activities, using AI and machine learning to help users stay healthy while earning rewards.",Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd750,,https://x.com/moverserun,,,,,,,TRUE,FALSE
MoveZ,7gojkc,https://www.movez.me/,SENSORS,BINANCE,MOVEZ,movez,"MoveZ is a Web3 app designed with a sustainable move-to-earn economy that rewards users for hitting their exercise milestones. Whether it’s walking, running, swimming, surfing, or something else, anyone can earn token-based rewards for their efforts.",,ZZ,,,,,,,,,true,false
Mozo,9xbw98,https://mozo.xyz/,AI,ETHEREUM,MOZO,,"Mozo is a Decentralized Knowledge-based Platform for secure and reliable text generation, powered by Retrieval-Augmented Generation as a Service and a Decentralized Network Architecture that leverages a network of LLMs to deliver high-quality, contextually relevant outputs.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/Mozo_xyz,,,,,,,true,false
MTMS,7vuy7a,https://mtms.live/,HUMAN_CAPITAL,ARBITRUM,MTMS,mtms-network,"GloboRoom is a learn-and-earn decentralized educational network connecting global educators and learners for interactive, personalized learning experiences.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/official_mtms,,,,,,,true,false
MUA,cj4swq,https://muadao.build/,NOT_DEPIN,NATIVE,MUA,,"MUA DAO is a decentralized organization focused on building and operating infrastructure for the metaverse, facilitating immersive experience creation and collaboration for accelerated development.",,ZZ,,https://x.com/MUA_MUADAO,,,,,,,true,false
Muhdo,yce0p0,https://www.muhdohub.com/,HUMAN_CAPITAL,,DNA,,"Muhdo is an AI-powered epigenetics platform that provides personalized health insights, genetic analysis, DNA-matched workouts, and customized health plans while allowing users to monetize their health data and earn rewards.",Health,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/Muhdohealth,,,,,,,TRUE,FALSE
Multiple,h2aps5,https://multiple.cc/,WIRELESS,,,,Multiple Network is a Web3 DePIN project that leverages SD-WAN technology to build a network layer to enable high-powered transmission of digital assets and data.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/financemul,,,,,,,true,false
Multisynq,5c2tug,https://multisynq.io/,WIRELESS,,,,"Multisynq is a decentralized, low-latency Synchronization Network, allowing individuals to monetize their surplus internet connection by selling bandwidth to developers creating unified experiences on the Internet.",,ZZ,,https://twitter.com/multisynq,1219357019212087419,,,,,,true,false
Multiverse,wsmj41,https://www.multiverse.ai/,AI,ETHEREUM,AI,multiverse,Multiverse.ai is a distributed marketplace for making immersive AI.,,ZZ,,https://twitter.com/multiverse_labs,,,,,,,true,false
Muon,fhr20m,https://www.muon.net/,BLOCKCHAIN_INFRA,,MUON,,"Muon is a global data availability layer that enables running Web2 and Web3 applications, off-chain, on-chain, and cross-chain. The network acts as a base layer that receives and sends messages from the real world and between blockchains.",Oracle,ZZ,,,,,,,,,true,false
MurAll,kvmdaw,https://murall.art/home,AI,ETHEREUM,PAINT,paint,MurAll: A blockchain platform for artists to create art using limited token called PAINT.,,,,https://twitter.com/MurAll_art,648882111272714251,https://t.me/MurALLart,https://murall.medium.com/,https://github.com/murall-art,,,true,false
Mushroom Protocol,yp6kht,https://mushroomprotocol.io/,SCIENCE,,FUNGI,,"Mushroom Protocol is a Web3 platform that decentralizes funding for biotechnology research and startups in Latin America through a system of tokenization of biotechnology-based research, using intellectual property as collateral.",,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/MushromProtocol,,,,,,,TRUE,FALSE
MVL,ucujvj,https://mvlchain.io/,MOBILITY,ETHEREUM,MVL,mass-vehicle-ledger,"MVL(Mass Vehicle Ledger) is a new incentive-based blockchain mobility ecosystem and a zero-commission ride-hailing service. ",,ZZ,,https://twitter.com/mvlchain,,,,,,,true,false
MXC,h1l8jh,https://www.mxc.org/,SENSORS,ETHEREUM,MXC,mxc,MXC is a L3 zkEVM built on top of a decentralized network of LPWAN radio nodes.,,,,https://twitter.com/mxcfoundation,445679878004801547,https://t.me/mxcfoundation,https://medium.com/mxc,https://github.com/mxc-foundation,http://www.linkedin.com/company/mxc-foundation,,true,false
Mycelium,vi4exr,https://www.myceliumnetworks.com/,WIRELESS,,,,Mycelium is an enterprise DePIN deployer and operator of the Mycelium Testbed.,,,,https://twitter.com/myceliumx,787027688548073522,,https://medium.com/@MyceliumX,,http://www.linkedin.com/company/myceliumnetworks,,true,false
Mycosoft,sgi1fr,https://mycosoft.org/,SCIENCE,,,,"Mycosoft builds tools that bring scientists a deeper understanding of mushrooms, mycology, and fungal organisms while pioneering a biological computer that leverages mycelium's networking capabilities to create a living, responsive computing system.",,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/Mycosoft,,,,,,,TRUE,FALSE
MyGrid,rpvm9n,https://www.mygrid.energy/,NOT_DEPIN,,,,"MyGrid offers a plug-and-play home energy solution, allowing users to manage their electricity consumption, lower their bills, and reduce their carbon footprint.",,,,https://twitter.com/mygridgreen,,,https://www.mygrid.energy/blog,,https://www.linkedin.com/company/mygrid-energy/,,true,false
myMessage,1rcuf0,https://www.mymessage.io/,NOT_DEPIN,,,,myMessage is a decentralized reddit-like social media & Data Portal for Web3 Applications,Storage,ZZ,,https://twitter.com/myMessageOS,895919618034659349,https://t.me/mymessageEN,https://medium.com/@myMessage,https://github.com/myMessageio,https://linkedin.com/company/mymessageofficial,,false,false
Myna,wqoxyk,https://www.myna.co/,NOT_DEPIN,,,,"Myna is a platform built by collectors, for collectors, that empowers goods to be traded beyond their physical form.",,EV3 Sal,,https://twitter.com/mynaswap,,,,,https://www.linkedin.com/company/mynaswap/,,true,false
Myria,2vu694,https://myria.com/,NOT_DEPIN,,,,Myria is a blockchain gaming ecosystem powered by Myria's Ethereum L2 scaling solution.,,,,,917422746823196682,,,,,,true,false
Myriad,lass0u,https://www.myriad.social/,NOT_DEPIN,,XMY,myriadcoin,"Myriad Social is a decentralized, censorship-resistant social network that enables users to host their own social network without centralized control.",,ZZ,,https://twitter.com/myriad_social,930740546799038494,https://t.me/myriadsocial,https://medium.com/myriad-social,https://github.com/myriadsocial,https://www.linkedin.com/company/myriad-social/,,true,false
MyShell,1gfb8a,https://myshell.ai/,AI,,SHELL,,"MyShell is a decentralized and comprehensive platform for discovering, creating, and staking AI-native apps.",,EV3 Sal,,,1122227993805336617,,,,,,true,false
Mysterium,8ci5ud,https://www.mysterium.network/,WIRELESS,NATIVE,MYST,mysterium,Mysterium is a decentralized wireless network.,,W. L.,,https://twitter.com/MysteriumNet,614079733663006750,https://t.me/mysterium_network,https://medium.com/mysterium-network,https://github.com/MysteriumNetwork,http://www.linkedin.com/company/mysteriumnet,,true,false
Mystiko,eakhga,https://mystick.network/,NOT_DEPIN,ETHEREUM,XZK,,"Mystiko operates as a universal ZK SDK, enhancing the scalability, interoperability, and confidentiality of blockchains.",ZK,ZZ,,https://twitter.com/MystikoNetwork,,,,,,,true,false
MyVolt,8e2uax,https://www.myvolt.io/,ENERGY,,MVOLT,,"MyVolt is a peer-to-peer energy market that allows individuals and businesses alike to directly buy and sell renewable energy to each other, thus creating a truly liberal, decentralized, and more sustainable energy ecosystem.",,W. L.,,https://twitter.com/myvoltofficial,,,,,,,true,false
NakamotoGames,wdi885,https://www.nakamoto.games/,NOT_DEPIN,ETHEREUM,NAKA,nakamoto-games,"NakamotoGames is a play-to-earn gaming platform/ecosystem offering multiple fun and addictive crypto games. They aim to attract both gamers and game developers. Developers will also have the tools to launch and monetize their gaming creations. ",,ZZ,,,,,,,,,true,false
Namefi,mvoc8z,https://www.namefi.io/,NOT_DEPIN,,,,Namefi is a platform for tokenizing DNS names on Ethereum as NFTs plus DeFi.,,EV3 Sal,,https://twitter.com/namefi_io,,,,,,,true,false
Naoris,h0wfdw,https://naorisprotocol.com/,COMPUTE,,CYBER,,Naoris Protocol is the Decentralized CyberSecurity Mesh that protects devices across the digital world from cyber threats and associated risks while enforcing CyberSecurity standards.,,EV3 Sal,,https://twitter.com/NaorisProtocol,938790786479296512,,,,,,true,false
NapthaAI,75szol,https://www.naptha.ai/,AI,,,,"Naptha is building a decentralized AI Agent orchestration platform that simplifies and scales the coordination of multi-agent systems and workflows across distributed nodes, enabling the next generation of AI applications.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/napthaai,,,,,,,true,false
Native Planet,tk0z9w,https://www.nativeplanet.io/hardware,COMPUTE,URBIT,,,Urbit hosting at home.,,EV3 Sal,,,,,,,,,true,false
NATIX,uq4s3v,https://www.natix.network/,MOBILITY,SOLANA,NATIX,natix-network,NATIX is a decentralized real-time mapping & surveillance network.,,ZZ,,https://twitter.com/NATIXNetwork,811964821000028160,,https://medium.com/natix-io,https://github.com/natix-io,https://www.linkedin.com/company/natixio,,true,false
Nautilus,tm4rcw,https://nautchain.xyz/,PENDING,,,,,,ZZ,,https://x.com/nautilus_chain,1076321699924017183,https://t.me/nautchain,https://nautchain.medium.com/,,,,true,false
Navigate,sbfrwv,https://nvg8.io/,SENSORS,ETHEREUM,NVG8,,"Navigate is a platform that generates an AI-powered map using crowdsourced imagery from individuals who capture and upload content from devices like smartphones, drones, or dashcams. ",,ZZ,,,1207059588151517325,,,,,,true,false
NavyAI,7m3jfl,https://navyai.xyz/,AI,,NAVY,,NavyAI is a Blockchain Layer on Solana for AI model training and self-learning.,,ZZ,,https://twitter.com/NavyAI_xyz,,,,,,,true,false
ND LABS,442zln,https://www.ndlabs.io/#/,COMPUTE,,,,"ND LABS is a metaverse-oriented decentralized storage computing, Fil+ notary, and related services provider.",Storage,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/imndlabs,,,,,,,true,false
NEAR Health,xmvwz4,,PENDING,,,,,,EV3 Sal,,https://x.com/nearhealth_,,,,,,,TRUE,FALSE
NEAR,dnmt6p,https://near.org/,NOT_DEPIN,NATIVE,NEAR,near,"NEAR is a layer one, sharded, proof-of-stake blockchain built with usability in mind. It allows developers to create and distribute decentralized apps on any blockchain",,,,https://twitter.com/nearprotocol,490367152054992913,https://t.me/cryptonear,https://near.org/blog,https://github.com/near/dx,https://www.linkedin.com/company/near-protocol-project/,,true,false
Nebula,dt5m92,https://nebulacloudnetwork.com/,COMPUTE,ETHEREUM,Nebula,nebula-2,NEBULA is an AI-Powered Preconfigured Cloud Computing platform.,,Mahesh | Escape Velocity,,https://x.com/NebulasClouds,,https://t.me/NebulasPortal,https://medium.com/@nebulateamsupport,,,,true,false
Nebulas,k6x5uj,https://www.nebulas.io/,BLOCKCHAIN_INFRA,ETHEREUM,NAS,nebulas,"Nebulas is an open-source, public blockchain focused on creating a true Autonomous Metanet. Nebulas' focus utilizing on-chain data for user interactions and collaboration.",,ZZ,,,760409021017489420,,,,,,true,false
Nectar,jd2kzh,https://trynectar.ai/,AI,,,,"Nectar AI is a decentralized AI companions platform, allowing users to interact with their dream AI partners through Image, Video, and AI Roleplay Chat.",,EV3 Sal,,https://twitter.com/TryNectarAI,,,,,,,true,false
NeoTech,w7y14x,https://www.neotechai.com/,SENSORS,ETHEREUM,NEOT,,"NeoTech creates sub-3cm macro multi-method city and RWA geo-referenced mapping stored on SSD DePIN nodes, hashed to ZKP ERC20 rollups, providing immersive metaverse experiences for retail and industry.",Positioning,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/NeoTech_Ai,,,,,,,true,false
Neova,vdyv9y,https://www.neova.io/,BLOCKCHAIN_INFRA,NATIVE,NEOV,,"Neova is a DePIN Layer 1 with a native storage function that aims to revolutionize data management with a unique architecture, ensuring security, availability, and user-centric design.",L1/L2,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/neova_protocol,,,,,,,true,false
Nephele,chs9nr,https://www.thenephelecloud.com/,COMPUTE,,NEP,,"Nephele is a cloud storage DePIN for web3 that is fully compatible with all Layer-2, services and applications from Ethereum.",Storage,ZZ,,https://twitter.com/nephelenetwork,1075799678286835765,,,,,,true,false
Neptune Mutual,r4h43s,https://neptunemutual.com/,NOT_DEPIN,,NPM,neptune-mutual,Neptune Mutual is the first parametric insurance protocol created for Ethereum.,DeFi,,,https://twitter.com/neptunemutual,846975061163900938,https://t.me/neptunemutual,https://neptunemutual.com/blog/,https://github.com/neptune-mutual-blue,https://www.linkedin.com/company/neptune-mutual,,true,false
NerdBot,xk23m0,https://www.thedatanerd.io/,NOT_DEPIN,ETHEREUM,NERD,nerdbot,"NerdBot is the first on-chain, all-in-one analytics platform allowing users to analyze tokens and follow smart money while enabling DEX trade and portfolio management.",,,,https://twitter.com/onchaindatanerd,,,,,https://www.linkedin.com/company/0xnerdbot/,,true,false
Nesa,5v5ofe,https://nesa.ai/,AI,NATIVE,NES,,"Nesa is a Layer-1 blockchain for AI that lets applications, protocols, and smart contracts seamlessly integrate with AI.",,ZZ,,https://twitter.com/nesaorg,,,,,,,true,false
Nesten,gazzlx,https://nesten.io/,WIRELESS,NATIVE,NIT,nesten,Nesten - telecom company revolutionizing industry with community-driven network ops & blockchain.,,,,,,,,,,,true,false
NetLink,ry6icd,https://www.netlinkprotocol.io/,WIRELESS,BASE,NLP,,"NetLink Protocol is a secure, scalable, and community-driven bandwidth-sharing network that harnesses blockchain to enable users to contribute excess capacity and earn rewards.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/netlink_io,,,,,,,true,false
NetMind.AI,d2uaff,https://netmind.ai/home,AI,ETHEREUM,NMT,netmind-token,NetMind Power is a decentralized platform aimed at democratizing AI computing power.,,W. L.,,https://twitter.com/NetMindAi,1050399764941906031,,,https://github.com/protagolabs,https://www.linkedin.com/company/netmind-ai/,,true,false
NetSepio,mlcg7k,https://netsepio.com/,WIRELESS,,,,"Netsepio is a DePIN-powered crypto-cybersecurity platform that uses AI, community insights, and Blockchain to protect users' web3 presence and assets.",,EV3 Sal,,https://twitter.com/NetSepio,,,,,,,true,false
Nettensor,nmdg6j,https://www.nettensor.com/,AI,ETHEREUM,NAO,nettensor,Nettensor is an AI Infrastructure service provider that emphasizes ease of access and other additional features such as Privacy Layer and App Chain.,,ZZ,,https://twitter.com/nettensor,,,,,,,true,false
Network3,a246lv,https://network3.io/,AI,,,,"Network3 builds an AI Layer2 helping AI developers worldwide train or validate models in scale quickly, conveniently, and efficiently.",,W. L.,,https://twitter.com/network3_ai,1073393648739307590,https://t.me/network3official,https://medium.com/@network3,,,,true,false
Neura,ly1om5,https://www.neuraprotocol.io/,AI,COSMOS,,,"Neura is a blockchain platform that integrates AI and cloud computing with Web3, offering decentralized GPU resources, IMOs for funding, and on-chain AI operations to revolutionize AI deployment and model training on the blockchain.",,ZZ,,https://twitter.com/Neura_io,,,,,,,true,false
Neurai,kntco7,https://neurai.org/,AI,,XNA,neurai,"Neurai: AI, analytics, decision making, predictive modeling, IoT using blockchain assets.",,,,https://twitter.com/neurai_io,1062678996208336896,,https://neuraiproject.medium.com/,,https://www.linkedin.com/company/neural-io/,,true,false
Neural Internet,b57y1r,https://neuralinternet.ai/,AI,,,,"Bittensor is a decentralized, blockchain-based machine learning network that powers Neural Internet, an AI R&D DAO.",,,,https://twitter.com/neural_internet,1039241590092353596,,https://medium.com/@neuralinternet,https://github.com/neuralinternet,https://linkedin.com/company/neural-internet,,true,false
Neural Radiance,p8tp6s,https://www.nerfbot.io/,AI,ETHEREUM,NERF,neural-radiance-field,Neural Radiance Fields enables users to generate immersive 3D environments and create realistic videos.,,,,https://twitter.com/nerf_erc20,,https://t.me/NERFERC20,https://medium.com/@NeRF_ERC20/nerf-bot-enabling-neural-radiance-fields-for-the-masses-aaa7bb63c4ab,https://github.com/Nerfbotxyz/,,,true,false
NeuralAgent,8deftt,https://neuralagent.ai/,WIRELESS,,,,NeuralAgent is a global network of low-cost transportation infrastructure.,,ZZ,,https://twitter.com/NeuralAgentGmbH,,,,https://github.com/neuralagent,https://www.linkedin.com/company/neuralagent,,true,false
NeuralAI,wnflka,https://goneural.ai/,AI,BITTENSOR,NEURAL,neuralai,"NeuralAI is a decentralized generative AI platform that transforms text and images into refined 3D models using advanced machine learning, offering scalable 3D content creation powered by Bittensor and Akash.",Inferencing,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/goneuralai,,,,,,,TRUE,FALSE
Neurochain,ssok9w,https://www.neurochain.ai/,AI,ETHEREUM,NCN,,"Neurochain AI is a decentralized AI-as-a-Service (DeAIAS) network that streamlines the process of building, launching, and using AI-powered decentralized applications.",,W. L.,,https://twitter.com/NeurochainAI,1200111695272628285,https://t.me/NeurochainAI,https://neurochainai.medium.com/,,https://www.linkedin.com/company/neurochainai/,,true,false
NeuroMesh,j949iw,https://www.nmesh.io/,AI,,,,"NeuroMesh is building a distributed training network for large AI models using Predictive Coding Network (PCN) technology to enable cost-effective, parallelized training by leveraging global collaboration.",,ZZ,,https://twitter.com/NeuroMeshInfo,,,,,,,true,false
Neuron,5fah7n,https://www.neuron.world/,SENSORS,,,,"Neuron is a decentralized network for building, finding, and connecting services. ​It provides IoT device discovery, connectivity, and settlement protocols for web, mobile, and embedded applications.",,ZZ,,https://twitter.com/Neuron_World,1023889938237886464,,,,,,true,false
Neurosity,6bppe0,https://neurosity.co/,BLOCKCHAIN_INFRA,,,,Neurosity is a developer of neural devices and applications that translate human brain thoughts into actionable output.,,,,https://twitter.com/neurosity,635812828481323028,,https://medium.com/neurosity,https://github.com/neurosity,https://www.linkedin.com/company/neurosity,,true,false
NeuroWeb,pw8hfi,https://neuroweb.ai/,AI,NATIVE,NEURO,neurowebai,"NeuroWeb Network is a decentralized AI blockchain designed to incentivize knowledge creation, connectivity, and sharing through Knowledge Mining.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/neurowebai,,,,,,,true,false
Neutralx,1d8dh4,https://www.neutralx.com/,RWA,,,,Neutral is an exchange for environmental assets.,,,,https://twitter.com/NeutralExchange,,,https://www.linkedin.com/company/neutral-exchange/about/,,,,true,false
Neutroon,uktna7,https://www.neutroon.com/,WIRELESS,,,,Neutroon is a Network-as-a-Service platform enabling seamless deployment and management of private cellular networks.,Software,ZZ,,https://twitter.com/Neutron_org,,https://t.me/NeutronCoin,,https://github.com/neutron-org,https://www.linkedin.com/company/neutroon/,,true,false
NeuyAI,tom8af,https://neuy.io/,AI,POLYGON,NEUY,neuy,"NeuyAI is a decentralized AI platform offering cutting-edge generative AI tools for creating and enhancing visuals, as well as advanced crypto DeFi models for finance analytics, staking, arbitrage, and automated market analysis.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/neuyai,,,,,,,true,false
Nevermined,4rizhn,https://nevermined.io/,AI,,,,"Nevermined is a decentralized AI payments protocol that helps AI Builders accept payments and manage the usage of their apps, agents, and GPTs.",,ZZ,,https://twitter.com/Nevermined_io,775670012446507028,,https://medium.com/nevermined-io,https://github.com/nevermined-io,https://www.linkedin.com/company/nevermined/,,true,false
New Leaf Finance,msdlpi,https://www.newleaf.finance/,RWA,,NLF,,"New Leaf Finance is a tokenized venture capital firm specializing in premium investments in the cannabis and carbon industries, leveraging blockchain to tokenize RWAs and DePINs for increased liquidity, transparency, and global investor access.",,0x395aB080688983b5a2F203B49cE44D66b30360AB,,https://x.com/newleaf_fi,,,,,,,TRUE,FALSE
Newsroom AI,gxm1fo,https://www.nws.ai/,AI,,,,"Newsroom AI enables leading creators to build, amplify and measure high-value, AI-powered content experiences.",,EV3 Sal,,,,,,,,,true,false
Nexar,2qxdnh,https://www.getnexar.com/,NOT_DEPIN,,,,"Nexar is a premium dash cam brand that turns cars into vision sensors for a connected, collision-free world.",,EV3 Sal,,https://x.com/getnexar,,,,,,,true,false
NexBloc,i27v9c,https://www.nexbloc.com/,BLOCKCHAIN_INFRA,,,,"NexBloc is the primary provider of decentralized domain (dDNS) private label offerings for enterprises, institutions, government and other entities. ",,ZZ,,https://twitter.com/nexbloc,,https://t.me/nexbloc,https://medium.com/nexbloc,,https://www.linkedin.com/company/nexbloc/,,false,false
NexGen Cloud,gw1fz5,https://www.nexgencloud.com/,COMPUTE,,,,NexGen Cloud is a European Cloud & Web3 IaaS business providing solutions for Web2 & Web3 ecosystems.,,ZZ,,https://twitter.com/CloudNexgen,,,,,https://www.linkedin.com/company/nexgen-cloud,,true,false
Nexis,8i0772,https://nexis.network/,BLOCKCHAIN_INFRA,NATIVE,NZT,,Nexis Network is a layer-1 blockchain infrastructure powering the decentralization of data for the future of AI and interoperable blockchain economies.,L1/L2,ZZ,,https://twitter.com/Nexis_Network,931661205087617065,,,,,,true,false
Nextdata,3wnonl,https://www.nextdata.com/,NOT_DEPIN,,,,"Nextdata OS is a pioneering data mesh platform that simplifies the creation, sharing, and access of decentralized data products, revolutionizing analytics and machine learning.",,ZZ,,https://twitter.com/nextdatatec,,,,,https://www.linkedin.com/company/nextdata-technologies/about/,,true,false
Nexus,u7fpuf,https://nexus.io/,BLOCKCHAIN_INFRA,,NXS,nexus,"Nexus is a scalable, quantum-resistant blockchain securing a decentralized internet & OS, with auto-key management & free transactions.",,ZZ,,,,,,,,,true,false
NFAi,40loq1,https://nfa.ai/,AI,ETHEREUM,NFAI,not-financial-advice,"NFAi: decentralized hedge fund experiment focused on crypto data science, aiming to establish a profit-sharing fund.",,,,https://twitter.com/nfalabs,1065754973872341075,https://t.me/nfalabs,https://medium.com/@nfalabs,,,,true,false
NFPrompt,cellmj,https://nfprompt.io/,AI,BINANCE,NFP,nfprompt,"NFPrompt is the first Prompt Artist Platform in Web3, which lets users mint their imagination into an AI-generated NFT. Collectors and enthusiasts can buy/sell the NFT together with the prompt that was used to generate the image.",,ZZ,,,1101763314691870770,,,,,,true,false
NGPU,syctt0,https://ngpu.ai/,COMPUTE,,,,"NGPU is a decentralized edge computing platform that provides GPU computing nodes, allowing users to access cost-effective, high-performance GPU power for AIGC.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/ngpu_ai,,,,,,,true,false
NGRAVE,4tlww3,https://www.ngrave.io/,NOT_DEPIN,,,,NGRAVE is a blockchain company. Ngrave Zero is their air-gapped hardware wallet.,Wallet,,,https://twitter.com/ngrave_official,918179581201096765,,,https://github.com/ngraveio,https://www.linkedin.com/company/ngrave/,,true,false
nil Foundation,nnhjum,https://nil.foundation/,NOT_DEPIN,,,,"nil is a zkRollup that securely scales Ethereum to 60,000+ TPS through zkSharding, empowering web3 developers to build scalable, secure, and composable applications.",ZK,EV3 Sal,,,969303013749579846,,,,,,true,false
Nillion Network,qb5fdz,https://www.nillion.com/,COMPUTE,,,,Nillion is a secure computation network that decentralizes trust for high value data in the same way that blockchains decentralized transactions.,,ZZ,,https://twitter.com/nillionnetwork,905926225120338000,https://t.me/nillionnetwork,,,https://www.linkedin.com/company/nillionnetwork/,,true,false
Nimble,5x8vzf,https://www.nimble.technology/,AI,,NIMBLE,,"Nimble is building a composable AI protocol, enabling anyone to access state-of-the-art AI algorithms, data, and compute resources.",,ZZ,,,1139328143400894604,,,,,,true,false
Nimblr,gk11v5,https://asknimblr.com/,PENDING,,,,,,EV3 Sal,,https://x.com/asknimblr,,,,,,,TRUE,FALSE
Nimbus,yhzgfb,https://nimbusnetwork.io/,COMPUTE,ETHEREUM,NIMBUS,nimbus-network,"Nimbus Network is a decentralized computing platform offering scalable and secure GPU rentals through a peer-to-peer marketplace, leveraging AI-driven chatbots for seamless resource management and deployment.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/Nimbus_Network,,,,,,,true,false
Nina,gbaodd,https://www.ninaprotocol.com/,NOT_DEPIN,,,,Nina is a self-publishing protocol for musicians.,,,,,829052641408450571,,,,,,true,false
Nirmaan,86xq79,,AI,,,,Nirmaan is a decentralized AI mining service democratizing access to AI networks through token staking and expert resource allocation.,,EV3 Sal,,https://twitter.com/nirmaanai,,,,,,,true,false
Nirvana,u2tfjc,https://nirvanalabs.io/,BLOCKCHAIN_INFRA,,,,Nirvana Labs: web3 infrastructure for blockchain apps.,RPC/Indexing,,,https://twitter.com/nirvanalabsai,934672374379479162,,https://blog.nirvanalabs.io/,https://github.com/search?q=nirvana+labs,https://www.linkedin.com/company/nirvana-labs-ai,,true,false
Nitro League,5m6iby,https://www.nitroleague.com/,NOT_DEPIN,ETHEREUM,NITRO,nitro-league,Nitro League is a decentralized game where players earn tokens racing futuristic cars and completing missions.,Gaming,,,https://twitter.com/nitroleaguegame,905746313247879209,https://t.me/nitroleaguegame,,,https://www.linkedin.com/company/nitro-league/,,true,false
Nitro,6ieha4,https://nitro.network/,WIRELESS,AVALANCHE,NCASH,nitro-network,"Nitro Network is building the largest decentralized private communication network powered by IoT combined with LoRaWAN and 3G/4G/5G. ",,W. L.,,,934242516935524392,,,,,,true,false
NKN,xi19vn,https://nkn.org/,COMPUTE,ETHEREUM,NKN,nkn,NKN is a peer-to-peer network connectivity protocol that enables decentralized and secure communication between devices.,,ZZ,,https://twitter.com/NKN_ORG,443413382737952778,https://t.me/nknorg,,https://github.com/nknorg,https://linkedin.com/company/nknorg,,true,false
NNN,dthf5s,https://nnn.cloud/,COMPUTE,ETHEREUM,NNN,,"Node Nexus Network is a decentralized cloud infrastructure provider consisting of regional co-location facilities that offer managed services, cutting-edge quantum ledger technology, and AI on-chain capabilities.",Quantum,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/nnn_onX,,,,,,,true,false
Noble,lkpr69,https://www.noblenetworks.io/,PENDING,,,,,,,,https://x.com/noblenetworks_,,,,,,,true,false
NOBLEBLOCKS,t5iqmq,https://www.nobleblocks.com/,SCIENCE,ETHEREUM,NOBL,,"NOBLEBLOCKS is a decentralized platform for scientific publishing, leveraging blockchain to democratize scientific knowledge and offering collaborative research, publication, and rewards in a global community.",,ZZ,,https://twitter.com/nobleblocks,,,,,,,true,false
Node,cxj848,https://nodes.ai/,COMPUTE,ETHEREUM,GPU,nodeai,"Node AI is a decentralized platform designed to facilitate access to GPU and AI resources, enabling users to rent or lend GPU power, and earn rewards.",GPUs,ZZ,,https://twitter.com/NodeAIETH,,,,,,,true,false
Node.sys,6pha6z,https://nodesys.io/,SENSORS,BINANCE,NYS,,"Node.sys is a decentralized IoT platform that produces affordable, modular hardware nodes, enabling a global, self-replicating factory for IoT and IIoT devices within a secure and scalable blockchain network.",IoT,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/NodeSys,,,,,,,true,false
NodeKit,h00zot,https://www.nodekit.xyz/,BLOCKCHAIN_INFRA,,,,NodeKit SEQ is a decentralized shared sequencer built into a custom L1 blockchain which allows rollups to decentralize their sequencer and increase cross-rollup interoperability.,,vkurup.eth,,https://x.com/nodekitorg,,,,,,,true,false
NodelyAI,rs7z1b,https://www.nodelyai.com/,COMPUTE,ETHEREUM,NODE,,"NodelyAI is a decentralized platform that connects users to GPU resources, allowing them to rent, lend, and earn from GPUs while powering AI applications through a transparent and revenue-sharing ecosystem.",GPUs,0x395aB080688983b5a2F203B49cE44D66b30360AB,,https://x.com/NodelyAItoken,,,,,,,TRUE,FALSE
NodeOps,7qgg1c,https://nodeops.xyz/,AI,,,,"NodeOps provides AI Enabled simplified infrastructure specifically curated for Node Operators, and developers and designed to simplify the development process and operations for Web3 protocols.",,EV3 Sal,,,1199323224043950240,,,,,,true,false
Nodepay,exh8no,https://nodepay.ai/,AI,,,,Nodepay is a decentralized network that rewards users for contributing their internet resources for AI development.,,W. L.,,https://twitter.com/nodepay_ai,,,,,,,true,false
NodeShift,eivutq,https://nodeshift.com/,COMPUTE,,,,"NodeShift is a decentralized cloud provider that aims to commoditize storage and computing power, making it easier and more affordable for developers to build and host secure applications.",,ZZ,,https://twitter.com/nodeshiftcloud,,,,,,,true,false
NodeSynapse,zavzjq,https://nodesynapse.com/,COMPUTE,ETHEREUM,NS,nodesynapse,"NodeSynapse offers lend-and-rent nodes, RDPs, TPUs, Web3 infrastructure, web hosting, and GPU computing with a unique revenue-sharing model for token holders.",,ZZ,,https://twitter.com/nODESYNAPSE,,,,,,,true,false
nodeweb.ai,u69474,https://www.nodeweb.ai/,PENDING,,,,,,EV3 Sal,,https://x.com/nodewebai,,,,,,,true,false
Nodies,p5rdai,https://www.nodies.app/,BLOCKCHAIN_INFRA,,,,"NodiesDLB provides lightning-fast, decentralized RPC services and API endpoints, offering robust infrastructure, live tracking, and analytics for creating Web3 applications with high security and reliability.",RPC/Indexing,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/nodies_infra,,,,,,,true,false
Nodle,znawjs,https://www.nodle.com/,WIRELESS,ZKSYNC,NODL,nodle-network,Nodle is a smartphone-powered decentralized data network and payment infrastructure for IoT.,Positioning,W. L.,,https://twitter.com/nodlenetwork,783056826618216498,https://telegram.me/nodlecommunity,https://medium.com/nodle-io,https://github.com/NodleCode,https://www.linkedin.com/company/nodle,,true,false
noiseGPT,58bzlt,https://noisegpt.com/,AI,ETHEREUM,NOISEGPT,noisegpt,"NoiseGPT: decentralized AI ecosystem, offering unbiased and censorship-free AI tools and services.",,,,https://twitter.com/noisegpt,1079425803441426562,,https://medium.com/@noisegpt,,http://www.linkedin.com/company/noisegpt,,true,false
NomadPetition,fy5a0a,https://uprock.com/,NOT_DEPIN,,,,NomadPetition: Global citizens voices turned into actionable insights for governments.,,W. L.,,,,,,,,,true,false
NOMIX,9tpw0j,https://nomix.ai/,AI,,NOMIX,,"NOMIX is building a Collective Digital Immune System for Longevity using decentralized AI to create a framework for applications to analyze personal omics and biomarker data, incentivizing users to share data and receive personalized AI-based longevity recommendations.",Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/NOMIX_AI,,,,,,,true,false
Nomota,9qmbef,https://nomota.nl/,AI,ETHEREUM,NMAI,nomotaai,"Nomota AI is a crypto ecosystem offering innovative solutions such as chatbots, image, voice, and music generation, alongside a VPS/GPU marketplace.",,ZZ,,https://twitter.com/nomotaai,,,,,,,true,false
NoorNation,dwfwvv,https://noornation.com/,ENERGY,,,,NoorNation is an African Egypt-based renewable energy startup bridging life essentials through decentralized infrastructure solutions for less-served areas in Egypt and Sub-Saharan Africa.,,ZZ,,,,,,,https://www.linkedin.com/company/noornation/,,true,false
Nori,wy0s0u,https://nori.com/,ENERGY,,,,"Nori is a blockchain-based carbon removal marketplace that sells carbon credits to individuals and businesses to offset carbon emissions. Its marketplace provides financial rewards to farmers, who use regenerative farming practices that involve soil carbon sequestration.",,,,https://twitter.com/nori,,,https://nori.com/blog,https://github.com/nori-dot-eco,https://www.linkedin.com/company/noricarbonremoval/,,true,false
NORSE Labs,j7e4ys,https://norselabs.io/,WIRELESS,,,,NORSE Labs offers decentralized VPN and censorship circumvention solutions through a Telegram Mini App.,VPN,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/norselabs,,,,,,,true,false
NorthTensor,7xmv35,https://www.northtensor.ai/,AI,,,,Our mission is to catalyze the decentralized AI movement by strategically investing in and developing on the most promising projects in the space.,,,,https://twitter.com/NorthTensorAI,,,,,,,true,false
Nosana,hdcghq,https://www.nosana.io/,COMPUTE,SOLANA,NOS,nosana,Nosana is a decentralized crowd computing network revolutionizing the development process of Metaverse projects.,,Sami,,https://twitter.com/nosana_ci,236263424676331521,https://t.me/NosanaCI,https://nosana.medium.com/,https://github.com/nosana-ci,https://linkedin.com/company/nosana,,true,false
Nosh,k270zx,https://www.noshdelivery.co/,HUMAN_CAPITAL,,,,Nosh is a food delivery provider aiming to economically sustain independent restaurants through their delivery service.,,,,,,,,,http://www.linkedin.com/company/noshdelivery,,true,false
NOTT,xj38ji,https://nott.ai/,SENSORS,,NOTT,,"NOTT is an AI-powered DePIN wellness platform that integrates health data tracking, AI-driven insights, and a unique dual-token reward system to encourage proactive health management.",Health,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/nott_depin,1212320919335342101,https://t.me/nottdepin,,https://github.com/nott-ai,,,true,false
Notus,b4jy5r,https://notuslabs.org/,NOT_DEPIN,,,,Notus Labs is a decentralized blockchain platform for dapp development.,L1/L2,ZZ,,https://twitter.com/NotusLabs,,,https://medium.com/@notus-labs,https://github.com/notus-labs,https://www.linkedin.com/company/notus-labs,,true,false
Nous Research,vj5riw,https://nousresearch.com/,AI,,,,"Nous Research is a private applied research group. They publish open-source work in the LLM domain, including local models, datasets, and core architectural improvements.",,,,https://twitter.com/NousResearch,1053877538025386074,,,https://github.com/NousResearch,https://www.linkedin.com/company/nousresearch,,true,false
NovaNet,sc28us,https://www.novanet.xyz/,NOT_DEPIN,,,,NovaNet is a fast and highly portable peer-to-peer decentralized proving network for zero-knowledge proof.,ZK,EV3 Sal,,https://twitter.com/novanet_zkp,,,,,,,true,false
NovaRealChain,8igpcy,https://novarealchain.com/,ENERGY,,,,"Nova Real Chain is an RWA Layer-2 on Ethereum, Boosting Hydro Energy Yields. By combining computational power with real-world assets users can maximize their Hydro Mining Yields while contributing to a more sustainable and secure network.",,EV3 Sal,,https://twitter.com/novarealchain,,,,,,,true,false
NovaX,u9wqqu,https://novax.finance/,SENSORS,BINANCE,NOVAX,novax,"NovaX is a lifestyle fitness app that rewards users with blockchain tokens for engaging in physical activities like running, cycling, swimming, and yoga.",Health,EV3 Sal,,https://twitter.com/NovaXM2E,,,,,,,true,false
Novelty,epv76j,https://novelty.today/,NOT_DEPIN,,,,"novelty is Web3-based service for generating customizable decentralized identities: a readable, confirmed record of a person’s interests, skillset, accomplishments, and activities.",,ZZ,,,,,,,https://www.linkedin.com/company/novelty-today/,,true,false
NOYA,qh9grw,https://noya.ai/,NOT_DEPIN,,,,"NOYA executes scalable Omnichain DeFi Strategies using Smart Liquidity that uses AI to predict and optimize yields, bridging fees, slippage, and rewards",,ZZ,,https://twitter.com/networknoya,1100874221959249932,,,,,,true,false
nRide,x5z0mq,https://www.nride.com/,MOBILITY,,,,"nRide is developing a peer-to-peer ride-hailing protocol that connects riders and drivers directly, eliminating intermediaries.",,W. L.,,https://twitter.com/nRide12,1084777014537502800,,,https://github.com/nride,https://www.linkedin.com/company/nride/,,true,false
Nubila,mq14am,https://nubila.ai/,SENSORS,,,,"Nubila is building an environmental data network, empowering climate change and sustainability by acquiring accurate real-world data through DePIN and leveraging AI.",Environmental,ZZ,,https://twitter.com/nubilanetwork,,,,,,,true,false
Nuco Cloud,ldlosm,https://nuco.cloud/,COMPUTE,ETHEREUM,NCDT,nuco-cloud,"nuco.cloud is a decentralized mesh hyperscaler, providing scalable, sustainable computing power at significantly lower costs than traditional providers.",Storage,ZZ,,https://twitter.com/nucocloud,921502629551542332,https://t.me/officialnucocloudgroup,https://nucocloud.medium.com/,https://github.com/IronEagleCapital,https://www.linkedin.com/company/nuco-cloud,,true,false
Nuklai,avvhjq,https://www.nukl.ai/,BLOCKCHAIN_INFRA,AVALANCHE,NAI,nuklai,"Nuklai is a layer 1 blockchain infrastructure hosting a collaborative data ecosystem, providing world-class data to power the next generation of AI and Large Language Models (LLMs).",L1/L2,ZZ,,https://twitter.com/NuklaiData,,,,,,,true,false
Nulink,mdyk9b,https://www.nulink.org/,NOT_DEPIN,,,,NuLink is a Web3-based ZK Provable Data Privacy Solution for DApps.,ZK,EV3 Sal,,https://twitter.com/NuLink_,,,,,,,true,false
Numbers Protocol,9a91pe,https://www.numbersprotocol.io/,BLOCKCHAIN_INFRA,NATIVE,NUM,numbers-protocol,Numbers Protocol is an open and decentralized protocol designed to ensure provenance for all types of creative works created by humans & AI.,,ZZ,,https://twitter.com/numbersprotocol,,,,,,,true,false
Numerai,lw588k,https://numer.ai/,AI,ETHEREUM,NMR,numeraire,Numerai is an Ethereum-based platform for developers to experiment and create machine learning models.,,,,https://twitter.com/numerai,894652647515226152,https://t.me/NMR_Official,https://medium.com/numerai,https://github.com/numerai,http://www.linkedin.com/company/numerai,,true,false
NuNet,6wpm8m,https://www.nunet.io/,COMPUTE,ETHEREUM,NTX,nunet,NuNet is a computing framework that offers global distributed computing power and storage for decentralized networks.,,ZZ,,https://twitter.com/nunet_global,1033727051158536242,https://t.me/NuNet_community,https://medium.com/nunet,,https://www.linkedin.com/company/nunet-global/,,true,false
Nutbox,45u6hy,https://nutbox.io/,BLOCKCHAIN_INFRA,,,,Nutbox is a web3 DAO infrastructure enabling users to easily build blockchain-based organizations.,,,,https://twitter.com/NutboxDao,767954342132318260,https://t.me/nutbox_defi,https://medium.com/@nutbox.dao,https://github.com/nutbox-dao,http://www.linkedin.com/company/nutbox-defi,,true,false
Nuveaux,epici3,https://nuveauxtrading.com/,NOT_DEPIN,,,,Stealth trading system in progress.,,,,,,,,,,,true,false
Nuvola,tdi0e3,https://www.nuvoladigital.io/,COMPUTE,CARDANO,NVL,nuvola-digital,"Nuvola Digital is a network expansion protocol that removes the barrier to entry for average users, allowing them to participate in the decentralized storage and computing revenue-sharing models.",Storage,ZZ,,https://twitter.com/NuvolaDigital,1223034284529422356,,https://nuvoladigital.medium.com/,,,,true,false
NW FIT,gad7lo,https://ninjawarriorsmeta.com/,HUMAN_CAPITAL,POLYGON,NWT,ninja-warriors,NW FIT combines AI-powered personalized fitness coaching with a move-to-earn model to help users achieve their health goals while earning rewards.,Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/NinjaWOfficial,,,,,,,TRUE,FALSE
Nym,5gc718,https://nymtech.net/,WIRELESS,ETHEREUM,NYM,nym,"Nym protects communication patterns, IP addresses and metadata for end-users, enterprise and infrastructure operators",,,,https://twitter.com/nymproject,824256813200834580,https://t.me/nymchan,https://blog.nymtech.net/,https://github.com/nymtech,http://www.linkedin.com/company/nymproject,,true,false
NyxCarbon,8uw08l,https://nyxcarbon.net/,RWA,,,,"NyxCarbon is a lending platform for carbon removal and ecosystem restoration, leveraging AI and Web3 to allow businesses to sell carbon certificates and unlock RWAs by linking real-time climate data with financing for sustainability projects.",Environmental,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,,,,,,,,true,false
o.xyz,buw8a1,https://o.xyz/,AI,,O,,"O.bot is a network and marketplace of open-source AI agents utilizing confidential computing on Ionet's Apple Neural Engine clusters, ensuring privacy, scalability, and community-driven development within the expanding IO Ecosystem.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/oxyz_official,,,,,,,true,false
Oamo,74kro7,https://www.oamo.io/,BLOCKCHAIN_INFRA,,,,Oamo is a decentralized data broker that empowers internet users to own and monetize the value of their data,,ZZ,,https://twitter.com/Oamo_io,1104117518471270460,,https://medium.com/@Oamo_io,,https://ca.linkedin.com/company/oamo-io,,true,false
Oasis AI,bv4ah1,https://www.oasis.ai/,AI,,OAI,,"Oasis AI is a provider of a platform that offers AI services such as chat assistants, image generators, and speech-to-text. Users can earn $OAI by connecting to their network and leveraging existing GPU and CPU resources to power supported models.",,W. L.,,https://twitter.com/OasisAI,,,,,,,true,false
Oasis Network,6exf75,https://oasisprotocol.org/,NOT_DEPIN,COSMOS,ROSE,oasis-network,"Oasis is a L1 blockchain network designed to be uniquely scalable, privacy-first and versatile. The Network has two main architectural components, the consensus layer and the ParaTime layer.",,,,,748635004384313474,,,,,,true,false
Oasis X,fkm4rm,https://oasisx.world/,PENDING,,,,,,EV3 Sal,,https://x.com/oasisxworld,,,,,,,TRUE,FALSE
Obi,0ixv4e,https://www.rideobi.com/,HUMAN_CAPITAL,,,,"Obi - The cheapest ride, every time.",,EV3 Sal,,,,,,,,,true,false
OBJECTS,2wq780,,PENDING,,,,"OBJECTS is creating a personalized ecosystem for making any object, anywhere. ",,EV3 Sal,,,,,,,,,TRUE,FALSE
Obligate,v187v2,https://www.obligate.com/,BLOCKCHAIN_INFRA,,,,"Obligate is a revolutionary fintech company leveraging blockchain to streamline the debt securities market, reducing issuance time and cutting costs.",,ZZ,,,,,,,,,true,false
Obol,56jqa5,https://obol.tech/,NOT_DEPIN,,,,"The Obol Network is an Ethereum-aligned Distributed Validator Middleware for trust-minimized staking that enables people to create, test, run & co-ordinate distributed validators.",,,,,849256203614945310,,,,,,true,false
OBORTECH,c95uzb,https://www.obortech.io/,SENSORS,ETHEREUM,OBOT,obortech,"OBORTECH is developing a decentralized and democratic collaboration ecosystem called Smart Hub, a unified communication and data exchange hub underpinned by blockchain and IoT for all actors in the supply chain.",,ZZ,,https://twitter.com/OBORTECHhub,,,,,,,true,false
OCADA,v3qxn4,https://ocada.ai/,AI,SOLANA,OCADA,,"OCADA leverages distributed AI to simplify and enhance the blockchain user experience through a suite of intelligent agents designed to perform an extensive array of tasks, from simple, routine actions to complex, technical operations.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/ocada_ai,,,,,,,true,false
Ocean,qbhkmt,https://oceanprotocol.com/,BLOCKCHAIN_INFRA,ETHEREUM,OCEAN,ocean-protocol,Ocean Protocol is a data exchange protocol enabling decentralized data sharing and monetization.,,,,https://twitter.com/oceanprotocol,612953348487905282,https://t.me/OceanProtocol_Community,https://medium.com/@TeamOcean,https://github.com/oceanprotocol,http://www.linkedin.com/company/ocean-protocol,,true,false
OceanFi,cq1hg8,https://oceanfi.io/,SENSORS,,,,"OceanFi is an innovative fitness app that combines blockchain with AI personalization, offering a wellness ecosystem for activities such as bodyweight exercises, yoga, and breathing techniques.",Health,EV3 Sal,,https://twitter.com/OceanFi2023,,,,,,,true,false
OctaSpace,eppbxs,https://octa.space/,COMPUTE,NATIVE,OCTA,octaspace,OctaSpace is a decentralized cloud computing network.,Storage,W. L.,,,973249548245925958,,,,,,true,false
Octavia,od7ysn,https://octavia.one/,AI,BINANCE,VIA,octavia,"Octavia is a definitive AI Crypto and Web3 assistant designed to revolutionize Web3 trading, researching, and managing Web3 communities.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/octaviatoken,1087639752901132300,https://t.me/octaviaai,https://medium.com/@OctaviaToken,https://github.com/Octavia-Labs,,,true,false
Octo Prestige,2gu4kb,https://token.octoprestige.com/,PENDING,,,,,,EV3 Sal,,https://x.com/octoprestige,,,,,,,true,false
OdinSilver,7lm2ba,https://www.odinsilver.com/,PENDING,,,,,,EV3 Sal,,,,,,,,,TRUE,FALSE
Off Radar VPN,ys9t41,https://www.offradarvpn.com/,WIRELESS,ETHEREUM,ORV,,Off Radar VPN provides a decentralized architecture-based VPN service that minimizes vulnerabilities and protects users' privacy with military-grade encryption and zero-log policies.,VPN,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/offradarvpn,,,,,,,true,false
Oh,2l7dyz,https://www.oh.xyz/,AI,,OH,,"Oh is a decentralized, uncensored AI platform that enables users to create, own, and monetize hyper-immersive AI characters and experiences through a dynamic, blockchain-powered ecosystem.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/oh_dot_xyz,,,,,,,TRUE,FALSE
OHM3,ckqdf4,https://ohm3.io/,ENERGY,ETHEREUM,OHM3,,"OHM3 is building a decentralized energy network that leverages blockchain and ReFi to create a transparent, secure, and efficient energy ecosystem where individuals and organizations can participate in and benefit from renewable energy.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/ohm3dis,,,,,,,TRUE,FALSE
Ojo,e21cru,https://ojo.network/,BLOCKCHAIN_INFRA,,,,Ojo is a decentralized security-first oracle network built to securely support ecosystem-native assets. Ojo sources price data from a catalog of on and off-chain sources and uses advanced security mechanisms to guarantee the integrity of the data.,Oracle,ZZ,,https://twitter.com/ojo_network,1005907209907097610,,,,,,true,false
Okam,c73fu6,,PENDING,,,,,,ZZ,,https://twitter.com/okam_ai,,,,,,,true,false
Ola,ajkc7b,https://www.olavm.org/,NOT_DEPIN,,,,"Ola is an open-source hybrid ZK-Rollup that contributes to a fair, decentralized, permissionless web3 world by empowering users through data ownership.",ZK,ZZ,,,1072351792110784603,,,,,,true,false
OliveX,ww19sz,https://www.dosetoken.com/,SENSORS,ETHEREUM,DOSE,dose,"OliveX is a gamified fitness metaverse platform that enables real-world fitness to merge with the digital universe in order to engage consumers with brands, influences, and coaches.",Health,ZZ,,https://twitter.com/olivexai,,,,,,,true,false
Olympia Ai,rofw8j,https://olympiaai.io/,AI,ETHEREUM,PIA,olympia-ai,"Olympia AI integrates advanced AI with DePIN to offer AI tools, such as an AI assistant bot, AI all-in-one SaaS platform, faceswap AI, voice AI, image generator bot, and GPU and VPS rental bot for businesses to customize products and services.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/aiolympia,,,,,,,true,false
OmaiPi,ij9nw3,,AI,,OPI,,"OmaiPi is a tap-to-earn Telegram bot where users earn token rewards for contributing valuable data to train AI models, helping to develop personalized super AI agents in a decentralized network.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/optimainetwork,,,,,,,TRUE,FALSE
OMEGA Labs,9gnf5s,https://anytoany.omegatron.ai/,NOT_DEPIN,BITTENSOR,,,"OMEGA Labs is the builder of the largest open-source, decentralized, multimodal dataset for AGI research, powered by Bittensor.",,EV3 Sal,,https://twitter.com/omegalabsai,,,,,,,true,false
OMNIA,o3o8v9,https://omniatech.io/,BLOCKCHAIN_INFRA,ETHEREUM,OMNIA,,"OMNIA Protocol is a high-performance, decentralized RPC provider, enabling blockchain access with advanced security. ",RPC/Indexing,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/omnia_protocol,,,,,,,true,false
OmniEdge,hy1un6,https://omniedge.io/,WIRELESS,,,,OmniEdge is an Open source P2P layer 2 VPN infrastructure based on the n2n protocol.,VPN,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/omniedgeio,,,,,,,true,false
Omo,puytcq,https://www.omoprotocol.ai/,NOT_DEPIN,,,,Omo is a modular asset management protocol powered by On-Chain Agents.,,EV3 Sal,,https://x.com/omoprotocol,,,,,,,true,false
Onairos,xx5dtr,https://onairos.uk/,AI,,,,Onairos is a browser extension that integrates advanced AI/ML models and blockchain technology to help users create secure digital identities that empower them to control and monetize their online data.,Data,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/onairosapp,,,,,,,true,false
onaji,774cer,https://onaji.io/,AI,,,,"onaji is an ML infrastructure for blockchain asset market intelligence. The modular trading technology uses ML to contextualize digital assets and anticipate individual trader behaviors and market movements. ",,EV3 Sal,,https://twitter.com/onaji_AI,,,,,,,true,false
OnchainToolkit,r89wwl,https://www.onchaintoolkit.com/,NOT_DEPIN,,,,"OnchainToolkit is a multichain trading ecosystem equipped with smart autonomous AI Agents supercharged with GPUs, Fiat On-Ramp, and crosschain swaps.",,ZZ,,https://twitter.com/OnchainToolkit,,,,,,,true,false
One Garden AI,wv8711,https://onegarden.io/,AI,SOLANA,OGAI,,"One Garden AI is a Solana-powered platform integrated into Telegram, offering AI-driven plant identification, disease diagnosis, and personalized gardening advice, powered by distributed GPU nodes.",Inferencing,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/onegardenio,,,,,,,TRUE,FALSE
ONI Protocol,wnst0x,https://oniprotocol.io/,COMPUTE,BINANCE,ONI,,"ONI Protocol is a decentralized platform that utilizes DePIN and AI to offer GPU node rentals, cross-chain trading, and AI-powered tools, enabling users to profit from mining, DeFi activities, and blockchain validation.",GPUs,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/OniProtocol,,,,,,,TRUE,FALSE
ONINO,vybtqu,https://www.onino.io/,NOT_DEPIN,BINANCE,ONI,oni-token,ONINO enables developers to create identity-based dapps with privacy by default.,L1/L2,ZZ,,https://twitter.com/onino_io,969202888565993533,,https://medium.com/@OninoOfficial/5becebdee2fb,https://github.com/ONINO-IO,https://de.linkedin.com/company/onino-io,,true,false
Oniri,s8n10q,https://www.oniri.io/,NOT_DEPIN,,,,"Oniri is the world leading app related to dreams, helping people remember, understand and control their dreams.",,,,,,,,,http://www.linkedin.com/company/oniriapp,,true,false
Only1,ennb7m,https://only1.app/,BLOCKCHAIN_INFRA,SOLANA,LIKE,only1,Only1 is a membership-based social platform to enable creators to earn and engage with fans.,,,,https://twitter.com/JoinOnly1,842169399272013824,https://t.me/only1nft,,https://github.com/only1nft,https://www.linkedin.com/company/joinonly1/,,true,false
Onocoy,n77nem,https://www.onocoy.com/,SENSORS,SOLANA,,,Onocoy is a decentralized GNSS reference station network enabling high-precision geopositioning.,Positioning,,,https://twitter.com/onocoyRTK,1019999556747935794,,https://www.onocoy.com/news,https://gist.github.com/nathandem/0caa1b01a21ffe4d9a8f4c264ebf0c13,https://linkedin.com/company/onocoy,,true,false
Oone World,w8cnxv,http://oone.world/,MOBILITY,,,,OONE World is a blockchain-based sustainable driving app that optimizes fuel usage and offers rewards for eco-driving.,,ZZ,,https://twitter.com/Oone_World,1041322480662499369,,,,,,true,false
Oort,apu26o,https://www.oortech.com/,COMPUTE,,,,"Oort is an AI-powered data cloud that unifies compute and storage resources, maximizing privacy and savings.",Storage,ZZ,,https://twitter.com/oort_io,845638507610243152,https://t.me/oortechkorea,,,https://www.linkedin.com/company/oort-inc/,,true,false
Opacity Network,b7vyhm,https://www.opacity.network/,PENDING,,,,,,,,https://x.com/OpacityNetwork,,,,,,,TRUE,FALSE
Opacity,5276zx,https://www.opacity.io/,COMPUTE,ETHEREUM,OPCT,opacity,"Opacity is a secure, blockchain-based file storage service that ensures anonymity and encryption.",Storage,,,,,,,,,,false,false
OpClouds,getu2x,https://opclouds.tech/,COMPUTE,ETHEREUM,OPC,opclouds,"OpClouds is a decentralized Computing-Resource-as-a-Service (CRaaS) platform that provides GPU/VM rentals, GPU Cloud mining & AI Train-to-Earn for individuals and enterprises.",,ZZ,,https://twitter.com/opclouds_tech,,,,,,,true,false
Open Campus,uuubzi,https://www.opencampus.xyz/,NOT_DEPIN,,,,"Open Campus utilizes a new protocol allowing communities to create, own, and promote content they want to see in the world and enables educators to earn revenue and gain recognition for their contributions.",,EV3 Sal,,,1088034981814738995,,,,,,true,false
Open Forest Protocol,cu066p,https://www.openforestprotocol.org/,RWA,,,,"Open Forest Protocol (OFP) is a platform that allows forest projects of any size, anywhere in the world, to measure, report, and verify forest data on a blockchain. ",,EV3 Sal,,https://twitter.com/OpenForest_,,,,,,,true,false
OPEN GPU,5ivasm,https://opengpu.network/,COMPUTE,ETHEREUM,OGPU,open-gpu,"OPEN GPU Network is a decentralized GPU Ecosystem that aims to optimize global AI research through scalable, decentralized GPU computing infrastructure. ",,ZZ,,https://twitter.com/openGPUnetwork,1083646475608784906,,,,,,true,false
Open Systems,4bsgjw,https://opensystems.dev/,PENDING,,,,,,EV3 Sal,,https://x.com/Opnsystm,,,,,,,true,false
OPEN Ticketing Ecosystem,0pkfmg,https://onopen.xyz/,NOT_DEPIN,,OPN,,"OPEN is an ecosystem of builders, projects, and backers with the shared goal of bringing the ticketing industry on-chain through state-of-the-art accessible infrastructure that anyone can build upon and integrate for their ticketing needs.",,EV3 Sal,,https://twitter.com/onopenxyz,,,,,,,true,false
OpenAgents,zh7o1l,https://openagents.com/,AI,,,,"OpenAgents is a platform for building, selling and using AI agents.",Agents,ZZ,,https://twitter.com/OpenAgentsInc,,,,,,,true,false
OpenCann,wjnlyt,https://www.opencann.net/,SCIENCE,,,,"OpenCann DAO is a global community of cannabis consumers, researchers, and open-access public goods with a mission to accelerate the development of new botanical-derived therapeutics and incentivize participation in open-source cannabis research.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/opencann_,,,,,,,true,false
OpenChat,689ist,https://oc.app/,PENDING,,,,,,EV3 Sal,,https://x.com/openchat,,,,,,,TRUE,FALSE
Openfabric AI,vzfbpq,https://openfabric.ai/,AI,BINANCE,OFN,openfabric,"Openfabric AI is a decentralized AI platform that allows users to create, share, and monetize AI services at scale.",,ZZ,,https://twitter.com/openfabricai,1080095228171665418,https://t.me/OpenFabricAI,https://openfabric.ai/blog,https://github.com/Openfabric,https://www.linkedin.com/company/openfabricai/,,true,false
OpenGradient,rf20bh,https://opengradient.ai/,PENDING,,,,,,,,https://x.com/OpenGradient,,,,,,,TRUE,FALSE
OpenLayer,fbp949,https://www.openlayer.tech/,WIRELESS,,,,"OpenLayer is a modular, authentic, and verifiable data layer that brings trustworthy data to both web2 and web3 companies by enabling users to contribute their underutilized internet resources for web scraping.",Data,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/OpenLayerHQ,1083442242569633844,https://t.me/OpenLayerHQ,,,,,true,false
Openledger,f030dd,https://www.openledger.xyz/,BLOCKCHAIN_INFRA,,,,OpenLedger is a sovereign data blockchain for AI that empowers builders to create smarter and more performant models with verifiable data by providing permissionless infrastructure for the data lifecycle.,,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/OpenledgerHQ,,,,,,,true,false
Openmesh,pyzsba,https://www.openmesh.network/,COMPUTE,,,,"Openmesh is building a decentralized data infrastructure aimed at storing important global data without a middleman, starting with Web3 data.",Data,W. L.,,https://x.com/OpenmeshNetwork,1064664267342762095,https://t.me/openmesh,https://blog.openmesh.network/,,https://www.linkedin.com/company/openmesh/,,true,false
OpenRank,i50yyy,https://openrank.com/,BLOCKCHAIN_INFRA,,,,OpenRank is building a decentralized reputation protocol to enable developers to create applications and run communities using an open ranking and recommendation layer.,,ZZ,,,,,,,,,true,false
OpenSand,4heaha,https://opensand.ai/,BLOCKCHAIN_INFRA,,,,"OpenSand is an on-chain trustworthy AGI governance protocol that leverages decentralized storage, hybrid consensus mechanisms, and zero-knowledge proofs, to create AGIs that are transparent, auditable, and reflective of diverse community values.",,EV3 Sal,,https://twitter.com/opensand_ai,,,,,,,true,false
OpenServ,7x2h0s,https://openserv.ai/,AI,,OPEN,,OpenServ is a Marketplace for Autonomous AI Agents.,Agents,ZZ,,https://twitter.com/openservai,1176767100350644254,,,,,,true,false
Opensquare,u11wz8,https://www.opensquare.network/,COMPUTE,POLKADOT,OSN,,"Opensquare is building a decentralized, trusted collaboration network. The collaboration data will be stored on blockchain, and personal credit will be built on it.",,,,,,,,,,,true,false
Operator,h3eeod,https://operator.io,AI,,,,"Build and deploy agents truly owned by you, then make them available to the world. Now in closed beta.",,EV3 Sal,,,,,,,,,true,false
Opis,jduldq,https://opisgroup.io/,COMPUTE,,,,"Opis Group is a British blockchain tech company focusing on computing, cloud, and gaming apps.",,ZZ,,,,,,,https://www.linkedin.com/company/opis-group-ltd/,,false,false
Opolis,ees7sx,https://opolis.co/,HUMAN_CAPITAL,,,,"Opolis is a member-owned digital employment platform that uses blockchain technology to supply tools that independent workers can use to manage their employment benefits, payroll, and shared services.",,,,https://twitter.com/opolis,,,,,,,true,false
OpSci,gpblju,https://www.opsci.xyz/,SCIENCE,,,,"OpSciA is a decentralized science framework for web-native research and fostering digital collaboration. ",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/opscientia,,,,,,,true,false
OpSec,bmg83m,https://opsec.computer/,COMPUTE,ETHEREUM,OPS,opsec,"OpSec Ecosystem is a privacy-focused network dedicated to making operations on the cloud very seamless and efficient. OpSec decentralized cloud solutions range from high-level nodes to light-speed router devices, GPUs, and hosting services.",,ZZ,,,1213162576918093844,,,,,,true,false
Optimism,3lytvj,https://www.optimism.io/,NOT_DEPIN,NATIVE,OP,optimism,OP Mainnet is a low-cost and lightning-fast Ethereum L2 blockchain that uses optimistic rollups. Optimism also has a Superchain thesis. This is the idea of connecting multiple Layer 2 networks through shared code and the ability to interact with each other.,,,,,667044843901681675,,,,,,true,false
Optopia,xdqku3,https://www.optopia.ai/,BLOCKCHAIN_INFRA,NATIVE,OPAI,,"Optopia is an AI-driven, intent-centric Layer2 network that allows permissionless intent creation and leverages tokenomics to drive AI agents in executing these intents.",L1/L2,ZZ,,https://twitter.com/Optopia_AI,1197014811674951816,,,,,,true,false
Ora,l6awms,https://www.ora.io/,BLOCKCHAIN_INFRA,,,,Ora is a programmable zkOracle for blockchain security and developer empowerment.,Oracle,,,https://twitter.com/OraProtocol,1021130462317523027,,https://hyperoracle.medium.com/,https://github.com/hyperoracle,http://www.linkedin.com/company/hyperoracle,,true,false
Oraichain,qzneji,https://orai.io/,AI,ETHEREUM,ORAI,oraichain-token,Oraichain is an IBC-enabled Layer 1 to verify multidimensional trustworthiness of AI and to build Web3 applications with a unique AI oracle.,,ZZ,,https://twitter.com/oraichain,943096297735487488,https://t.me/oraichain,https://oraichain.medium.com/,https://github.com/oraichain,http://www.linkedin.com/company/oraichain,,true,false
Orakl,01mwsx,https://orakl.network/,BLOCKCHAIN_INFRA,,,,"Orakl Network is a fast, reliable native token oracle that provides Data Feed, Verifiable Random Function, Request-Response, and Proof of Reserve solutions.",Oracle,ZZ,,https://twitter.com/oraklnetwork,,,,,,,true,false
OrbitDB,fhc73t,https://orbitdb.org/,PENDING,,,,,,ZZ,,https://x.com/orbit_db,,,,,,,true,false
Orbiter One,it6gll,https://orbiter.one/,NOT_DEPIN,NATIVE,ORBIT,,Orbiter One is a decentralized peer-to-peer lending protocol focused on developing a seamless cross-chain lending experience between high liquidity blockchains.,,EV3 Sal,,https://twitter.com/OrbiterOne,,,,,,,true,false
Orbofi AI,1sydts,https://www.orbofi.com/,AI,ETHEREUM,OBI,orbofi-ai,"Orbofi is the ultimate AI-generated content engine for web3, games, and every online community.",,,,https://twitter.com/Orbofi,935221939797127309,https://t.me/orbofi,https://orbofi.medium.com/,,https://www.linkedin.com/company/orbofi/,,true,false
Orbuculum,7tvays,https://orbuculum.xyz/,NOT_DEPIN,,,,Orbuculum is a synthetic (Earth Observation) data platform powered by community-driven Data & AI model monetization and multi-party collaboration.,,ZZ,,https://twitter.com/dlt_eo,,,,,https://www.linkedin.com/company/dlteo-gmbh,,true,false
OrcaCompute,373ldw,https://www.orcacompute.com/,COMPUTE,,,,Orca is a decentralized application layer providing scalable infrastructure and computing power for DePIN and AI projects.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/OrcaCompute,,,,,,,true,false
Orchai,h6vfie,https://orchai.io/,AI,,,,Orchai: AI-powered DeFi platform optimizing asset flow.,DeFi,,,https://twitter.com/orchai_protocol,1001025635302522960,https://t.me/orchaiofficial,,,https://www.linkedin.com/company/orchai/,,true,false
Orchid,vg1qec,https://www.orchid.com/,WIRELESS,ETHEREUM,OXT,orchid-protocol,Orchid is a decentralized onion routing network incentivized through multi-hop VPN clients.,VPN,W. L.,,https://twitter.com/OrchidProtocol,804699025709465610,https://www.t.me/OrchidOfficial,,https://github.com/OrchidTechnologies,https://www.linkedin.com/company/orchidprotocol,,true,false
Ore,o17tkv,https://ore.supply/,BLOCKCHAIN_INFRA,SOLANA,ORE,,"Ore is a digital currency that users can mine from anywhere, at home or on their phone. It uses a novel proof-of-work algorithm to guarantee no miner can ever be starved out from earning rewards.",,ZZ,,https://twitter.com/OreSupply,,,,,,,true,false
ORIGIN Storage,4war5q,https://www.originstorage.io/,COMPUTE,,,,"DePIN Labs/ORIGIN Storage provides AI, ZK, and DePIN stable intelligence computational services such as Origin-ZK Mining Solutions, easy and secure storage on IPFS and Filecoin Network, and Turnkey FIL Mining.",Storage,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/depin_labs,,,,,,,true,false
Origin,5kkva3,https://www.useorigin.com/,NOT_DEPIN,,,,Origin Systems is a company that simplifies the process of getting started with LLMs.,,,,https://twitter.com/useorigin,,,,,https://www.linkedin.com/company/origin-financialsf/,,true,false
OriginTrail,v9wsjb,https://origintrail.io/,AI,POLKADOT,TRAC,origintrail,OriginTrail is a decentralized knowledge graph enabling trustless knowledge sharing for everyone.,Mobile,ZZ,,https://twitter.com/origin_trail,460837319025623050,https://t.me/origintrail,https://medium.com/origintrail,https://github.com/OriginTrail,http://www.linkedin.com/company/origintrail,,true,false
Otacon,4fbpu6,https://otacon.ai/,AI,ETHEREUM,OTACON,otacon-ai,"Otacon is a cybersecurity protocol that bridges the gap between cybersecurity demand and supply, by enabling anyone with a computer to become a Bug Bounty Hunter.",,Mahesh | Escape Velocity,,,1097834584693035078,,,,,,true,false
OTalk,sbtjlm,,COMPUTE,,OTCP,,"OTalk is a decentralized Web3 streaming platform where users and creators collaborate to produce and share media content, earning rewards and contributing computing power through interaction, creation, and promotion.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/otalkweb3,,,,,,,TRUE,FALSE
Othentic,krz8o6,https://www.othentic.xyz/,BLOCKCHAIN_INFRA,,,,Othentic Stack is a library of components to build distributed systems in the shared security environment.,,ZZ,,https://twitter.com/0xOthentic,,,,,,,true,false
OtoCo,h8fk7d,https://otoco.io/,BLOCKCHAIN_INFRA,,,,"OtoCo builds tools for forming, funding, and governing legal entities on blockchain.",Legal,ZZ,,https://twitter.com/otoco_io,,https://t.me/TheRoadToOtoco,,https://github.com/otoco-io,https://linkedin.com/company/otoco,,true,false
Our Eden,y6a2r1,https://oureden.io/,SENSORS,,EDN,,"Eden is a mobile app that rewards users with cryptocurrency for mapping wild edible plants, offering educational resources and a marketplace for natural products, powered by Web3, AI, and AR technologies.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd747,,https://x.com/OurEden_io,,,,,,,TRUE,FALSE
Over the Reality,140geb,https://www.overthereality.ai/,SENSORS,ETHEREUM,OVR,ovr,Over the Reality is a Spatial Computing AR Platform that allows users to create immersive digital versions of actual locations using their smartphones and earn rewards.,,ZZ,,https://twitter.com/OVRtheReality,814234662888407141,,,,,,true,false
Overlai,fy5d5m,https://www.overlai.app/,BLOCKCHAIN_INFRA,,,,"Overlai is an AI photo protection app for creators that combines Distributed Ledger Technology (DLT), decentralized storage, and advanced watermarks to protect photos from being added to AI datasets.",,ZZ,,https://twitter.com/overlai_app,,,,,,,true,false
Overlay,5zte11,https://overlay.market/#/,PENDING,,,,,,EV3 Sal,,https://x.com/OverlayProtocol,,,,,,,TRUE,FALSE
Overtime,ak9wb5,https://www.overtimemarkets.xyz/,NOT_DEPIN,,,,THE WEB3 SPORTS MARKETS REVOLUTION,,EV3 Sal,,,906484044915687464,,,,,,true,false
OVOO,xmgk65,https://ovoo.pl/,WIRELESS,,,,"OVOO is a Telco systems development company that offers Online Charging Systems, Real-time recharging systems, VPABX, and eSIM solutions.",,EV3 Sal,,,,,,,,,true,false
Owl,ok01cq,https://owlnetwork.xyz/,ENERGY,,OWL,,Owl is a decentralized network of phone charging stations.,,EV3 Sal,,,,,,,,,true,false
OxAI,x3l1h6,https://oxai.com/,AI,ETHEREUM,OXAI,oxai-com,OxAI: Decentralized AI & blockchain for accessible secure computation.,,,,https://twitter.com/oxfordai,1067787661076594698,,https://medium.com/oxai,,https://www.linkedin.com/company/oxai/,,true,false
OXIO,q56fbx,https://oxio.com/,PENDING,,,,,,EV3 Sal,,https://x.com/oxio_com,,,,,,,true,false
Oz,79wj8l,https://ozprotocol.com/,PENDING,,,,,,ZZ,,https://x.com/OzProtocol,,,,,,,TRUE,FALSE
P00LS,6bqyjx,https://www.p00ls.io/,NOT_DEPIN,ETHEREUM,00,00-token,"P00LS is a social token platform and decentralized exchange for creator cryptocurrencies, where creators can issue their own tokens and fans can trade them.",,ZZ,,https://twitter.com/p00ls_,885262342634487828,,https://medium.com/@P00LS,,https://www.linkedin.com/company/p00ls/,,true,false
PAAL AI,wmad1s,https://www.paal.ai/,AI,ETHEREUM,PAAL,paal-ai,PAAL AI is a powerful ecosystem leveraging advanced AI and ML technologies to enable users to create personalized AI bots for integration across multiple platforms or directly within their apps.,,ZZ,,https://x.com/PaalMind,1112405068717768824,https://t.me/paal_ai,,,,,true,false
Pacific NW Rural Broadband,6lqv0x,https://nwbroadbandalliance.org/,NOT_DEPIN,,,,The Pacific Northwest Rural Broadband Alliance is a registered non-profit ISP dedicated to facilitate the adoption of next generation blockhain-based decentralized infrastructure technologies.,,,,,834465390028521512,,https://nwba.medium.com/,,https://www.linkedin.com/company/nw-rural-broadband-alliance/,,false,false
PADO,8r4u2i,https://www.padolabs.org/,COMPUTE,,,,PADO is a decentralized computation network leveraging fully homomorphic encryption (FHE) and zero-knowledge proof (ZKP) to revolutionize the processing and protection of sensitive information.,ZK,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/padolabs,,,,,,,true,false
PADS,dqmv0o,https://www.padsfinancial.com/,BLOCKCHAIN_INFRA,,,,Pads Financial is a Montreal based Fintech startup serving Canadian homeowners.,,,,,,,,,,,true,false
PaLM,5m1p6r,https://palmai.tech/,AI,ETHEREUM,PALM,palm-ai,"PaLM AI is a versatile AI chatbot that operates across multiple platforms, leveraging Google's AI technology to provide comprehensive conversational, coding, image generation, and vision capabilities",,ZZ,,,,,,,,,true,false
Pano AI,111p2s,https://www.pano.ai/,SENSORS,,,,Pano AI detects wildfires using deep learning AI & computer vision for real-time event identification & classification.,Environmental,ZZ,,https://twitter.com/Pano_AI,,,,,https://www.linkedin.com/company/pano-ai/about/,,true,false
Panther,srjeix,https://www.pantherprotocol.io/,NOT_DEPIN,ETHEREUM,ZKP,panther-protocol,Panther is a cross-protocol layer that uses zero-knowledge technology to build DeFi solutions that meet regulatory requirements and satisfy users' on-chain data privacy needs.,ZK,ZZ,,,,,,,,,true,false
Paradex,h4uvxu,https://www.paradex.trade/,NOT_DEPIN,,,,Paradex is a ZK powered Layer 2 network custom built for high-performance derivatives trading.,L1/L2,,,,1107916848193863740,,,,,,true,false
Paragon,ts6rit,https://networkparagon.io/,COMPUTE,ETHEREUM,PARA,paragon-network,"Paragon is a modular, EVM-compatible Layer 1 infrastructure with DPoS consensus, powering a decentralized cloud computing network that supports Real-World Assets (RWA) and incorporates both optimistic and ZK rollups.",L1/L2,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/NetworkParagon,,,,,,,true,false
Parallel Colony,1thsxx,https://parallel.life/,NOT_DEPIN,,,,Parallel Colony is a simulation game where users partner with an AI Avatar to navigate a mining colony. Each avatar controls a 6551 wallet - meaning they own digital possessions [ERC 1155s and PRIME].,,EV3 Sal,,,,,,,,,true,false
Parami,j1to13,https://www.parami.io/,AI,,AD3,,"Parami Protocol is an AI-powered incentive layer that empowers the Web3 attention economy by tokenizing relationships between influencers and followers, leveraging AI, NFTs, and DeFi to reward users for their attention and ensure personal data sovereignty.",Advertising,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/paramiprotocol,,,,,,,true,false
Parasail,n4gf96,https://www.parasail.network/,NOT_DEPIN,,,,"Parasail is an incentive interface that streamlines DePINs by aggregating capital, hardware, and users, fostering synergies, and enhancing user experiences with strong service guarantees, simplified go-to-market processes, and robust rewards.",,EV3 Sal,,https://x.com/parasailnetwork,,,,,,,true,false
Parley Labs,nqqvai,https://parleylabs.com/,SENSORS,,,,"Parley Labs is a distributor of IoT, LoRa, and 5G products, helping to bridge the connectivity gap with decentralized networks and blockchain technology.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/parleylabs,,,,,,,TRUE,TRUE
PARSIQ,95eysn,https://parsiq.net/,NOT_DEPIN,ETHEREUM,PRQ,parsiq,PARSIQ is a full-suite data network to build the backend for web3 dApps and protocols.,,,,https://twitter.com/parsiq_net,803590539021778945,https://t.me/parsiq_group,https://medium.com/parsiq,https://github.com/parsiq,https://www.linkedin.com/company/parsiq/,,true,false
Partage,xfv3kq,https://hellopartage.xyz/,NOT_DEPIN,,,,The partage lock is a blockchain controlled smart lock that allows owners to remotely manage access to their physical assets against crypto payments.,,EV3 Sal,,https://twitter.com/partagexyz,,,,,,,true,false
Particle,mcgnta,https://particle.network/,NOT_DEPIN,,,,The Intent-Centric Modular Access Layer of Web3,,EV3 Sal,,,973055032368967711,,,,,,true,false
Passage,aqaszb,https://www.passage.io/,NOT_DEPIN,NATIVE,PASG,passage,Passage connects virtual and physical experiences through creator-built games.,Gaming,,,https://twitter.com/passageio,932715756423086090,,,,https://linkedin.com/company/passageio,,true,false
Patientory Inc,0lllyf,https://patientory.com/,HUMAN_CAPITAL,ETHEREUM,PTOY,patientory,"Patientory is a Web3 healthcare company that uses blockchain to empower patients and enterprises with secure access to health data through its decentralized apps, enabling personalized care, clinical trials, and rewards for healthy activities.",Health,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/patientory,,,,,,,TRUE,FALSE
PeacePal Ai,1jd0on,https://peacepal.ai/,AI,,PEACE,,PeacePal is an AI-driven mental health companion app that adapts in real-time to meet users' emotional needs to make mental health support more approachable and effective.,Health,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/PeacePalAi,,,,,,,TRUE,FALSE
Peach,3p49fs,https://peachinu.com/,NOT_DEPIN,,PEACH,peach-inu-bsc,Peach Inu is a memecoin bringing together a community of Princess Peach fans and creating a space for fun and exchange.,,,,,,,,,,,true,false
PeakChain,c5skji,https://peakchain.network/,MOBILITY,,,,"PeakChain Network is a decentralized platform leveraging blockchain to transform mobility through secure, peer-to-peer car sharing, fleet management, and tokenized carbon credits.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd747,,https://x.com/peak_chain,,,,,,,TRUE,FALSE
Peaq,vx7fas,https://www.peaq.network/,BLOCKCHAIN_INFRA,PEAQ,PEAQ,,Peaq provides decentralized infrastructure and tools for dapp builders and users.,L1/L2,,,https://twitter.com/peaqnetwork,943486047625572392,https://t.me/s/peaqnetwork?before=165,https://medium.com/peaqnetwork,,https://www.linkedin.com/company/peaq-network/,,true,false
Peeranha,88zzed,https://peeranha.io/,NOT_DEPIN,,,,Peeranha is a free and distributed question and answer protocol for Web3 professionals. It helps structure the community knowledge base and rewards communities with crypto incentives.,,ZZ,,https://twitter.com/Peeranhaio,1013827920709554276,,https://medium.com/peeranha,https://github.com/peeranha,https://www.linkedin.com/company/peeranha/,,true,false
Penomo,48w7km,https://penomo.io/,ENERGY,,,,"Penomo is a platform for onchain capital financing of real-world renewable assets, powered by tokenization.",,ZZ,,https://twitter.com/penomoprotocol,,,,https://github.com/penomoprotocol,,,true,false
Perkable,z6715d,https://www.perkable.co/,BLOCKCHAIN_INFRA,IOTEX,,,Perkable is a decentralized advertising network connecting brands to local live events.,Loyalty,,,https://twitter.com/perkableco,,,,,https://linkedin.com/company/perkableco,,true,false
Perpetual,z6ss7w,https://perp.com/,NOT_DEPIN,ETHEREUM,PERPS,perpetual-protocol,"Perpetual Protocol is a trustless crypto trading platform that allows users to explore perpetual swaps, earn yield, and learn the future of DeFi with their decentralized trading protocol on Optimism.",DeFi,ZZ,,https://twitter.com/perpprotocol,687397941383659579,https://t.me/perpetualprotocol,https://perpetualprotocol.medium.com/,,https://www.linkedin.com/company/perpetualprotocol/,,true,false
PerpsTech,x0ftnx,https://www.perps.tech/,NOT_DEPIN,ETHEREUM,,,PerpsTech is a  decentralized Influencer Investment Platform.,DeFi,ZZ,,https://twitter.com/perpstech,,https://t.me/perpstech,,,,,true,false
Petastic,g32gdz,https://www.petastic.com/,SENSORS,,,,"Petastic is a blockchain-based platform for Pet Parents, Service Providers, and Brand Companies.",,,,,,,,,https://linkedin.com/company/petastic-inc,,true,false
Phala,2zgyts,https://phala.network/,COMPUTE,ETHEREUM,PHA,pha,Phala Network is a decentralised off-chain compute infrastructure enabling developers to enhance smart contracts.,,W. L.,,https://twitter.com/PhalaNetwork,697726436211163147,,,https://github.com/Phala-Network,https://sg.linkedin.com/company/phala-network,,true,false
Phantasma,37fysf,https://phantasma.io/,NOT_DEPIN,ETHEREUM,SOUL,phantasma,"Phantasma is a scalable layer 1 smart contract blockchain designed for Gaming, Smart NFTs, and dApp integration.",L1/L2,ZZ,,https://twitter.com/PhantasmaChain,404769727634997261,https://t.me/phantasma_io,,,https://linkedin.com/company/phantasmachain,,true,false
Phaver,oumqih,https://www.phaver.com/,NOT_DEPIN,,,,Phaver: decentralized social app rewarding users with tokens for sharing content.,,,,https://twitter.com/phaverapp,930833706460004402,,,,https://fi.linkedin.com/company/phaver,,true,false
Phisheye,tkra00,https://www.phisheye.io/,NOT_DEPIN,,,,"Phisheye is a proactive phishing prevention platform for the Web3 ecosystem, using Proof of Protection and NFT badges.",,,,,,,,,,,true,false
Phoenix,xper4k,https://phoenix.global/,AI,BINANCE,PHB,phoenix-global,Phoenix Global: Blockchain company enabling decentralized AI with AI model compute and federated learning.,,,,https://twitter.com/wix,,,https://phoenixglobal.medium.com/,,https://www.linkedin.com/company/phnxglobal/,,true,false
Photon,0k8gq4,https://www.photon.storage/,COMPUTE,,,,"Photon is a decentralized storage protocol for the metaverse, Web3, and cloud storage.",Storage,ZZ,,https://twitter.com/photon_storage,,https://t.me/photonstorage,https://medium.com/@photon.storage,https://github.com/photon-storage,,,true,false
Phyken,5qzxfu,https://phyken.network/,RWA,,,,Phyken Network is an RWA tokenisation and fractionalization protocol focused on bringing green and renewable energy assets on-chain.,,0x9d73ca4689788f6d4be686e9150d6efe75ffd746,,https://x.com/phyken_network,,,,,,,TRUE,FALSE
Pi Squared,emx2rm,https://pi2.network/,PENDING,,,,,,ZZ,,https://x.com/Pi_Squared_Pi2,,,,https://github.com/Pi-Squared-Inc,https://www.linkedin.com/company/pi-squared-inc/,,true,false
Pi,xpggzk,https://minepi.com/,SENSORS,ALGORAND,PI,pi-network-iou,Pi is a decentralized environmental data collection network.,,,,https://twitter.com/PiCoreTeam,,,https://pinetwork-official.medium.com/,,https://www.linkedin.com/company/pi-net/,,true,false
Picante,nu6vir,https://picante.io/index.html,NOT_DEPIN,,,,"PICANTE is a crypto portfolio and treasury management platform for Web3 companies, DAOs and investors.",,,,,,,,,,,true,false
Pickspot,9mrlrq,https://pickspot.net/,PENDING,,,,,,W. L.,,https://x.com/pickspotnetwork,,,,,,,true,false
Picogrid,ay3ajm,https://picogrid.com/,NOT_DEPIN,,,,Picogrid builds a common platform to connect defense and autonomous systems.,,,,https://twitter.com/zanemountcastle,,,https://medium.com/@zanemountcastle,https://github.com/zanemountcastle,https://www.linkedin.com/in/zanemountcastle/,,true,false
PiKNiK,9ixfcz,https://www.piknik.com/,COMPUTE,,,,PiKNiK is a turnkey Web3 storage provider that simplifies storage and facilitates Filecoin network access.,Storage,ZZ,,https://twitter.com/PiKNiK_US,,,,,http://www.linkedin.com/company/piknikus,,true,false
PIN AI,zm4axr,https://www.pinai.io/,PENDING,,,,,,,,https://x.com/PINAI_IO,,,,,,,TRUE,FALSE
Pinata,u4rg0n,https://www.pinata.cloud/,NOT_DEPIN,,,,Pinata is an emerging web3 development platform that offers the advantage of scalable storage through IPFS.,,,,,908735106594779198,,,,,,true,false
Pindora,1pu75v,https://www.pindora.io/,COMPUTE,,,,"Pindora is a DePIN Aggregator that unifies major DePINs into one platform, connecting Web2 use cases with Web3 infrastructure through an Independent DePIN Marketplace powered by a decentralized node network and a Unified DePIN API.",,EV3 Sal,,https://twitter.com/depindora,,,,,,,true,false
PinGo,on762n,https://link3.to/pingo,AI,TON,,,"PinGo is a platform that integrates AI, DePIN, and GPU technology, engineered to make computational resources broadly accessible, and decentralize AI model training by leveraging contributed resources.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/pingo_ai,,,,,,,true,false
PINGPONG,npspo4,https://pingpong.build/,COMPUTE,,,,PINGPONG is building a DePIN liquidity and service aggregator with a developer-facing all-in-one SDK and a community-facing DePIN liquidity mining through their DePIN liquidity hook money market.,,EV3 Sal,,https://twitter.com/pingpongbuild,1217700236303274034,,,,,,true,false
Pink BNB,9abqiu,https://pnb.world/,AI,BINANCE,PNB,pink-bnb,Pink BNB categorizes and analyzes data for crypto predictions.,Prediction Market,,,https://twitter.com/pnbworld,,https://t.me/pnbworld,https://medium.com/@pnbworld,,,,true,false
PinLink,gfaqip,https://pinlink.ai/,RWA,ETHEREUM,PIN,,"PinLink is an RWA-Tokenized DePIN platform, empowering users with fractionalized ownership of DePIN assets.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/PinLinkAi,,,,,,,true,false
Pipe,31oiwc,https://pipe.network/,PENDING,,,,,,W. L.,,https://x.com/pipenetwork,,,,,,,TRUE,FALSE
Piphi,ksvenu,https://piphi.network/,SENSORS,ALGORAND,PIPHIN,,Piphi is a decentralized environmental data collection network.,Environmental,W. L.,,,,,,,,,true,false
PISCES,22cdel,https://www.piscesiot.com/,NOT_DEPIN,,,,"PISCES is a DePIN-focused incubator, laboratory, and hardware manufacturer.",,ZZ,,https://x.com/Piscesminer,,,,,,,true,false
Pitch,utndo1,https://pitch.com/,NOT_DEPIN,,,,Pitch is the collaborative presentation software for modern teams.,,,,https://www.twitter.com/pitch,,,https://www.linkedin.com/company/pitchhq,https://pitch.com/blog,https://github.com/pitch-io,,true,false
Pivotal,8hpayd,https://www.thepivotal.xyz/,COMPUTE,,,,"Pivotal is a DePIN Layer 2 that connects immersive media to WEB3 with a low latency streaming engine, a global network of relay servers, a decentralized cloud delivery network, and worldwide distribution across millions of TVs, powered by Bolt+.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/pivotalprotocol,,,,,,,true,false
PixiaAI,fu1ijd,https://pixia.ai/,AI,ETHEREUM,PIXIA,pixiaai,"PixiaAI: Generates images/videos, collaboratively creates Blind Minting NFTs in minutes.",,,,https://twitter.com/PixiaAi,,https://t.me/PixiaAi,https://medium.com/vendettadao-blog/partnership-announcement-pixia-ai-37d71a071717,,,,false,false
Planck,y56p4w,https://plancknetwork.com/,COMPUTE,NATIVE,PLN,,Planck is a decentralized computing and AI platform that allows people to easily share their unused computer capacity and make money while providing developers with computing power and AI models to build AI-driven applications.,GPUs,ZZ,,https://twitter.com/PlanckNetwork,1158108429253099541,,,,,,true,false
Planetwatch,qxqpla,https://www.planetwatch.io/,SENSORS,ALGORAND,PLANETS,planetwatch,Planetwatch is a decentralized network of air quality monitors.,,W. L.,,https://twitter.com/planetwatchsas,855002894717419521,https://t.me/planetwatch,https://medium.com/planet-watch,,https://www.linkedin.com/company/planetwatch/,,true,false
Plato,5onhxw,https://www.getplato.app/,SENSORS,,FAT,,Plato Protocol is a rewards protocol that rewards consumers for creating verified photo and video reviews of their restaurant experiences.,,EV3 Sal,,https://twitter.com/Plato2Earn,863156439303454750,,,,,,true,false
PlatON,3ic5uj,https://platon.network/,COMPUTE,ETHEREUM,LAT,platon-network,"PlatON is a Decentralized Privacy-Preserving AI Network that consists of a decentralized computation network, a decentralized AI marketplace, and a decentralized AI collaboration network.",,,,https://twitter.com/PlatON_Network,816899460478926870,https://t.me/PlatONNews,https://platon-network.medium.com/,https://github.com/PlatONnetwork,https://www.linkedin.com/company/platonnetwork/,,true,false
PlayAI,nbu6w3,https://playai.network/,AI,,,,"PlayAI is a web3 platform that rewards gamers for sharing their gaming data, which is used to train AI models.",,ZZ,,https://twitter.com/playAInetwork,,,,,,,true,false
PlayART,3ry0cb,https://playart.ai/,PENDING,,,,,,EV3 Sal,,https://x.com/playart_media,,,,,,,TRUE,FALSE
PlayFi,grzpqe,https://www.playfi.ai/,AI,NATIVE,PLAY,,"PlayFi Protocol is a decentralized platform combining PlayChain, a low-cost zkEVM blockchain, and PlayBase, a decentralized AI data processing and storage network powered by modular nodes enabling web3 features for games, streams, sports, and more.",Gaming,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/playfiai,,,,,,,TRUE,FALSE
PlayMining,7veugj,https://dea.sg/,PENDING,,,,,,ZZ,,https://x.com/PlayMining_SG,,,,,,,TRUE,FALSE
PlayZap,wypvyu,https://www.playzap.games/,NOT_DEPIN,BINANCE,PZP,playzap,"PlayZap Game is a skill-based competitive gaming platform that's Free to Play, however, their skill and performance in the games will enable them to earn rewards and tokens.",,ZZ,,,940706832626905118,,,,,,true,false
PlotX,ma0gu4,https://plotx.io/,NOT_DEPIN,ETHEREUM,PLOT,plotx,PlotX is an all-new crypto-based fantasy trivia game that allows users to answer simple questions and win crypto.,,ZZ,,,709795840583270511,,,,,,true,false
Plume,f3i31e,https://www.plumenetwork.xyz/,RWA,,,,"Plume Network is the first modular L2 blockchain dedicated to RWAs, integrating asset tokenization and compliance directly into the chain.",L1/L2,0x911445B1d3eB2af49d08c67ca6E7dc1c464bE5F5,,https://x.com/plumenetwork,,https://t.me/plumenetwork_community,https://www.plumenetwork.xyz/blog,,,,true,false
Plural,5uioqo,https://www.plural.xyz/,ENERGY,,,,"Plural Energy leverages blockchain to unlock new sources of capital to finance renewable energy projects by making it possible for anyone to invest directly. ",,ZZ,,https://twitter.com/pluralenergy,,,,,https://linkedin.com/company/drifeofficial,,true,false
Pluralis,r80yu7,https://pluralis.ai/,PENDING,,,,,,EV3 Sal,,https://x.com/Pluralis__,,,,,,,TRUE,FALSE
POKT,wreq2k,https://www.pokt.network/,BLOCKCHAIN_INFRA,NATIVE,POKT,pocket-network,POKT is a company that empowers developers with reliable and performant RPC access to the open internet.,RPC/Indexing,,,https://twitter.com/POKTnetwork,553741558869131266,https://t.me/POKTnetwork,https://medium.com/@POKTnetwork,https://github.com/pokt-network,,,true,false
Polkamarket,qybaeu,https://www.polkamarkets.com/,NOT_DEPIN,ETHEREUM,POLK,polkamarkets,"Polkamarkets is a 100% user-run, fully open source, Web3 Prediction Markets protocol.",Prediction Market,ZZ,,https://twitter.com/polkamarkets,829288369943085066,https://t.me/polkamarkets_announcements,https://medium.com/polkamarkets,https://github.com/Polkamarkets,https://www.linkedin.com/company/polkamarkets/,,true,false
Pollen Mobile,goiapt,https://www.pollenmobile.io/,WIRELESS,SOLANA,,,"Pollen Mobile is an high-speed, data-only wireless network. RUGGED IN DECEMBER 2022.",,ZZ,,https://twitter.com/PollenMobile,,,https://medium.com/@pollenmobile,https://github.com/pollen-mobile,https://www.linkedin.com/company/pollenmobile,,false,false
Polybase,a8p168,https://polybaselabs.com/,COMPUTE,,,,"Polybase is a decentralized storage, index and query protocol for structured data.",RPC/Indexing,ZZ,,https://twitter.com/polybase_xyz,989985926434394192,https://twitter.com/polybase_xyz?lang=en,https://medium.com/@polybase,https://github.com/polybase,https://www.linkedin.com/company/polybase,,true,false
Polyhedra,1rz6f3,https://polyhedra.network/,BLOCKCHAIN_INFRA,ETHEREUM,ZK,polyhedra-network,"Polyhedra Network designs and implements zkBridge, providing trustless and efficient cross-chain infrastructures for layer-1 and layer-2 interoperability.",,ZZ,,https://twitter.com/PolyhedraZK,,,,,,,true,false
Polymathic,ba6xjm,https://polymathic-ai.org/,NOT_DEPIN,,,,Polymathic AI develops versatile foundation models for machine learning applications in various scientific fields.,,,,https://twitter.com/PolymathicAI,,,,,https://github.com/PolymathicAI,,true,false
Polymesh,8ou3di,https://polymesh.network/,NOT_DEPIN,POLKADOT,POLYX,polymesh,"Polymesh is an institutional-grade permissioned blockchain built specifically for regulated assets. It streamlines antiquated processes and solves challenges around governance, identity, compliance, confidentiality, and settlement.",,,,,,,,,,,true,false
PolySwarm,evuxhc,https://polyswarm.network/,NOT_DEPIN,ETHEREUM,NCT,polyswarm,PolySwarm is a crowdsourced threat intelligence marketplace where commercial solutions and specialized engines compete to detect threats and get compensated based on performance.,,ZZ,,https://twitter.com/PolySwarm,,,,,,,true,false
Polytrade,t247l9,https://www.polytrade.finance/,RWA,,TRADE,,"Polytrade is a decentralized finance platform that specializes in tokenizing real-world assets, offering a marketplace for investing in and managing trade finance.",,,,,1072833135697481859,,,,,,true,false
Polyverse AI,xnqsg5,https://www.polyverse.network/,AI,,,,"Polyverse AI is developing a planet-scale, privacy-preserving AI data engine using a cutting-edge privacy stack that includes fully homomorphic encryption and zero-knowledge proofs.",,ZZ,,https://twitter.com/polyverse_ai,,,,,,,true,false
Polywrap,efuprt,https://www.polywrap.io/,AI,,,,"Polywrap leverages AI agents to make peer-to-peer protocols easier to use, compose, and integrate into powerful applications.",Agents,ZZ,,https://twitter.com/polywrap_io,796821176743362611,,,,,,true,false
POMA,owj0ex,https://www.pomaprotocol.com/,HUMAN_CAPITAL,,,,"POMA is an engage-to-earn platform that helps developers learn, share, and build on blockchain while earning rewards for their contributions.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/pomaprotocol,,,,,,,TRUE,FALSE
Pomerene,wwdxuw,https://www.pomerene.net/,PENDING,,,,,,ZZ,,https://x.com/PomereneNetwork,1236394566601670738,,,https://github.com/russell-brouillard/pomerene-api,,,true,false
POMO,asz75t,https://www.pomo.network/,BLOCKCHAIN_INFRA,ETHEREUM,POMO,,"POMO Network is a decentralized dining and entertainment social network platform that leverages DePIN technology to reward users for contributions, offering memberships, rewards, and enhanced dining experiences.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/pomonetwork,,,,,,,true,false
Pond,sly79p,https://cryptopond.xyz/,BLOCKCHAIN_INFRA,,,,"Pond is building a decentralized Graph Neural Network (GNN) model infrastructure for Web 3, suited for countless on-chain use cases including price prediction, tailored marketing solutions, social network intelligence, intelligent security, and more.",,EV3 Sal,,https://x.com/pondgnn,,,,,,,true,false
Ponder,84yzdf,https://ponder.one/,NOT_DEPIN,ETHEREUM,PNDR,,"Ponder is the ultimate, fully integrated, comparison engine that allows users to compare and select the best rates for Bridging, Swapping, Borrowing, Lending, NFTs, Insurance, and more.",Data,ZZ,,https://twitter.com/Ponder_One,,,,,,,true,false
Ponder.sh,5kiamf,https://ponder.sh/,NOT_DEPIN,,,,"Ponder is an open-source backend framework for building robust, performant, and maintainable crypto apps.",,EV3 Sal,,https://x.com/ponder_sh,,,,,,,true,false
Pontem,tusnjs,https://pontem.network/,NOT_DEPIN,,,,,,EV3 Sal,,https://x.com/PontemNetwork,,,,,,,TRUE,FALSE
Pool,ueuvax,https://www.pooldata.io/,NOT_DEPIN,,POOL,,"Pool provides a platform and associated services to support Data Unions to develop, scale and monetize.",,,,https://twitter.com/pooldata,,,https://www.pooldata.io/blog,,https://www.linkedin.com/company/pool-data/,,true,false
Port3,i6pg99,https://port3.io/,AI,ETHEREUM,PORT3,port3-network,"Port3 Network is a decentralized AI servicing protocol that connects extensive on-chain and off-chain datasets. It integrates and computes these datasets to establish a globally accessible data layer, empowering the automation of Web3 AI applications.",,ZZ,,https://twitter.com/Port3Network,955705769628684341,,,,,,true,false
Portalverse,6uwhcg,https://www.portalverse.net/,COMPUTE,,,,Portalverse Protocol is a decentralized cloud gaming and rendering network for immersive metaverses.,Gaming,,,https://twitter.com/Portalverse_Net,,,https://medium.com/@PORTALVERSE_NETWORK,https://github.com/Portalverse-Network,http://www.linkedin.com/company/portalverse-network,,true,false
PoSciDonDAO,ylhts9,https://www.poscidondao.com/,SCIENCE,,SCI,,PoSciDonDAO is a Decentralized Autonomous Organisation that funds personalized medicine research for life-altering diseases (incl. cancer and Alzheimer's disease).,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/poscidondao,,,,,,,true,false
Poseidon,hosx2o,https://www.poseidon.network/,WIRELESS,ETHEREUM,QQQ,,"Poseidon Network is a decentralized global network that collects and distributes idle resources from P2P devices, allowing everyone to build their own services in the fastest and cheapest way. This includes decentralized CDN, storage, and computing.",,ZZ,,https://twitter.com/QQQtoken,789323748267524097,https://t.me/QQQ_Poseidon_En,https://medium.com/poseidonnetwork,https://github.com/poseidon-network,https://www.linkedin.com/company/poseidon-network,,true,false
Postmint,rbr871,https://www.postmint.xyz/,NOT_DEPIN,,,,"Postmint is a Web3 creator marketplace that offers a post-to-earn feature that rewards creators for marketing Web3 projects to their audience, with a refer-to-earn affiliate program.",,EV3 Sal,,,,,,,,,true,false
PowBlocks,hsnpun,https://powblocks.com/,NOT_DEPIN,ETHEREUM,XPB,powblocks,"PowBlocks is a dedicated decentralized layer-1 proof-of-work blockchain designed for the mining community. It distinguishes itself through its unique emission model, ingrained 5% block reward reduction per month, and commitment to decentralization. ",,,,,1148694380635488256,,,,,,true,false
powdr labs,2r5kuo,https://www.powdr.org/,BLOCKCHAIN_INFRA,,,,powdr is a modular compiler stack to build zkVMs.,ZK,vkurup.eth,,https://x.com/powdr_labs,,,,,,,true,false
Power AI,lbv422,https://power-ai.me/,COMPUTE,,POWERAI,,"Power AI is a decentralized computing platform that leverages idle GPUs globally to provide affordable and sustainable AI computing power to make it accessible to machine learning professionals, researchers, and developers.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/powerai_token,,,,,,,TRUE,FALSE
Power Meta,pkuasu,https://powermeta.ai/Home,COMPUTE,,,,"PowerMeta is a decentralized GPU compute network that offers a compute sharing platform, enabling users to securely rent out GPUs to AI companies and earn rewards while supporting AI development.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/PowerMetaAI,,,,,,,true,false
PowerAI,45lp05,https://powerai.center/,AI,PEAQ,PWAI,,"PowerAI is a decentralized GPU-sharing ecosystem powered by AI, dynamically allocating GPU resources to ensure optimal utilization and fair compensation for all participants.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/PowerAI_X,,,,,,,true,false
PowerLayer,f55yoz,https://powerlayer.org/,RWA,,,,"PowerLayer is a decentralized platform for fundraising, tokenizing real-world renewable energy assets, and trading future option yields, empowering users to participate in large-scale sustainable projects.",NFTs,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/rwa_powerlayer,,,,,,,TRUE,FALSE
PowerLedger,9a54pc,https://www.powerledger.io/,ENERGY,ETHEREUM,POWR,power-ledger,Powerledger is developing the world-first blockchain enabled energy and environmental commodity trading platform to make energy markets more efficient.,,,,,,,,,,,true,false
PowerLink,9nl1wn,https://powerlink.network/,PENDING,,,,,,W. L.,,https://x.com/PowerLink_DePIN,,,,,,,true,false
Powerloom,gex7ot,https://powerloom.io/,BLOCKCHAIN_INFRA,,,,"Powerloom Protocol is a composable data network for web3 that helps users build advanced smart contract-based applications in DeFi, web3 gaming, and more with their streamlined cross-chain data integration.",,EV3 Sal,,https://twitter.com/PowerloomHQ,777248105636560948,,,,,,true,false
PowerPod,8l06hb,https://www.powerpod.pro/,MOBILITY,ETHEREUM,PPD,,"PowerPod is a decentralized electric vehicle (EV) charging network, designed to rapidly establish and maintain low maintenance costs through a decentralized organizational structure and GamiFi scenes.",,ZZ,,https://twitter.com/PowerPod_People,,,,,,,true,false
PowerPool,7iwcpl,https://powerpool.finance/,AI,ETHEREUM,CVP,powerpool-concentrated-voting-power,"PowerPool is a DePIN layer powering AI Agents and DeFi automation across multiple blockchains, empowering users to automate smart contract executions and governance decisions through its PowerAgent network.",DeFi,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/powerpoolcvp,,,,,,,true,false
PPIO,wnnyld,https://www.ppio.cloud/,COMPUTE,,,,PPIO is a distributed cloud computing company that provides decentralized distributed cloud services.,,,,https://twitter.com/ppio_official,,,https://www.ppio.cloud/blog/,https://github.com/PPIO,https://www.linkedin.com/company/ppio/,,true,false
Praan,gzaq62,https://praan.io/,SENSORS,,,,Praan is a deep tech company that aims to build the world's most advanced air purification technologies for commercial and industrial applications.,,EV3 Sal,,,,,,,,,true,false
Pragma,yt094j,https://www.pragmaoracle.com/,BLOCKCHAIN_INFRA,,,,Pragma is a decentralized oracle network that enhances the transparency and reliability of accessing real-world data for smart contracts while leveraging zero-knowledge cryptography for security.,,ZZ,,https://twitter.com/PragmaOracle,1014980263895375923,,https://mirror.xyz/pragmagic.eth,https://github.com/Astraly-Labs/Pragma,https://www.linkedin.com/company/pragma-oracle/about/,,true,false
Precipitate,wapwul,https://www.precipitate.ai/,AI,ETHEREUM,RAIN,precipitate-ai,"Precipitate is building an AI Blockchain infrastructure that enables developers to leverage the protocol's processing power, data rendering, computation, storage, and bandwidth to develop and deploy dApps loaded with an Artificial Intelligence System.",,ZZ,,,,,,,,,true,false
Prem,ygrlcj,https://www.premai.io/,AI,,,,Prem AI is a provider of an easy to use Generative AI Developer Platform. The Prem Network is a cutting-edge platform that leverages a distributed mesh of GPU provider to optimize the processing of large Open Source models.,,,,https://twitter.com/premai_io,1106634690825310228,,https://blog.premai.io/,https://github.com/premAI-io/,https://www.linkedin.com/company/premai/,,true,false
Preprints,xvpxoa,https://preprints.io/,PENDING,,,,,,ZZ,,https://twitter.com/preprints_io,871601937148166154,https://t.me/preprintsio,,https://github.com/haailabs,,,true,false
Presearch,7mrkii,https://presearch.io/,AI,ETHEREUM,PRE,presearch,"Presearch is a community-powered, decentralized search engine that protects users' privacy, and rewards them for searching.",,ZZ,,https://twitter.com/presearchnews,961810036420665364,,-vhttps://news.presearch.io/-,,https://www.linkedin.com/company/presearchofficial/,,true,false
PrimeIntellect,qjinko,https://www.primeintellect.ai/,AI,,,,"PrimeIntellect commoditizes intelligence through a decentralized AI lab to advance scientific progress and human flourishing. It empowers developers with distributed computing, state-of-the-art open models, and an ecosystem to reach users.",,ZZ,,https://twitter.com/PrimeIntellect,1164630030928855090,,,,,,true,false
Print Mining,1r3hw5,https://www.printmining.com/,BLOCKCHAIN_INFRA,ETHEREUM,PRINT,print-mining,"Print Mining operates a decentralized infrastructure network, utilizing renewable energy sources and DePIN technology to secure blockchain networks, while allowing users to stake their tokens and earn rewards from the mining process.",,ZZ,,https://twitter.com/Print_Mining,,,,,,,true,false
PRISM,eakw9b,https://prism.sh/,AI,,,,PRISM (Predictive Reasoning/Inference on Solana Mainnet) is Trustless Engineering Corporation's flagship platform designed to deliver generative AI and predictive ML analytics to the Solana blockchain.,Agents,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/prism_tec,,,,,,,true,false
PrismaX,30g3k9,,PENDING,,,,,,EV3 Sal,,https://x.com/PrismaXAI,,,,,,,TRUE,FALSE
Privasea,2qrtt6,https://www.privasea.ai/,AI,,,,Privasea is a privacy-focused AI network utilizing Fully Homomorphic Encryption to secure data during computations.,,,,https://twitter.com/Privasea_tech,1100689673078190180,https://t.me/Privasea_ai,,,http://www.linkedin.com/company/privasea-tech,,true,false
PrivateAI,ox1kcr,https://www.privateai.com/,SCIENCE,NATIVE,PGPT,,"PrivateAI is a Peer-to-Peer Data-as-a-Service Platform that enables data owners and producers to upload, showcase, and monetize datasets in a secure environment with prospective buyers and users(AI engineers, data analysts, and research institutions).",,ZZ,,https://twitter.com/privateAIcom,,,,,,,true,false
Privio,x4ccoy,https://privio.co/,AI,,,,"Privio: AI B2B SaaS software offering Workflow Mgmt, Timekeeping, CRM, and more.",Software,,,https://twitter.com/PrivioTech,,,,,https://www.linkedin.com/company/privio/,,true,false
Prodia,51ffds,https://prodia.com/,NOT_DEPIN,,,,Prodia is an easy-to-use Stable Diffusion API for AI-powered image generation.,,,,https://twitter.com/prodialabs,961289090886692964,,,,https://www.linkedin.com/company/prodia-labs/,,true,false
Prograd,zq72wo,https://www.prograd.uk/,NOT_DEPIN,,,,"Prograd empowers Gen-Z with financial literacy and income opportunities through a personalized platform offering side hustles, savings tools, and access to financial products.",DeFi,EV3 Sal,,https://x.com/prograduk,,,,,,,true,false
Project AXS,61ziyo,https://projectaxs.fun/,PENDING,,,,,,ZZ,,https://x.com/_axsproject,,,,https://github.com/3uild-3thos/project_axs,,,true,false
Project Internet Capacity,6t4nx8,https://projectinternetcapacity.com/,PENDING,,,,,,EV3 Sal,,https://x.com/threefold_io,,,,,,,true,false
Project Zero,9v4zx7,https://www.zero2050.com/,ENERGY,,,,Project Zero by Fuse Energy is building a decentralized energy network that drives the transition to net zero with renewable energy solutions and a token-based system to incentivize sustainable actions.,VPPs,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/projectzero2050,,,,,,,TRUE,FALSE
PROME,uliida,https://prome.network/#/,ENERGY,,,,PROME Network is a decentralized peer-to-peer green energy network that leverages blockchain and tokenization to create a sustainable future for everyone.,,ZZ,,https://twitter.com/PROME_En,,,,,,,true,false
Proof of Play,f0g5ra,https://www.proofofplay.com/,BLOCKCHAIN_INFRA,,,,Proof of Play is a game studio and blockchain technology company that makes decentralized games and gaming infrastructure.,,,,https://twitter.com/ProofOfPlay/,933037216811319327,,https://piratenation.medium.com/,,https://www.linkedin.com/company/proof-of-play/,,true,false
Propbase,687b4m,https://www.propbase.app/,RWA,,PROPS,,"Propbase is a highly-scalable, fast, and secure blockchain-based platform for property tokenization and transaction.",,,,,1030685279327105044,,,,,,true,false
Propchain,pe85na,https://propchain.com/,RWA,ETHEREUM,PROPC,propchain,Propchain is a blockchain-based ecosystem for real-world assets and proptech solutions.,,ZZ,,,,,,,,,true,false
Prophetic,n08otn,https://propheticai.co/,SENSORS,,,,Prophetic is a neurotech company pioneering a lucid dream-inducing device.,,,,https://twitter.com/propheticai,,,,,https://www.linkedin.com/company/propheticai/,,true,false
Propy,gr8g01,https://propy.com/home/,RWA,ETHEREUM,PRO,propy,"Propy is a real estate platform that leverages blockchain technology to enable the buying, selling, and management of property.",Real Estate,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/propyinc,,,,,,,TRUE,FALSE
Protico,ourync,https://protico.io/,NOT_DEPIN,,,,Protico is a Web3 Chatting network aiming to realize a universal chatting interface for enterprises and users across all Apps.,,ZZ,,https://twitter.com/protico_io,,,,,https://www.linkedin.com/company/protico/,,true,false
Proto,uq5rfx,https://www.proto-geo.xyz/,SENSORS,,,,Proto is a geospatial data company revolutionizing the industry through a user-generated mapping platform.,Positioning,W. L.,,,,,,,http://www.linkedin.com/company/dp-proto,,true,false
Protocol.Land,s2dihe,https://protocol.land/,COMPUTE,,,,Protocol.Land is a decentralized source control and code collaboration platform built on top of Arweave blockweave.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/protocolland,,,,,,,true,false
Protomaps,qppebc,https://protomaps.com/,NOT_DEPIN,,,,A free and open source map of the world.,,EV3 Sal,,,,,,,,,true,false
Proton,zidol7,https://proton.me/mail,NOT_DEPIN,,,,Keep your conversations private. Proton Mail is an encrypted email service based in Switzerland.,,EV3 Sal,,,1178303648443416576,,,,,,true,false
ProvenRun,f0pj2v,https://provenrun.com/,MOBILITY,,,,ProvenRun is a developer of a cybersecurity platform for connected vehicles and smart devices.,,EV3 Sal,,,,,,,,,true,false
ProximaX,nwrj6s,https://www.proximax.ltd/en/,COMPUTE,BINANCE,XPX,proximax,"ProximaX is a next-generation Integrated and Distributed Ledger Technology (IaDLT) infrastructure development platform that includes off-chain, peer-to-peer storage, streaming, database, Supercontracts, and blockchain layers.",,ZZ,,https://twitter.com/ProximaXGang,,,,https://github.com/proximax-storage,https://www.linkedin.com/company/proximaxltd,,true,false
Proximum,ciuuhf,https://www.proximum.xyz/,BLOCKCHAIN_INFRA,,,,"Proximum is a network protocol designed to enhance spacetime with nodes that provide secure, speed-of-light consensus, enabling trustless proximity-based interactions and fostering local economies through regional flatcoins.",,EV3 Sal,,https://twitter.com/proximum_xyz,1207771884003922021,,,,,,true,false
PsyDAO,8rh4cv,https://www.psydao.io/,SCIENCE,ETHEREUM,PSY,,"PsyDAO is a decentralized autonomous organization that aims to revolutionize the research and ownership of psychedelic intellectual property through open-source collaboration, tokenization, and community governance.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/psy_dao,,,,,,,true,false
PUBLC,28owf2,https://publc.com/,PENDING,,,,,,W. L.,,https://x.com/WeArePUBLC,,,,,,,true,false
PublicAI,11aqyc,https://www.publicai.io/,AI,,,,PublicAI is a decentralized network focused on RHLF.,,,,https://twitter.com/PublicAI_,1067993454468153426,https://t.me/Public_AI,https://medium.com/@contact_88042,https://github.com/PublicAI01,http://www.linkedin.com/company/publicai01,,true,false
Puffpaw,duzlx0,https://www.puffpaw.xyz/,SENSORS,,,,Puffpaw integrates smart vape technology with blockchain to promote smoking cessation and community wellness through its DePIN and Vape 2 Earn model.,Health,W. L.,,https://twitter.com/puffpaw_xyz,,,,,,,true,false
Pulse,7sxa0l,,PENDING,,,,,,EV3 Sal,,,,,,,,,TRUE,FALSE
PulseFolio,ry8vac,https://pulsefolios.com/,AI,BINANCE,PULSE,pulsefolio,Decentralized AI protocol for personalized investment strategies.,,,,https://twitter.com/PulseFolio/,,https://t.me/PulsefolioPortal,,,,,true,false
Puml,1zh76b,https://puml.io/,BLOCKCHAIN_INFRA,ETHEREUM,PUMLX,pumlx,"PUML Better Health is a Web3 Sports, Fitness and Wellness company gamifying healthy behaviours via challenges in the metaverse and real-world.",,,,https://twitter.com/pumlhealthio,,https://t.me/pumlofficial,https://pumlhealthio.medium.com/,https://github.com/pumlapp,https://www.linkedin.com/company/pumlhealthio/,,true,false
Pundi X,i0kfij,https://pundix.com/,SENSORS,ETHEREUM,PUNDIX,pundi-x-new,Pundi X is a leading developer of blockchain-powered devices to transform retail businesses with its blockchain-based point-of-sale solution. It allows retail merchants and consumers to conduct instantaneous in-store transactions on its blockchain.,,ZZ,,,,,,,,,true,false
Purebet,iaysmn,https://www.purebet.io/,NOT_DEPIN,,,,Purebet is a cryptocurrency gambling platform that offers secure and transparent betting options for users worldwide.,Gaming,,,https://www.twitter.com/Purebet_io,904758233233752094,,https://purebet.medium.com/,,,,true,false
PureFi,5u6ch6,https://purefi.io/,NOT_DEPIN,ETHEREUM,UFI,purefi,PureFi Protocol is a one-stop decentralized compliance protocol for Web3 that allows dApps to fully comply with local and global regulations while preserving decentralization and user anonymity.,,ZZ,,https://twitter.com/Purefi_Protocol,,https://t.me/purefiprotocol,https://medium.com/purefi,,http://www.linkedin.com/company/purefi,,true,false
Purple AI,n8xvmu,https://purplesquare.ai/,AI,ETHEREUM,PAI,purple-ai,PAI is a pioneering platform offering the ability to create custom-made image-generating AI bots.,,ZZ,,https://twitter.com/PurpleSquareAI,,,,,,,true,false
PurpleAir,3gn5ce,https://www2.purpleair.com/,SENSORS,,,,"PurpleAir makes high-precision air quality monitors that empower Community Scientists by collecting hyper-local, real-time air quality data and sharing it with the public.",,EV3 Sal,,,,,,,,,true,false
Purrfeed,vlqwqk,https://purrfeed.tech/,SENSORS,,CATCAT,,Purrfeed is a revolutionary DePIN platform leveraging blockchain to connect cat lovers with stray felines globally.,,EV3 Sal,,https://twitter.com/Purrfeed,,,,,,,true,false
Push,nhurl1,https://push.org/,WIRELESS,ETHEREUM,PUSH,ethereum-push-notification-service,"Push Protocol: web3 cross-chain network for dapps, wallets, and services.",,,,https://twitter.com/pushprotocol,717089384838594695,,https://medium.com/push-protocol,,https://www.linkedin.com/company/push-protocol,,true,false
Pyrax,bltqqw,https://pyrax.ai/,AI,,,,"Pyrax is a Layer 3 parallel VM network designed for AI Agents and offers a comprehensive framework that combines decentralized data storage, trustless verification protocols, secure AI communication protocols, and efficient payment protocols.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/pyraxai,,,,,,,true,false
Pyse,44h60y,https://pyse.in/,ENERGY,,,,Pyse enables retail investing in renewable energy assets.,,,,,,,http://www.linkedin.com/company/pysefin,,,,true,false
Pyth,5fwmoi,https://pyth.network/,NOT_DEPIN,SOLANA,PYTH,pyth-network,"Pyth Network is an innovative decentralized oracle that sources financial market data from over 90 first-party publishers, including major exchanges and market-making firms worldwide (e.g., CBOE, Binance, OKX, Bybit, etc.), and distributes the data across 40+ blockchains",,EV3 Sal,,https://twitter.com/PythNetwork,826115122799837205,https://t.me/Pyth_Network,https://pyth.network/blog,https://github.com/pyth-network,https://www.linkedin.com/company/pyth-network,,true,false
Q Blocks,j988an,https://qblocks.cloud/,COMPUTE,,,,"Q Blocks is a decentralized computing platform that allows ML teams to run ML training workloads securely and more affordably. ",,ZZ,,https://twitter.com/blocks_q,,,,,https://www.linkedin.com/company/q-blocks/,,true,false
q-ctrl,69yd7k,https://q-ctrl.com/,NOT_DEPIN,,,,"Q-ctrl uniquely addresses the problem of hardware error and instability in quantum computing, entirely through software.",Quantum,,,https://twitter.com/qctrlHQ,,,,https://github.com/qctrl,https://www.linkedin.com/company/q-ctrl/,,true,false
QANplatform,w0b37b,https://qanplatform.com/en,NOT_DEPIN,ETHEREUM,QANX,qanplatform,"QANplatform is a quantum-resistant Layer 1 hybrid blockchain that enables developers and enterprises to build quantum-resistant smart contracts, DApps, DeFi, DAOs, tokens, CBDCs, NFTs, Metaverse, and Web3 solutions in any programming language.",L1/L2,ZZ,,https://twitter.com/QANplatform,867778552534138941,https://t.me/QANplatform,https://qanplatform.medium.com/,https://github.com/QANplatform,https://www.linkedin.com/company/qanplatform/,,true,false
Qiro,alkph8,https://www.qiro.fi/,RWA,,,,Qiro is a unified credit protocol enabling RWA-backed DeFi lending.,,ZZ,,,,,,,https://www.linkedin.com/company/qiro-group/,,true,false
QnA3,zllg2h,https://qna3.ai/vote,AI,BINANCE,QNA,,QnA3 is an AI-powered Web3 Knowledge Sharing Platform that helps users get answers to web3 questions.,,ZZ,,,,,,,,,true,false
QoWatt,ak3umt,https://qowatt.network/en/,ENERGY,MULTIVERSX,QWT,qowatt,"QoWatt is the first European public EV charging operator powered by Web3, integrating blockchain, NFT governance, and decentralized finance to promote sustainable electric mobility.",,ZZ,,https://twitter.com/QoWattEcosystem,,,,,,,true,false
QRL,qc35tq,https://www.theqrl.org/,NOT_DEPIN,NATIVE,QRL,quantum-resistant-ledger,"The Quantum Resistant Ledger (QRL) is a post-quantum secure blockchain platform designed to protect digital assets from quantum computing attacks, utilizing IETF-specified XMSS with NIST approval and offering a suite of user-friendly applications.",,ZZ,,https://twitter.com/QRLedger,357604137204056065,,https://medium.com/@QRL,https://github.com/topics/qrl,https://www.linkedin.com/company/qrl/about/,,true,false
Quadency,8tp7y2,https://quadency.com/,AI,ETHEREUM,QUAD,quadency,"Quadency simplifies crypto trading. It offers portfolio management, trading bots, and automation.",,,,https://twitter.com/quadency,964458804265775104,https://t.me/joinchat/Fbj0HRHlGePeT8QeV-4uBg,,https://github.com/quadency,https://www.linkedin.com/company/quadency,,true,false
Quai,38r0xr,https://qu.ai/,BLOCKCHAIN_INFRA,ETHEREUM,QUAI,,"Quai Network is a dynamic set of EVM-compatible blockchains that achieves 50,000+ TPS without compromising security or decentralization.",,ZZ,,,,,,,,,true,false
Quakecore,vpltzt,https://quakecore.com/,SENSORS,,,,"Quakecore is a decentralized earthquake detection network with IoT devices that provide real-time seismic data for early warnings, empowering communities.",,ZZ,,https://twitter.com/Quakecore_com,,,,,,,true,false
Qualoo,cfy81h,https://www.qualoo.org/,WIRELESS,,QXT,,"Qualoo is a global test network that utilizes user-generated connectivity data by incentivizing users to run tests and share data about their internet connectivity. ",,ZZ,,https://twitter.com/Qualoo_Network,917422272040566864,https://t.me/QualooNetwork,,,https://linkedin.com/company/qualoo,,true,false
QuanMed AI,ohr7ej,https://www.quanmed.ai/,PENDING,,,,,,EV3 Sal,,https://x.com/QuanMedAI,,,,,,,true,false
Quant,7u7rag,https://quant.network/,NOT_DEPIN,ETHEREUM,QNT,quant-network,Quant is a blockchain project aiming to improve global information communication efficiency.,,,,https://twitter.com/quant_network,,,,,https://www.linkedin.com/company/quantnetwork/,,true,false
Quantinum,m5egmn,https://quantinium.cc/,WIRELESS,,,,"Quantinum: Institutional-grade blockchain, integrating decentralization, scalability, sustainability, and cybersecurity.",,,,,,,,,,,true,false
Quantria,puyp76,,SENSORS,,QNA,,Quantria aims to advance LLM training with the world's largest health data protocol by incentivizing users to share and monetize their anonymized health data from wearables and health apps.,,EV3 Sal,,https://twitter.com/quantria_xyz,,,,,,,true,false
QuantumEVM,sedpq6,https://quantumevm.com/,PENDING,,,,,,EV3 Sal,,https://x.com/quantumevm,,,,,,,true,false
Qubic,8hzipe,https://qubic.org/,BLOCKCHAIN_INFRA,,,,Qubic is a Layer 1 UPoW powered network aiming to achieve True AI with True Finality and high-speed smart contract execution.,L1/L2,ZZ,,https://twitter.com/_qubic_,768887649540243497,,,https://github.com/qubic-li,,,true,false
Quenta,mitdph,https://quenta.io/,NOT_DEPIN,,,,"Quenta is a derivatives trading platform built on IoTeX. ",,EV3 Sal,,https://twitter.com/Quenta_io,1214489895456739369,,,,,,true,false
Questbook,c5xom1,https://questbook.app/,NOT_DEPIN,,,,Grants program management software.,,,,,,,,,,,true,false
Questflow,acn5x8,https://www.questflow.ai/,AI,,QUESTFLOW,,"Questflow is a decentralized AI agentic workflow network that orchestrates multi-agents to take action on autopilot, allowing users to build workflows and distribute incentives to AI agent creators.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/questflow,,,,,,,true,false
Quex,w6abkp,https://quex.tech/,NOT_DEPIN,,,,"Quex VM is a general-purpose virtual machine that produces on-chain verifiable results, allowing to transform any Web2 program into a Web3 one.",,ZZ,,https://twitter.com/quex_tech,,,,,,,true,false
Quick Intel,c46wsw,https://quickintel.io/,AI,ARBITRUM,QUICKI,quick-intel,"Quicki is a suite of safety and security multi-chain tools for Blockchain, providing real-time scam detection.",,,,https://twitter.com/quicki_erc,1080146033264312320,https://t.me/Quicki_TG,,,,,true,false
Quilibrium Space,p6u5kw,https://quilibrium.space/,COMPUTE,,,,"Quilibrium is a decentralized cloud protocol that offers the ease of cloud computing without compromising on privacy or scalability, using familiar API-compatible SDKs.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/QuilibriumSpace,,,,,,,true,false
QuillAI,x4scak,https://quillai.network/,AI,,,,"QuillAI Network is a trust and security orchestration layer for Web3, leveraging a DeAI AVS that incentivizes builders, contributors, and node operators to create, improve, and run AI agents that enhance trust and security in the onchain world.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/QuillAI_Network,,,,,,,true,false
r datadao,t1hujj,https://www.rdatadao.org/home,NOT_DEPIN,,,,r/datadao is a community-owned data collective focused on reddit data and allows users to export their reddit data and contribute it to earn points based on their karma.,Data,ZZ,,https://twitter.com/rdatadao,,,,,,,true,false
RAAD,lnurdi,https://raad.com/,PENDING,,,,,,,,https://x.com/raadlabs,,,,,,,true,false
Rad Live,ugl60x,https://rad.live/,NOT_DEPIN,,,,The first NFT-powered streaming service,,EV3 Sal,,,,,,,,,true,false
Radicle,n2u1ny,https://radicle.xyz/,NOT_DEPIN,,,,"Radicle is a decentralized, peer-to-peer code collaboration platform built on Git, where repositories are replicated across peers in a decentralized manner, empowering users with full control over their data and workflows.",,ZZ,,https://twitter.com/radicle,,,,,https://www.linkedin.com/company/radicleproject/,,true,false
Radiologex,0afttx,https://radiologex.com/,BLOCKCHAIN_INFRA,ETHEREUM,RDGX,r-dee-protocol,"The R-DEE Protocol by Radiologex is a bespoke blockchain network for healthcare IT, enhancing data security and operational efficiency in the medical sector.",Health,ZZ,,https://www.linkedin.com/company/radiologex/,,,,,,,true,false
Radius,kttpsl,https://www.radius.space/,HUMAN_CAPITAL,,,,Radius is a decentralized network that connects independent workers and teams to projects in web3.,,ZZ,,https://twitter.com/joinradius,943268752001228820,,https://mirror.xyz/joinradius.eth,,https://www.linkedin.com/company/tephralabs/about/,,true,false
Rádius,wy42w1,https://www.theradius.xyz/,NOT_DEPIN,,,,"Radius is a sequencing layer designed to secure transactions, guarantee fast finality, and streamline interoperability in rollups.",,,,,,,,,,,true,false
Radix,orblk8,https://www.radixdlt.com/,NOT_DEPIN,ETHEREUM,XRD,radix,"Radix is a decentralized layer 1 protocol and public network designed specifically for DeFi applications that offers a scalable, secure, and developer-friendly platform.",,,,https://twitter.com/RadixDLT,417762285172555786,https://t.me/radix_dlt,https://www.radixdlt.com/blog,https://github.com/radixdlt,https://www.linkedin.com/company/radixdlt/,,true,false
Radworks,c6z05o,https://radworks.org/,NOT_DEPIN,ETHEREUM,RAD,radworks,"Radworks is building a sovereign developer stack that enables developers to host, collaborate on, and reward open-source code securely.",,ZZ,,https://twitter.com/radworks_,,,,,,,true,false
Raiinmaker,bw9zs2,https://www.raiinmaker.com/,AI,BINANCE,COIIN,,"Raiinmaker is a Web3 and AI tech company that offers the Raiinmaker AI Super App and Network Protocol, leveraging decentralized AI and Web3 to reward users for contributing to AI content creation, AI model training, and DePIN Node operation.",,ZZ,,https://twitter.com/Raiinmakerapp,925938679397105684,,,,,,true,false
Railbird,xlbuml,https://railbirdexchange.com/,NOT_DEPIN,,,,HyperCycle is building a tiny but essential component that enables AI Machines to transact with other AI machines in a sub-second finality which results in unprecedented emergence,Environmental,,,,,,,,https://www.linkedin.com/company/railbird/,,true,false
Railgun,9g0voz,https://railgun.org/,BLOCKCHAIN_INFRA,ETHEREUM,RAIL,railgun,"RAILGUN is a privacy protocol built on Ethereum, BSC, Polygon, and Arbitrum that uses Zero-Knowledge cryptography to enable private transactions and DeFi interactions without leaving the user's chosen blockchain. ",,ZZ,,,,,,,,,true,false
Rainfall,jtmdi1,https://rainfall.one/,AI,,,,Empower billions of people via self-sovereign Personal AI.,,EV3 Sal,,,,,,,,,true,false
Raiz,or2okw,https://www.raiz.farm/,BLOCKCHAIN_INFRA,,,,Raiz Building is a sustainable farming company providing energy efficient urban farms for local consumers.,,,,https://twitter.com/RaizFarms,,,https://medium.com/nearweek/an-introduction-to-raiz-vertical-farms-the-farms-of-the-future-e62094b782c3,,http://www.linkedin.com/company/raiz-vertical-farms,,true,false
RAK,v959ss,https://www.rakwireless.com/en-us,WIRELESS,,,,"RAKwireless is an industrial-leading connectivity provider that builds infrastructures and Modular Edge devices for IoT, Smart City, and Smart Agriculture markets.",IoT,ZZ,,https://twitter.com/RAKwireless,,,,https://github.com/RAKWireless,https://www.linkedin.com/company/rakwireless/,,true,false
Ramo,unhr0p,https://www.ramo.io/,PENDING,,,,,,ZZ,,https://x.com/ramo_io,965534143930851358,,,https://github.com/filmineio/,,,true,false
Rangeview,u0jkdv,https://rangeview.com/,NOT_DEPIN,,,,Rangeview is a developer of industrial machinery designed to make aerospace parts.,,EV3 Sal,,,,,,,https://www.linkedin.com/company/rangeview,,true,false
Rapidata,y47135,https://www.rapidata.ai/,HUMAN_CAPITAL,,,,"Rapidata annotates large datasets rapidly, accurately, and cost-effectively by harnessing the power of the crowd, replacing boring full-screen ads in mobile apps with small, interactive data labeling tasks for AI.",,ZZ,,,,,,,https://www.linkedin.com/company/rapidata/,,true,false
Rare Compute,lvq4xo,https://www.rarecompute.io/,SCIENCE,,,,Rare Compute is a nonprofit biotech consortium using GPU-driven technology to accelerate research and find cures for rare genetic diseases through collaborative computing.,,W. L.,,https://x.com/rarecompute,,,,,,,true,false
Rarimo,6bnfba,https://rarimo.com/,BLOCKCHAIN_INFRA,,,,"Rarimo is a privacy-first, ZK-based social protocol that enables users to go incognito without losing historical actions, networks, and identities, unlocking a new generation of social apps.",ZK,vkurup.eth,,https://x.com/Rarimo_protocol,1034798419614629908,https://telegram.me/collablandbot?start=VFBDI1RFTCNDT01NIy0xMDAyMDg2MjkwNjk3,https://rarimo.medium.com/,,,,true,false
Rated,awg6gj,https://www.rated.network/,BLOCKCHAIN_INFRA,,,,"Rated offers independent, third-party node and node operator ratings, robust data pipelines, and comprehensive infrastructure datasets for PoS networks.""",,8XMR1q5jnzvuPzvg2vanyk7sQEJrZM4UscFNThutJo8H,,https://twitter.com/ratedw3b,,,,,,,true,false
Raven,r3vxyu,https://www.ravenprotocol.com/,AI,BINANCE,RAVEN,raven-protocol,Raven Protocol is a decentralized compute network using idle power for fast AI training.,,ZZ,,https://twitter.com/raven_protocol,,https://t.me/ravenprotocol,https://medium.com/ravenprotocol,,https://linkedin.com/company/ravenprotocol,,true,false
RDDL,wbocde,https://www.rddl.io/,WIRELESS,,,,RDDL Network is a secure Refi and Defi protocol with trust anchors.,IoT,,,http://twitter.com/RDDLNetwork,1044693472390697011,,,https://github.com/rddl-network,https://www.linkedin.com/company/rddl/,,true,false
Re,v7t50o,https://re.xyz/,BLOCKCHAIN_INFRA,,,,"Re is a blockchain-powered protocol that connects its Members with insurance companies and baskets of insurance policies, allowing them to earn premiums and yield.",,ZZ,,,,,,,,,true,false
re.al,icny9f,https://www.re.al/,RWA,,RWA,re-al,"re.al is a modular, permissionless Ethereum Layer 2 platform for tokenized real-world assets, offering fast transactions, reduced gas costs, and secure on-chain investment, trading, and leverage of RWAs.",L1/L2,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/real_rwa,,,,,,,true,false
Reactions,57ba4r,https://reactions.wtf/,NOT_DEPIN,,,,"Reactions is a decentralized social curation protocol that let users react to NFTs, allowing consumers to build influence and earn with communities.",,,,https://twitter.com/reactions_lab,869644271068778616,,,,https://www.linkedin.com/company/reactions-wtf/about/,,false,false
READYgg,wjko90,https://ready.gg/,NOT_DEPIN,,,,READYgg is a Layer3 gaming infrastructure for the Web3 creator economy.,Gaming,ZZ,,https://twitter.com/TheReadyGames,449614151262928897,https://t.me/readygamesofficial,,,https://www.linkedin.com/company/ready-makers-inc/,,true,false
REAKTOR,q0snad,https://www.reaktortoken.com/,BLOCKCHAIN_INFRA,ETHEREUM,RKR,reaktor,Reaktor is a Gaming Layer 1 Blockchain and a Web3 gaming platform where users can generate and sell NFTs within their gaming store and players can play with P2E games.,Gaming,ZZ,,https://twitter.com/ReaktorToken,,,,,,,true,false
Real Protocol,uk9tfg,https://realprotocol.co/,COMPUTE,NATIVE,RPT,,Real Protocol is a decentralized platform that provides non-invasive proof-of-humanity verification and privacy-preserving data exchange using a DePIN and hardware security modules to ensure secure and trusted data transactions.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/realprotocolco,,,,,,,true,false
Realio,tg1g7b,https://realio.network/,NOT_DEPIN,ETHEREUM,RIO,realio-network,Realio manages real-world assets across multiple chains using Cosmos SDK and Tendermint.,,,,https://twitter.com/realio_network,1016319560581914747,https://en.telghub.com/content?id=43971,https://medium.com/@Realio_Network,https://github.com/realiotech,https://www.linkedin.com/company/realio,,true,false
Really,twhfdd,https://www.really.com/,WIRELESS,,,,"REALLY is a decentralized wireless network that offers fully encrypted, private mobile services.",,W. L.,,https://twitter.com/reallywireless,,,,,http://www.linkedin.com/company/reallywireless,,true,false
RealT,eeswka,https://realt.co/,RWA,,,,"RealT is a platform that tokenizes real estate, allowing users to purchase fractional ownership of properties through blockchain while earning rental income and benefiting from seamless transactions via tokenized legal entities.",Real Estate,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/RealTPlatform,,,,,,,TRUE,FALSE
ReapChain,15hta4,https://reapchain.com/,NOT_DEPIN,ETHEREUM,REAP,reapchain,ReapChain: Hybrid blockchain solving trilemma and integrating IoT through distributed storage and PID.,IoT,,,https://twitter.com/ReapChain,,https://t.me/ReapchianOfficial,https://medium.com/reapchain,https://github.com/reapchain/testnets,,,true,false
reBaked,ilesnz,https://www.rebaked.com/,NOT_DEPIN,ETHEREUM,BAKED,baked-token,"reBaked is building governance, collaboration, and financial tools helping Web 3.0 ecosystems achieve shared goals by providing collaboration mechanisms, growth tools, governance infrastructure, and revenue sharing agreements.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/rebaked_dao,,,,,,,true,false
Rebase,k8ft4w,https://rebase.gg/home,SENSORS,SOLANA,IRL,rebase-gg-irl,"Rebase is an AR Adventure and Move-to-Earn, Web3 Lifestyle App powered by Geo-Technology.",Health,ZZ,,https://twitter.com/REBASEgg,,,,,,,true,false
Receipts,zowtah,https://receipts.xyz/,NOT_DEPIN,,,,zk verified credentials minting,ZK,EV3 Sal,,,,,,,,,true,false
Reclaim,6kjw4f,https://www.reclaimprotocol.org/,NOT_DEPIN,,,,User consent & data integrity guaranteed cryptographically.,ZK,,,,,,https://blog.reclaimprotocol.org/,,,,true,false
RecycleFarm,jbfalm,https://recyclefarm.org/,SENSORS,,RFRM,,"RecycleFarm is an AI and ECO-DePIN powered WEB3 lifestyle ReFi platform dedicated to promoting the circular economy by rewarding users for participating in eco-friendly activities such as recycling, reusing, and walking.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/ReFarm_DePIN,,,,,,,true,true
redacted,wprila,https://redacted.onl/,WIRELESS,,,,"redacted is developing a Decentralized VPN for Web3 with a pay-as-you-go model, on Solana",,W. L.,,,,,,,,,true,false
Reddio,ua8s88,https://www.reddio.com/,BLOCKCHAIN_INFRA,,,,"Reddio is a StarkEx-powered, Starknet-compatible parallel EVM Layer 2 designed for Gaming and DePIN.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/reddio_com,,,,,,,true,false
RedStone,ap3amn,https://redstone.finance/,BLOCKCHAIN_INFRA,,REDSTONE,redstone,RedStone Finance is a decentralized Oracle solution that aims to provide reliable and up-to-date data feeds for dApps and smart contracts across various Layer 1 and Layer 2 blockchains.,Oracle,ZZ,,https://twitter.com/redstone_defi,,https://t.me/redstonefinance/,,https://github.com/redstone-finance,https://www.linkedin.com/company/redstone-finance/,,true,false
ReFi Protocol,mdhpn0,https://refiprotocol.io/,RWA,ETHEREUM,REFI,refi-protocol,"ReFi Protocol is a blockchain platform that tokenizes real-world carbon projects, enabling transparent ownership and participation in carbon offset initiatives via NFTs, while offering rewards for supporting genuine environmental impact.",Carbon Offsets/Credits,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/refiprotocol_io,,,,,,,TRUE,FALSE
ReflectionAI,qb1i5n,https://reflectionai.app/,AI,,RECT,,"Reflection is a decentralized AI virtual personality and social computing platform where users can create AI-powered replicas of themselves that communicate, learn, and evolve autonomously.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/reflectionai_,,https://t.me/reflection_ai,https://medium.com/@ReflectionAI_,,,,true,false
ReGen,sbgvjh,https://www.regen.network/,NOT_DEPIN,COSMOS,REGEN,regen,"ReGen focuses on Hydrogen, Ammonia, and Methanol trading for the New Fuel Economy.",Environmental,,,https://twitter.com/regen_pk,,,,,https://www.linkedin.com/company/regen-sw/,,true,false
Rejuve,4v0sqt,https://www.rejuve.ai/,AI,,RJV,,"Rejuve.AI is a decentralized, AI-driven longevity research network allowing people from all over the world to track their health data, receive valuable insights, contribute to cutting-edge longevity research, and earn rewards.",,ZZ,,,1120812469334577232,,,,,,true,false
Relation,t8wbyf,https://www.relationlabs.ai/home,NOT_DEPIN,,REL,relation-native-token,Relation Protocol is a decentralized social graph protocol for encoding relations in Web3.,,ZZ,,https://twitter.com/relationlabs,935837847511003186,https://t.me/therelationlabs,https://medium.com/@RelationLabs,https://github.com/relationlabs,,,true,false
Relative.FI,owdd6z,https://relative.fi/,AI,,,,"Relative Finance is building cross-sector dApps for derivatives and skill-based wagering across SocialFi, DeFi, and GameFi.",Social,,,https://twitter.com/relativefi,1074744445980909678,https://t.me/RelativeFinance,,https://github.com/relativefi,https://www.linkedin.com/company/supermetafi/about/,,true,false
Relay,b0vnal,https://www.relaywireless.com/,WIRELESS,,,,"Relay is a provider of tools for DeWi deployers and WISPs, facilitating telecom network building and management.",,,,https://twitter.com/relaydevice,,,,https://github.com/relay-tools,https://www.linkedin.com/company/relaypro,,true,false
Relayz,ee0zew,https://relayz.io/,BLOCKCHAIN_INFRA,,RELY,,"Relayz is a hyper-secure, privacy-preserving, censorship resistant, and decentralized communication protocol for Web3 utilizing WebRTC, end-to-end encryption, decentralized identities (DID), and a multi-chain protocol layer for enhanced scalability.",,EV3 Sal,,https://x.com/RelayzOfficial,,,,,,,true,false
REM3DI,a9dllc,https://www.rem3di.life/,NOT_DEPIN,SOLANA,REM3DI,,"REM3DI is a decentralized network and ecosystem that empowers patients, innovators, and medical experts by providing blockchain-based financing for life-saving medical research and treatments, focusing on accessible, patient-driven care.",DeSci,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/ProjectRem3di,,,,,,,true,false
Remint,cmm3mc,https://www.remintnetwork.com/,HUMAN_CAPITAL,NATIVE,REMINT,,Remint Network is a real estate cryptocurrency project that combines cloud mining and decentralized finance to enable users to earn tokens and participate in peer-to-peer real estate transactions through its decentralized mobile platform.,DeFi,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/Remint49262812,,,,,,,true,false
Remix,up2zx1,https://remix.ai/,AI,,,,"Remix AI is a social mobile app on iOS and Android, that unites users to create, share, and remix AI images and video.",,EV3 Sal,,,1128516357365960724,,,,,,true,false
Renatus,83jvhp,https://www.renatus-robotics.com/,BLOCKCHAIN_INFRA,,,,Renatus is the first logistics system completing orders at one station.,,,,https://twitter.com/renatusgaming,,,https://discord.com/invite/G9SCvAE,,https://ie.linkedin.com/company/renatus-capital-partners,,true,false
Render,drs2bu,http://renderfoundation.com/,COMPUTE,SOLANA,RNDR,render-token,Render is a decentralized rendering platform for next-gen media production.,GPUs,,,https://twitter.com/rendernetwork,976195870825529354,https://t.me/rendernetwork,https://medium.com/@rendernetwork,https://github.com/rendernetwork/,http://www.linkedin.com/company/render-network-foundation,,true,false
RentSpace,zydynr,https://rentb.space/,PENDING,,,,,,W. L.,,https://x.com/Rentspaceco,,,,,,,TRUE,FALSE
Repl,4dul7f,,NOT_DEPIN,,,,Repl is building a unifying trust layer for DePIN networks by activating idle assets and hardware on Solana through an innovative restaking mechanism.,,ZZ,,,,,,,,,true,false
Reppo,wbxh04,https://reppo.xyz/,AI,,,,Reppo is a pioneering AI-powered Open Composable Reputation Infrastructure to scale DePINs.,,EV3 Sal,,,749188302023950377,,,,,,true,false
Reputable,ph8ydx,https://www.reputable.health/,SENSORS,,,,"Reputable Health is a pioneering digital health platform dedicated to delivering trusted, accessible, and personalized healthcare insights. It allows users to optimize their health and earn rewards.",,ZZ,,,,,,,,,true,false
ResearchHub,844cf4,https://www.researchhub.com/,BLOCKCHAIN_INFRA,ETHEREUM,RSC,researchcoin,"ResearchHub is a collaborative platform that accelerates scientific research by incentivizing researchers to share, summarize, and discuss articles in specialized Hubs.",,,,https://twitter.com/ResearchHubF,957082465258848266,,https://mirror.xyz/blog.researchhubfoundation.eth,https://github.com/ResearchHub,https://www.linkedin.com/company/researchhubtechnologies/,,true,false
Resistor AI,y8ivn4,https://resistorai.org/,AI,ETHEREUM,TOR,resistor-ai,"Resistor AI is a pioneering Layer 2 Blockchain platform with Decentralized AI Services On-Chain, such as an AI Marketplace, Renting & Lending Hardware, Remote Code Execution, and API.",,ZZ,,https://twitter.com/resistorai,,,,,,,true,false
Revert,hcinar,https://www.revert.dev/,NOT_DEPIN,,,,Revert makes it incredibly easy to build integrations with any third party API.,,,,https://twitter.com/revertdotdev,1126480907881160714,,https://www.linkedin.com/company/90436779/,,https://github.com/revertinc/Revert,,true,false
Revest Finance,68z42k,https://revest.finance/,NOT_DEPIN,ETHEREUM,RVST,revest-finance,Revest Protocol is an EVM-based system for the tokenization of financial positions in DeFi.,,,,https://twitter.com/RevestFinance,836435050086137906,,https://revestfinance.medium.com/,https://github.com/Revest-Finance,https://www.linkedin.com/company/revest-finance/,,true,false
RevoFi,bdxcwj,https://revofi.com/,WIRELESS,,,,RevoFi is a decentralized wireless infrastructure platform.,,ZZ,,https://twitter.com/revofico,839162257862295554,,,,https://www.linkedin.com/company/revofi,,true,false
Revolt,e4y106,https://www.therevolt.ai/,AI,,,,"Revolt decentralizes AI training by allowing users to contribute and earn from their idle GPU power, bandwidth, and data, making AI more accessible, scalable, and affordable.",,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/revolt_ai,,,,,,,TRUE,FALSE
REVOX,92vgs4,https://www.revox.ai/,AI,,,,"REVOX is building a modular on-chain AI network, creating a permissionless ecosystem that empowers the development and innovation of decentralized AI dapps through modular agents.",Agents,ZZ,,https://twitter.com/ReadOnMe3,920254345562439751,https://t.me/ReadONCommunity,,https://readonofficial.medium.com/,,,true,false
rhino.fi,d3ignz,https://rhino.fi/,NOT_DEPIN,,,,rhino.fi is the ultimate Layer 2 bridge for effortless multi-chain token movement.,,,,,745570257808130058,,,,,,true,false
Riddle&Code,cn2pt1,https://www.riddleandcode.com/,ENERGY,,,,"Riddle&Code connects physical energy assets with Web3 technology via the RDDL Network, offering innovative and sustainable solutions for the renewable energy sector with tools like Trust Wallet, Energy Agent, and Energy Tracker.",,ZZ,,https://twitter.com/riddleandcode,999216778393698364,,,,https://www.linkedin.com/company/riddle-&-code/,,true,false
RIDO,cnunxv,https://www.rido.io/,BLOCKCHAIN_INFRA,BINANCE,RIDO,,RIDO is a DataFi infra and protocol focused on helping users extract value from their personal data through data mining and data trading.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/rido_crypto,,,,,,,true,false
Ridotto,dth4ai,https://www.ridotto.io/,NOT_DEPIN,ETHEREUM,RDT,ridotto,"Ridotto is a cross-chain Gaming and lottery protocol based on complete transparency, anonymity, security, and fairness.",,ZZ,,,822216283083767868,,,,,,true,false
RightsfuAlly,stk33p,https://rightsfually.com/en/,NOT_DEPIN,,,,We help usher artists and independent content creators into the world of FAIR content attribution.,NFTs,,,https://twitter.com/RightsfuAlly,,,https://www.linkedin.com/showcase/rightsfually/?trk=organization_guest_main-feed-card_reshare-text,,,,true,false
Rilla,ufqo0i,https://rilla.network/,WIRELESS,,,,Rilla Network is a peer-to-peer live-streaming solution leveraging the potential of audience bandwidth to save on traditional infrastructure costs and distribute the value to creators and their communities.,CDN,EV3 Sal,,https://twitter.com/RillaNetwork,,,,,,,true,false
RingFence,v84vfv,,AI,,,,"Ringfence is a generative AI platform that allows creators to create, mint, protect, and monetize their work.",,,,https://twitter.com/RingfenceAI,,,,,,,true,false
Rings,yzigth,https://ringsnetwork.io/,BLOCKCHAIN_INFRA,,,,"Rings Network is a decentralized peer-to-peer network in browsers, offering a solution package for the next-gen Internet, including dWeb and anonymous traffic.",,ZZ,,https://twitter.com/RingsNetworkio,,,,,,,true,false
Ringwallet,y2bfkp,https://ringwallet.com/,BLOCKCHAIN_INFRA,,,,Ringwallet is a wearable hardware wallet.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/ringwallet,,,,,,,true,false
RISC Zero,2sl1de,https://www.risczero.com/,NOT_DEPIN,,,,RISC Zero is a zero-knowledge verifiable general computing platform based on zk-STARKs and the RISC-V microarchitecture.,ZK,ZZ,,,953703904086994974,,,,,,true,false
Ritual,ntppvh,https://ritual.net/,AI,,,,"Ritual is an open, sovereign execution layer for AI. It allows users to seamlessly integrate AI into their app or protocol on any chain, enabling them to fine-tune, monetize, and perform inference on models with cryptographic schemes",,,,https://twitter.com/ritualnet,1210468736205852672,,,https://github.com/ritual-net,,,true,false
Rivalz,4r3sn3,https://rivallz.network/,AI,NATIVE,RIZ,,"Rivalz is an AI-driven Data Provenance DePIN RollApp focusing on AI data provenance and creating a modular ecosystem for AI applications and agents. ",,EV3 Sal,,https://twitter.com/Rivalz_AI,,,,,,,true,false
River,5ki988,https://www.river.build/,BLOCKCHAIN_INFRA,ETHEREUM,RVR,,"River is a protocol for building decentralized real-time messaging apps using an EVM-compatible L2 chain, decentralized stream nodes, and smart contracts on Base to enable programmable, ownable communication spaces.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/buildonriver,,,,,,,TRUE,FALSE
RnDVerse,2iqccc,https://rndverse.com/,PENDING,,,,,,ZZ,,,,,,,,,true,false
Roam,345ael,https://www.roamnetwork.xyz/,WIRELESS,,,,Roam is a crypto-native telco initiative enabling easy setup of mobile networks for 4G or 5G connectivity.,Mobile,,,https://twitter.com/roam_network,1074654906436296734,https://t.me/+Xk2-5Sa02yFjMDE0,https://medium.com/@Roam_Network,,http://www.linkedin.com/company/roamnetwork,,true,false
Robonet,ecb4bs,https://robonet.finance/,NOT_DEPIN,,,,"RoboNet is an AI-powered DeFi protocol that leverages several new developments in decentralized MI and zkML to enable more advanced AI-powered DeFi strategies. It consists of three types of participants: strategists, liquidity providers, and traders.",,ZZ,,https://twitter.com/RoboNetHQ,1095854552269463662,,,,,,true,false
Robonomics,47a3ty,https://robonomics.network/,BLOCKCHAIN_INFRA,ETHEREUM,XRT,robonomics-network,"Robonomics is a Web3 Cloud, which allows managing IoT devices, performing techno-economic transactions between people and machines, and building serverless IoT apps.",IoT,,,,803947358492557312,,,,,,true,false
Robot AI,12ku5r,https://www.0xrobot.ai/,NOT_DEPIN,IOTEX,ROBA,,"Robot AI is an innovative blockchain project on IoTeX integrating unique features including POW, DePIN, 404, and Meme culture.",,ZZ,,https://twitter.com/0xrobot_ai,,,,,,,true,false
RobotEra,t7b6bu,https://robotera.io/,NOT_DEPIN,,,,RobotEra: play-to-earn gaming with NFTs and metaverse world-building.,Gaming,,,https://twitter.com/robotera_io,,https://t.me/+_wOHpPocsxE3NjBh,,,https://www.linkedin.com/company/robot-era/,,true,false
Robotized,n87ym5,https://www.robotiz3d.com/,MOBILITY,,,,"Robotiz3d develops and builds next-generation robotics with machine-learning capabilities for autonomous pothole detection, prevention, and repair.",,,,,,,,,,,true,false
Roko,kz7n8o,https://roko.network/,AI,ETHEREUM,ROKO,roko-network,Roko is a self-organizing human-machine network focused on deep-tech R&D protocol bootstrapping.,Agents,ZZ,,,1080924910018367630,https://t.me/RokoNetwork,,,,,true,false
Rollbit Coin,3m9m9c,https://rollbit.com/,NOT_DEPIN,ETHEREUM,RLB,rollbit-coin,"Rollbit offers casino games, sportsbook, futures trading, and NFT trading.",Gaming,,,https://twitter.com/rollbitcom,698240441316802589,,https://medium.com/coinmonks/what-is-rlb-rollbit-the-solution-for-crypto-degens-ef9af8d35d9e,,,,true,false
RONA,rvmlc7,https://www.rona.game/,PENDING,,,,,,ZZ,,https://x.com/rona_gamejp,1169527596841697311,https://t.me/RonaGame_group,https://medium.com/@rona.game,,,,true,false
Root Protocol,z1ks7o,https://root.xyz/,BLOCKCHAIN_INFRA,ETHEREUM,ISME,root-protocol,Root Protocol is building a Web3 operating system that will serve as a digital identity aggregator to make accessing different Web3 platforms a more seamless process.,,,,https://twitter.com/0xRootLabs,968326172528222268,https://t.me/rootlabs,https://root-labs.medium.com/,https://github.com/nft3labs,http://www.linkedin.com/company/nft3,,true,false
RootData,mz1912,https://www.rootdata.com/,PENDING,,,,,,ZZ,,https://twitter.com/RootDataLabs,,https://t.me/RootDataEN,https://rootdatalabs.medium.com/,,,,true,false
RoseonApp,3stx3v,https://roseon.world/,PENDING,,,,,,W. L.,,https://x.com/RoseonApp,,,,,,,TRUE,FALSE
Roso,36f3to,https://roso.vip/,NOT_DEPIN,ETHEREUM,ROSO,roso-elite-gamblers-mansion,"Roso is a diverse online casino and gaming platform, offering a wide range of gambling experiences.",Gaming,,,,,,,,,,true,false
Router,rwviji,https://www.routerprotocol.com/,NOT_DEPIN,NATIVE,ROUTE,router-protocol,"Router Protocol is a secure, scalable, modular, composable framework for cross-chain interoperability utilizing a mesh network architecture to enable seamless communication between different blockchains.",L1/L2,ZZ,,https://twitter.com/routerprotocol,,,,,,,true,false
Routie,v0g1yx,https://routie.io/,WIRELESS,NATIVE,PKT,pkt,"Routie enables businesses to offer free internet, collect customer data, and earn revenue through captive portals.",,W. L.,,https://twitter.com/helloroutie,,,,,http://www.linkedin.com/company/routie,,true,false
ROVI,tpkifk,https://www.rovimobility.com/,BLOCKCHAIN_INFRA,,,,The ROVI is one of the most innovative power-bases ever created.,Health,,,https://twitter.com/rovimobility,,,,,,,true,false
ROVR,zf0jpw,https://rovr.network/#/home,COMPUTE,SOLANA,ROVR,,"ROVR is a decentralized, global, high-definition, all-scenario, and real-time 3D data collection, processing, and storage platform.",,ZZ,,https://twitter.com/ROVR71776,1248920731752992778,,,,,,true,false
Rowan Energy,erdh9p,https://www.rowanenergy.com/,ENERGY,,RWN,rowan-coin,Rowan Energy is building a community-fed green energy system where members can buy their energy from other members who produce it using solar panels.,,ZZ,,https://twitter.com/RowanRewards,,,,,https://www.linkedin.com/company/rowanenergy/,,true,false
Royal,t62qym,https://royal.io/,NOT_DEPIN,,,,Royal is a marketplace built on top of the Polygon blockchain that enables anyone to invest in music and earn royalties alongside artists.,,,,https://twitter.com/join_royal,867511488151683083,,https://support.royal.io/hc/en-us,,https://www.linkedin.com/company/joinroyal/,,true,false
Royale,csbwex,https://www.royale.finance/,NOT_DEPIN,ETHEREUM,ROYA,royale,Provider of cross-chain decentralized finance services intended to serve the iGaming industry.,,,,https://twitter.com/Royale_Finance,,https://t.me/RoyaleFinance,https://officialroyale.medium.com/,,https://www.linkedin.com/company/officialroyale/about/,,true,false
RPGDepin,0fr6gy,https://www.rpgs.work/,PENDING,,,,,,ZZ,,https://x.com/DepinRpg,,,,,,,true,false
RPS AI,k014yh,https://www.rpslabs.io/,AI,,,,"RPS is building AI infrastructure to power tomorrow's autonomous agents, DApps, and next-gen blockchain analytics. The infrastructure allows anyone to build autonomous AI agent apps securely with the full context of the blockchain in real time.",Agents,ZZ,,https://twitter.com/RPS_Labs,,,,,,,true,false
RRM Global,syqs10,https://www.rrmglobal.io/,COMPUTE,,,,RRM Global is a decentralized GPU computing resource aggregation network.,Storage,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/rrm_global,,,,,,,TRUE,TRUE
RSS3,1tdy5h,https://rss3.io/,AI,ETHEREUM,RSS3,rss3,RSS3 is a next-gen feed protocol for decentralized applications.,,,,https://twitter.com/RSS3_,837332113677090876,https://bit.ly/3e6FZoV,https://medium.com/tag/rss3,https://github.com/NaturalSelectionLabs,http://www.linkedin.com/company/rss3,,true,false
RTK Direct,i2rdst,https://rtkdirect.com/,WIRELESS,POLYGON,RTK,,RTK Direct is a blockchain powered RTK Hotspot. The solution refines and boosts GPS/GNSS data which can then be used to improve the accuracy in that area. With this proven concept they can improve accuracy from 5 meters to 1 centimeter in real-time.,,W. L.,,https://twitter.com/rtkdirect,,,,,,,true,false
Ruff,la5o39,http://ruffchain.com,NOT_DEPIN,ETHEREUM,RUFF,ruff,Ruff is a blockchain-based architecture combining IoT with a public chain and distributed operating system.,IoT,,,,,,,,https://www.linkedin.com/company/ruffllc/,,true,false
rug.ai,w7589y,https://rug.ai/,PENDING,,,,,,ZZ,,https://twitter.com/rug_ai,,,,,,,true,false
Rumbo,rdjrke,https://www.rumbo.so/en,PENDING,,,,,,EV3 Sal,,https://x.com/RumboLabs,,,,,,,true,false
Rumi,3x8glb,https://www.rumi.finance/,NOT_DEPIN,,RUMI,rumi-finance,Rumi is a permissionless platform for DeFi asset management.,DeFi,ZZ,,https://twitter.com/rumilabs,1030554262670942208,,,,https://pt.linkedin.com/company/rumi-finance,,true,false
Runloop,f9rhe0,https://runloop.xyz/,AI,,,,"Runloop builds DeFi simulation environment for training agents in liquidity provision, risk management, and trading.",Agents,,,https://twitter.com/runloop,,,,,https://www.linkedin.com/company/runloop/about/,,true,false
RUNodE,8c3y8v,,PENDING,,,,,,ZZ,,https://x.com/RUNodE_ai,,,,,,,true,false
Ruuvi,3mrg2q,https://ruuvi.com/,SENSORS,,,,"Ruuvi manufactures environmental sensors that measure temperature, air humidity, pressure, and motion. ",,ZZ,,https://twitter.com/ruuvicom,,https://t.me/ruuvicom,https://ruuvi.com/blog/,https://github.com/ruuvi,https://www.linkedin.com/company/ruuvi,,true,false
RWA Inc,6xg4oq,https://www.rwa.inc/,RWA,,RWA,,RWA.Inc is a Real World Asset Tokenization eco-system enabling issuers of Real World Assets to tokenize any asset instantly and investors to safely invest in digital assets.,,ZZ,,https://twitter.com/RWA_Inc_,,,,,,,true,false
RWALayer,8rjj50,https://www.rwalayer.com/,RWA,,,,"RWALayer is a layer-2 blockchain with a dual-yield breakthrough where all bridged assets earn re-stake and RWA yield, and developers access ready-made tools (licensing, banking, compliance) to quickly deploy RWA protocols.",L1/L2,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/RWALayer,,,,,,,true,false
RWAOne,n3b9s3,https://rwaone.io/,RWA,,R1,,RWAOne is an AI-powered Trade2Burn perpetuals platform for RWAs.,DeFi,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/rwaonedefi,,,,,,,true,false
Rymedi,aexn5y,https://rymedi.com/,BLOCKCHAIN_INFRA,,,,Rymedi is a blockchain-enabled platform empowering health workers and patients to improve the quality of care.,Health,,,,,,,,,,true,false
Rynus,5yx072,https://rynus.io/,COMPUTE,NATIVE,RYNUS,,"Rynus is a decentralized GPU computing platform that provides accessible cloud computing power for AI Training, 3D Rendering, Machine Learning, and Deep Learning Models.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/Rynus_io,,,,,,,TRUE,FALSE
RyuChain,8w0s7k,https://ryuchain.io/,AI,NATIVE,RYU,,Ryu Chain is decentralized software enabling everyone to use the full capability of NFTs in combination with decentralized Software and the power of AI.,,ZZ,,,1174758907432931328,,,,,,true,false
SAC,pl7sq2,https://sac-nft.com/,SENSORS,ETHEREUM,SAT,super-athletes-token,SAC is a Sports To Earn project that allows users to exercise with the SAC APP and earn tokens that can be converted into real assets.,Health,ZZ,,https://twitter.com/sacnft_official,,,,,,,true,false
Safe Haven,ewlwyh,https://safehaven.io/,AI,BINANCE,SHA,safe-haven,Decentralized digital inheritance,,,,https://twitter.com/safeHavenio,951025651463385129,https://t.me/safehavenio,http://www.linkedin.com/company/safe-haven-sha,,https://github.com/Safehaven-io,,true,false
Safe Road Club,s10tie,https://saferoadclub.app/,AI,,SRC,,"SRC.ai is an AI-powered Web3 platform that uses blockchain and dApps to gamify the collection and sharing of road vision data, enabling data monetization and accelerating the development of LLMs and vision models for autonomous driving and ADAS.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/SrcAi_Official,,,,,,,true,false
SAFE,t4fjen,https://safenetwork.org/,COMPUTE,NATIVE,SAFE,safe-anwang,SAFE Network is a decentralized data storage and communications network that uses spare computing resources of users.,Storage,ZZ,,https://twitter.com/safenetworktech,,,https://medium.com/safenetwork/about,,,,true,false
Saga DAO,q3ybfy,,NOT_DEPIN,,,,,,EV3 Sal,,https://x.com/sagamobiledao,,,,,,,true,false
Saga,95fcvd,https://www.saga.xyz/,NOT_DEPIN,,SAGA,,Saga is a Layer 1 protocol that allows developers to automatically spin up parallelized and interoperable dedicated chains that elastically scale with their Web3 application needs.,,,,,950275843949736006,,,,,,true,false
Sahara,a2h6y8,https://www.saharalabs.ai/,AI,,,,Sahara is a decentralized AI network enabling everyone to securely deploy and leverage custom AI agents.,Agents,ZZ,,https://twitter.com/SaharaLabsAI,,,,,,,true,false
Saito,i86y1x,https://saito.tech/,NOT_DEPIN,ETHEREUM,SAITO,saito,"Saito: Layer-1 blockchain empowering web 3.0 apps, with distributed infrastructure.",L1/L2,,,https://twitter.com/SaitoOfficial,595860623901065237,https://t.me/SaitoIO,https://saito.tech/blog/,,http://www.linkedin.com/company/saitonetwork,,true,false
Sallar,gh0uy7,https://sallar.io/,PENDING,,,,,,W. L.,,https://x.com/sallar_io,,,,,,,TRUE,FALSE
SALT,p2f3eh,,PENDING,,,,,,vkurup.eth,,,,,,,,,true,false
SAMA,geykyu,https://samax.network/,PENDING,,,,,,ZZ,,https://x.com/sama_network,,https://t.me/+P9M54kBLxW0xNzZl,,,,,true,false
Sanctum,7rxabl,https://sanctum.ai/,NOT_DEPIN,,,,"Sanctum is a downloadable private AI application that lets users run full-featured, open-source LLMs locally.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/sanctumai,,,,,,,true,false
Santa Browser,btiyyj,https://www.santabrowser.com/,NOT_DEPIN,,,,Santa is a web3 browser that allows users to earn crypto rewards for their regular activities online while maintaining control over their privacy.,,EV3 Sal,,https://twitter.com/santabrowser,,,,,,,true,false
SAO,50zns0,https://www.sao.network/,COMPUTE,,,,SAO Network is a decentralized storage infrastructure designed to advance Web3 data storage and facilitate the growth of Web3 applications.,Storage,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/saonetwork,,,,,,,true,false
Sapien,k2xr2i,https://www.sapien.io/,AI,,,,"Sapien is building a large network of human data labelers for the AI industry, utilizing gamification and blockchain incentives to power high-performance models.",,ZZ,,https://twitter.com/SapienGamified,,,,,,,true,false
Sarcophagus,se7wj7,https://sarcophagus.io/,BLOCKCHAIN_INFRA,ETHEREUM,SARCO,sarcophagus,Decentralized dead man's switch,,,,https://twitter.com/sarcophagusio,753398645507883099,,http://www.linkedin.com/company/sarcophagusio,,https://github.com/sarcophagus-org,,true,false
Satea,7piuxo,https://satea.io/,BLOCKCHAIN_INFRA,,,,"Satea is a fully managed Web3 infrastructure, democratizing access to computing resources worldwide for DePIN and AI projects through tailored solutions and managed services.",,ZZ,,https://twitter.com/SateaLabs,,,,,,,true,false
Sator,jxy5nc,https://sator.io/,HUMAN_CAPITAL,ETHEREUM,SAO,sator,Sator is a Blockchain-enabled TV engagement that allows users to earn crypto rewards for watching TV.,,,,,839345964129320970,,,,,,true,false
Satori,gp6a8t,https://satori.finance/,BLOCKCHAIN_INFRA,,,,Satori is a decentralized financial derivatives platform with an “off-chain aggregation and on-chain settlement” design.,,EV3 Sal,,https://twitter.com/SatoriFinance,949080690685804544,,,,,,true,false
Satoshi Airlines,r5itqg,https://satoshiair.xyz/,HUMAN_CAPITAL,ARBITRUM,SAT,satoshi-airlines-token,"Satoshi Airlines is a Web3 air travel lifestyle app with social-fi and game-fi elements, combining Fly-to-Earn and Travel-to-Earn models to reward travelers with tokens and NFT-based incentives, enhancing the travel experience.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/Satoshiairlines,,,,,,,true,false
Saturn,dar2ui,https://saturn.tech/,WIRELESS,FILECOIN,,,"Saturn is an open-source, community-run Content Delivery Network (CDN) built on Filecoin.",CDN,ZZ,,https://twitter.com/FilecoinSaturn,,,,,,,true,false
Sayver,zk9cf4,https://sayver.net/,COMPUTE,,,,Sayver is a blockchain-based platform that enables users to immortalize anything on the blockchain.,Storage,,,,,,,,,,true,false
scalepod,du9pes,https://scalepod.io/,COMPUTE,,,,"Scalepod is a chain-agnostic protocol offering effortless 1-click AI mining deployment and yield generation on GPU power, secured by a unique dsTEE mechanism.",GPUs,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/scalepod?t=cjDrFpESmAi-8Z9vQrQl8A&s=09,,,,,,,true,false
Scalia,4d015n,https://scalia.app/,COMPUTE,ETHEREUM,SCALIA,scalia-infrastructure,"Scalia Infrastructure is a pioneering platform that aggregates and scales DePIN resources to democratize access to decentralized infrastructure resources, enabling individuals, enterprises, and organizations to leverage decentralized technologies.",,EV3 Sal,,https://twitter.com/scaliainfra,,,,,,,true,false
SCANNIT,4yzn9y,https://scannit.io/,SENSORS,,,,"Scannit is building an app that revolutionizes digital financial identity using DePIN technology, enabling users to turn their expenditures into rewards by scanning receipts and managing their data.",Data,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/scannitnetwork,,,,,,,true,false
SCDO,hxewpy,https://scdo.org/#/,BLOCKCHAIN_INFRA,NATIVE,SCDO,,"SCDO is a DePIN public chain based on the ZPoW algorithm. ",L1/L2,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/scdolab,,,,,,,true,false
Schelling AI,r6iwpj,,AI,,,,"SchellingAI developing open-source AI models and datasets, leveraging an institutional-grade digital asset secured by AI compute mining to advance the democratization of AI.",,ZZ,,https://twitter.com/SchellingAI,,,,,,,true,false
SCINET,exm7xr,https://www.scinet.one/,SCIENCE,,,,SCINET is a decentralized life sciences research and investment platform that aims to revolutionize the way people do and support science.,,ZZ,,https://twitter.com/scinet_inc,933419136934101013,,,,https://www.linkedin.com/company/scinet-us/,,true,false
ScPrime,ui2nbm,https://scpri.me/,COMPUTE,SOLANA,D2X,d2,ScPrime is a decentralized network of enterprise-grade cloud storage providers.,Storage,ZZ,,https://twitter.com/ScPrimeCloud,500467593375645706,,https://scpri.me/articles/,https://gitlab.com/scpcorp/,https://www.linkedin.com/company/scp-corp,,true,false
Script TV,3yilwl,https://token.script.tv/,WIRELESS,ETHEREUM,SCPT,script-network,"Script Network is an EVM Layer 1 video protocol, infrastructure, and live broadcasting network that allows users to distribute their content.",,ZZ,,,849605237185970196,,,,,,true,false
Scrypted,vsvy5x,https://www.scryptedinc.com/,AI,,,,"Scrypted builds decentralized, self-owning autonomous agents and games, using AI and blockchain technology to create autonomous virtual beings and innovative gaming experiences.",Agents,EV3 Sal,,https://x.com/scryptedinc,,,,,,,true,false
ScyNet,5kz9p0,https://scynet.ai/,COMPUTE,,,,ScyNet is a Decentralized network for creating and training autonomous AI agents.,,ZZ,,https://twitter.com/ScynetAI,484370483739885608,,,https://github.com/comrade-coop/scynet,,,true,false
SDrive,hvlpd4,https://sdrive.app/,COMPUTE,SOLANA,SCOIN,sdrive-app,"SDrive is a decentralized storage solution offering secure, immutable file storage with user-friendly access and strong privacy features on the Solana blockchain, complemented by robust developer tools including CLI, SDKs, and APIs.",,ZZ,,,,,,,,,true,false
Seal Storage,h5599x,https://sealstorage.io/,COMPUTE,,,,"Seal Storage is a blockchain-powered decentralized cloud storage platform offering enterprise-grade, immutable, and SOC2 and HIPAA compliant data storage.",Storage,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/SealStorage,,,,,,,true,false
Sealink,spnzni,https://sealink.network/,WIRELESS,NATIVE,SLK,sealink-network,"The Sealink Network integrates Proof of Stake (PoS) and a unique Proof of Work (uPoW) blockchain technology to offer a decentralized, secure, and free virtual private network (VPN) service, which includes features like remote access and port mapping.",,W. L.,,,1181985750854668348,,,,,,true,false
Sebra,s3scxn,https://sebra.ai/,AI,ETHEREUM,BRAIN,sebra-ai,"Sebra AI is a platform that enables users to effortlessly create and deploy custom AI chatbots, utilizing their own data and knowledge, for personal or public use and can be easily integrated into Telegram.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/sebraai,,,,,,,true,false
SecondLive,6qvjpf,https://secondlive.world/,NOT_DEPIN,,,,"SecondLive is a metaverse for avatars, virtual spaces, art exhibitions, and gaming.",,,,https://twitter.com/SecondLiveReal,864036969851650048,https://t.me/SecondLiveCommunity,https://medium.com/@SecondLiveReal,https://github.com/SecondLive23,,,true,false
Secret,rwnruc,https://scrt.network/,PENDING,,,,,,ZZ,,https://x.com/SecretNetwork,360051864110235648,,,,,,true,false
SecureChain AI,hhp2qb,https://securechain.ai/,BLOCKCHAIN_INFRA,ETHEREUM,SCAI,securechain-ai,"SecureChain AI is an AI-powered, EVM-compatible blockchain platform that enhances security and speed for DeFi projects and Dapps using its Intelligent Security Engine (ISE) algorithm.",L1/L2,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/securechainai,,,,,,,TRUE,FALSE
Security Labs,foeidx,https://www.securitylabs.xyz/,BLOCKCHAIN_INFRA,,,,"Security Labs is developing Functor Network, a DePIN for decentralized key management chain abstraction that integrates with any wallet across multiple blockchains, enhancing security and simplifying the crypto user experience.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/securitylabsxyz,,,,,,,true,false
SEDA,mbv7cs,https://www.seda.xyz/,BLOCKCHAIN_INFRA,ETHEREUM,SEDA,seda-protocol,"SEDA is an intent-based, modular data layer that enables developers to conduct data queries for any data type from any blockchain, facilitating permissionless integration of external data within their native blockchain environments.",Oracle,ZZ,,,,,,,,,true,false
Seed Labs,ixg6ts,,NOT_DEPIN,,,,"Seed Labs is a collectively owned, community-first, open early stage venture capital.",,,,,,,,,https://www.linkedin.com/in/seed-lab-my-9246951a8/,,true,false
Seers,iqfrg9,https://seers.social/,PENDING,,,,,Prediction Market,ZZ,,https://x.com/SeersApp,,,,https://github.com/SeersSocial,,,true,false
SEI,qijvwz,https://www.sei.io/,NOT_DEPIN,,SEI,,"Sei is a specialized Layer 1 blockchain optimized for digital asset exchanges, offering unparalleled speed and a unique consensus mechanism to solve the Exchange Trilemma, enhancing user experience across trading, gaming, and NFT marketplaces.",L1/L2,ZZ,,,973057323805311026,,,,,,true,false
Seismic,s3ffe5,https://www.seismic.systems/,PENDING,,,,,,vkurup.eth,,https://x.com/SeismicSys,,,,,,,true,false
Sekai,sn7oit,https://www.joinsek.ai/,PENDING,,,,,,,,https://x.com/joinsekai,,,,,,,TRUE,FALSE
SelfChain,151ado,https://selfchain.xyz/,AI,,,,Self Chain Is The First Modular Intent-Centric Access Layer L1 Blockchain And Keyless Wallet Infrastructure Service That Uses MPC-TSS/AA For Multi-Chain Web3 Access,Software,,,https://twitter.com/selfchainxyz,1146385445563944961,https://t.me/selfchainxyz,,,,,true,false
Selfie.Live,ygcyqn,https://www.selfie.live/,PENDING,,,,,,ZZ,,https://x.com/Selfiedotlive,,,,,,,true,false
SelfKey,b12fse,https://selfkey.org/,NOT_DEPIN,ETHEREUM,KEY,selfkey,SelfKey is a blockchain-based identity platform.,,,,https://twitter.com/selfkey,897002577831526460,https://t.me/selfkeyfoundation,https://medium.com/@SelfKey,https://github.com/SelfKeyFoundation,http://www.linkedin.com/company/selfkey,,true,false
Semaphore,4ubfgn,,NOT_DEPIN,,,,The Semaphore Network is developing an EthSIM Wallet to allow anyone to turn ANY cellphone into a secure air-gapped hardware wallet for Ethereum transactions.,,EV3 Sal,,,,,,,,,true,false
Semtech,rzpn43,https://www.semtech.com/,WIRELESS,,,,"Semtech Corporation is a high-performance semiconductor, IoT systems and Cloud connectivity service provider dedicated to delivering high quality technology solutions that enable a smarter, more connected and sustainable planet.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/SemtechCorp,,,,,,,true,true
Sender AI,mhdrxe,https://www.sender.org/,BLOCKCHAIN_INFRA,OPTIMISM,,,"Sender Network is an AI-centric decentralized transaction execution network, integrating an AI Agent communication layer with a modular blockchain application interaction layer to optimize transaction efficiency and simplify blockchain interactions.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/sender_ai,,,,,,,TRUE,FALSE
Sending Labs,xe4qlj,https://www.sending.network/,WIRELESS,,,,"SendingNetwork is a DePIN communication layer enabling peer-to-peer chat and other messaging services, allowing Web3 developers to integrate secure, end-to-end encrypted communication into their apps.",,EV3 Sal,,,1194624738652344370,,,,,,true,false
SenRa,ibnl95,https://www.senraco.com/,WIRELESS,,,,SenRa is a LoRaWAN Network provider for the Internet of Things and Machine-to-machine applications.,IoT,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/senraco,,,,,,,true,false
Sense4FIT,dxbht3,https://sense4fit.io/,SENSORS,MULTIVERSX,SFIT,sense4fit,"Sense4FIT is a Web3 lifestyle ecosystem that gamifies health and fitness, rewarding users for healthy activities through its app, gyms, events, and Fit2Earn platform.",Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/sense4fit,,,,,,,true,false
Sensecap,4mztfe,https://www.sensecapmx.com/,BLOCKCHAIN_INFRA,,,,"Sensecap: LoRaWAN IoT hardware for Helium hotspots, building decentralized networks.",IoT,,,https://www.sensecapmx.com/blogs/,,,,,https://www.linkedin.com/company/seeedstudio/,,true,false
SensorETA,a5095w,https://www.sensoreta.com/,SENSORS,,,,"Sensor ETA provides an adaptable, enterprise-class IoT solution that automates and optimizes sensor devices across industries to reduce waste, protect resources, and maximize operational efficiency.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/SensorETA,,,,,,,TRUE,TRUE
Sensys,67cywh,https://sensys.xyz/,AI,,,,Sensys creates advanced products for Sentient to build open and trust-free AI applications that are ethical and human-centered and develop the open AGI ecosystem.,,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/0xSensys,,,,,,,true,false
Sentimint,3tz2mg,https://sentimint.life/,PENDING,,,,,,EV3 Sal,,https://x.com/sentimint_life?s=11,,,,,,,TRUE,FALSE
Sentinel,r77x1a,https://sentinel.co/,COMPUTE,COSMOS,DVPN,sentinel,Sentinel is a global ecosystem of autonomous dVPN apps enabling private censorship-resistant internet access.,VPN,ZZ,,https://twitter.com/Sentinel_co,436630361313640469,https://t.me/sentinel_co,https://medium.com/sentinel,https://github.com/sentinel-official,https://linkedin.com/company/sentinelco,,true,false
SEOR,wpruwu,https://www.seor.io/#/home,NOT_DEPIN,BINANCE,SEOR,seor-network,"SEOR is the next generation of decentralized Web3.0 application technology development infrastructure, which aims to provide users and developers of Web3.0 with an easy-to-use blockchain technology development platform.",,,,https://twitter.com/SEOR001,882647441193725953,https://t.me/SeorGroup,https://medium.com/@SEOR,,,,true,false
Seraphnet,8kxbod,https://www.seraphnet.ai/,AI,NATIVE,DLLM,,Seraphnet is a decentralized base Layer for Ideologically-Transparent Generative AI Apps.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/seraphnet,1224692712091942952,,,https://github.com/Seraphnetai,https://www.linkedin.com/company/seraphnet/,,true,false
Serenity Shield,yc3xgv,https://www.serenityshield.io/,COMPUTE,BINANCE,SERSH,serenity-shield,"StrongBox is a fully decentralized and privacy-preserving app for storing, transferring, and recovering confidential data. The platform also boasts a customizable inheritance option, enabling users to manage their data according to their preferences.",Storage,ZZ,,https://twitter.com/SerenityShield_,,,,,,,true,false
Seshat,eslheu,https://seshatlabs.xyz/,AI,,,,"Seshat is a decentralized Web3 protocol designed to revolutionize machine learning dataflow management by leveraging idle network resources to enhance scalability, security, and efficiency for data handling, processing, and real-time inference.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/seshatlabs,,,,,,,true,false
Session,xm8o5o,https://getsession.org/,BLOCKCHAIN_INFRA,,,,"Session is an end-to-end encrypted messenger that minimises sensitive metadata, designed and built for people who want absolute privacy and freedom from any form of surveillance.",,,,https://twitter.com/session_app,,,https://getsession.org/blog,https://github.com/oxen-io,http://www.linkedin.com/company/sessionmessenger,,true,false
Set,zftfbg,,NOT_DEPIN,,,,Set is an onchain indexing protocol,,,,,,,,,,,true,false
Setoros,ulo2gi,https://setoros.com/,NOT_DEPIN,,,,Setoros is a decentralized crypto sportsbook for global betting.,,,,https://twitter.com/setoros,1077512035899809823,,https://medium.com/@baduungg/update-setoros-testnet-now-launching-on-base-network-dbc2a77f232b,https://github.com/setoros-group,,,true,false
Setter,9emkwg,https://www.setter.co/,NOT_DEPIN,,,,Setter is the go-to app for drops and community. Be the first to RSVP for upcoming releases and limited editions.,,EV3 Sal,,,,,,,,,true,false
Sfero,k02lxn,https://sfero.io/,SENSORS,,,,"Sfero is a decentralized POS terminal integrating conventional payment methods alongside modern options like Apple Pay, Google Pay, and cryptocurrency transactions using cutting-edge biometric solutions.",,EV3 Sal,,https://twitter.com/sfero_io,,,,,,,true,false
SFT Protocol,hb0kuf,https://sft.network/,COMPUTE,,SFT,,"SFT Chain is a 'Chain of Chains' bridging physical infrastructure with Web3, building a DePIN platform that integrates storage, computing, edge CDN, and beyond.",,ZZ,,https://twitter.com/SFTProtocol,,,,,,,true,false
Shadeform,d4dfm9,https://www.shadeform.ai/,AI,,,,Shadeform is building a one stop shop for cloud GPUs. Here‚Äôs a look at our upcoming roadmap and upcoming features!,,,,,1085330034614616134,,,,http://www.linkedin.com/company/shadeformai,,true,false
Shadow Node,qlbqnf,https://shadownode.org/,WIRELESS,ETHEREUM,SVPN,shadow-node,"Explore Shadow Node is a decentralized VPN framework that empowers users with secure, private, and uncensored internet access.",VPN,ZZ,,https://twitter.com/shadownodeVPN,,,,,,,true,false
Shaga,t5y2jk,https://linktr.ee/web3shaga,COMPUTE,,,,Shaga offers a unique gaming ecosystem that empowers gamers to lend access to their gaming PCs and monetize their hardware.,,,,https://twitter.com/Web3Shaga,,,,https://github.com/ShagaDAO/Shaga-Monorepo,,,true,false
Shamba,zfwfw0,https://shamba.link/,BLOCKCHAIN_INFRA,,,,"Shamba is a Web3 ecological data oracle and Decentralized Monitoring, Reporting & Verification Network.",Oracle,ZZ,,,906066831071146046,,,,,,true,false
Shardeum,g65u6w,https://shardeum.org/,BLOCKCHAIN_INFRA,ETHEREUM,SHM,shardeum,Shardeum: EVM-based platform ensuring decentralization and security.,,,,https://twitter.com/shardeum,933959587462254612,https://telegram.me/shardeum,https://medium.com/@Shardeum,https://github.com/shardeum/,http://www.linkedin.com/company/shardeum,,true,false
SHARE,a1b4yu,https://www.shareoncrypto.com/,PENDING,,,,,,EV3 Sal,,https://x.com/shareon_crypto,,,,,,,true,false
ShdwDrive,p01o2s,https://www.shdwdrive.com/,COMPUTE,SOLANA,SHDW,genesysgo-shadow,"ShdwDrive by GenesysGo is a decentralized, performant, and scalable object storage designed for Web3 builders.",Storage,ZZ,,https://x.com/genesysgo,830127596355190804,,,https://github.com/GenesysGo/,,,true,false
Shentu Chain,vp6r7p,https://www.shentu.technology/,BLOCKCHAIN_INFRA,POLYGON,CTK,shentu,"Shentu Chain enables a system of decentralized Security Oracles that provide runtime analysis of the security of live smart contracts. ",,ZZ,,,729116343760191590,,,,,,true,false
SherLOCKED,rm0wa6,,NOT_DEPIN,,,,,,,,,,,,,,,true,false
Shibuya,rgobsb,https://www.shibuya.film/,NOT_DEPIN,,,,"Shibuya is a web3 platform for film financing and production where users engage, fund, vote, and become owners of the content.",,ZZ,,https://twitter.com/shibuyafilm,946167913021333635,,https://medium.com/@shibuya.xyz,,http://www.linkedin.com/company/shibuyaxyz,,true,false
Shieldeum,k9q3f3,https://shieldeum.net/,COMPUTE,BINANCE,SDM,,"Shieldeum is an AI-powered Web3 Cybersecurity DePIN offering advanced services like application hosting, data encryption, threat detection, and high-performance computing to protect crypto holders and Web3 enterprises.",,ZZ,,https://x.com/Shieldeum,,,,,,,true,false
Shimmer,11u1dj,https://shimmer.network/,NOT_DEPIN,NATIVE,SMR,shimmer,"Shimmer is a high-performance, feeless, and parallelized Directed Acyclic Graph (DAG) ledger offering a chain-agnostic solution for fully customizable smart contract chains to be built on top.",,ZZ,,,,,,,,,true,false
Shinkai,vm959p,https://www.shinkai.com/,AI,,,,"Shinkai combines LLM-based AI, private data, and task scheduling together with file support, deep crypto integration, and a decentralized p2p network.",,ZZ,,https://twitter.com/ShinkaiProtocol,1136286734863302687,,,,,,true,false
Shipped,v05a0g,https://shipped.com/,BLOCKCHAIN_INFRA,,,,Shipped is a logistics industry plugin that enables payment for shipping by scanning the barcode on the parcel.,,,,https://www.twitter.com/shippedcom,,,https://shipped.com/blog/,,https://linkedin.com/company/shipped-com,,true,false
ShogAI,99hi2h,https://shog.ai/,AI,ETHEREUM,SHOG,shog,"Shog Studio is an open-source, decentralized AI platform that provides access to models, code, datasets, and papers, enabling users to chat with LLMs and earn crypto rewards.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/shog_agi,,,,,,,true,false
SHOGGOTH,w72dm1,https://shoggoth.systems/,AI,,,,"Shoggoth is a peer-to-peer, anonymous network for publishing and distributing open-source code, Machine Learning models, datasets and research papers.",,,,,1168088807334219837,,,,,,true,false
ShopConnect,butvw4,https://www.shopconnect.live/,NOT_DEPIN,,,,Our disruptive innovation reduces the dependence on travel and paper. To optimize costs and control the carbon footprint with a virtual shopping platform.,ZK,,,https://twitter.com/ETHGlobal,,,https://ethglobal.medium.com/,https://github.com/ethglobal,https://www.linkedin.com/company/ethglobal/,,true,false
ShopNEXT,z5dcvj,https://shopnext.io/,NOT_DEPIN,BINANCE,NEXT,shopnext-loyalty-token,ShopNEXT is a Web3 loyalty platform that allows users to earn token rewards via shopping while helping merchants grow their businesses.,E-commerce,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/HelloShopNEXT,,,,,,,TRUE,FALSE
SHOPX,r39fmd,https://shopx.co/,RWA,ETHEREUM,SHOPX,shopx,"SHOPX empowers brands to monetize Web3 by tokenizing real-world assets, enhancing customer engagement and ownership.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/shopxlabs,,,,,,,true,false
Showtime,kwds7m,,SENSORS,SOLANA,,,"Showtime Watch is a Solana-based DePIN with ShowAI Companion, Proof-of Togetherness, and AR Gesture Identification.",,ZZ,,https://twitter.com/SHOWTIME_WATCH,,,,,,,true,false
Shuttle Labs,aoo9gh,https://shuttlelabs.co/,NOT_DEPIN,,,,Shuttle Labs is a digital product studio building web applications to solve real problems.,,,,,,,,,,,true,false
Shyft,kh7rbg,https://shyft.to/,BLOCKCHAIN_INFRA,,,,"Shyft provides an infrastructure Layer for Web3 Solana development, including GraphQL, RPCs, APIs, and SDKs.",,EV3 Sal,,https://twitter.com/shyft_to,,,,,,,true,false
Sia,esjdj0,https://sia.tech/,COMPUTE,NATIVE,SC,siacoin,Sia is a decentralized cloud storage network combining Proof of Work with a contract-based storage model.,Storage,,,https://twitter.com/sia__foundation,809849352516141067,,,https://github.com/SiaFoundation,http://www.linkedin.com/company/the-sia-foundation,,true,false
Side,62pug3,https://www.side.one/,NOT_DEPIN,,SIDE,,"Side Protocol is an extension layer of Bitcoin, a sidechain secured by BTC and serving as the settlement layer for zk-rollups within the modular stack.",,ZZ,,,1031431934204706856,,,,,,true,false
SideQuest,hopxsm,https://sidequestvr.com/,NOT_DEPIN,,,,"SideQuest is a VR content platform that allows users to discover and access a wide range of VR content, including experimental games, prototypes, and full releases for standalone headsets like Quest and Quest 2.",,EV3 Sal,,https://twitter.com/SideQuestVR,1094735216918147113,,,,,,true,false
sidequest.xyz,vvp3t7,https://www.sidequest.xyz/,PENDING,,,,,,EV3 Sal,,https://twitter.com/sidequest_xyz,,,,,,,true,false
Sight AI,svlp36,https://sightai.io/,BLOCKCHAIN_INFRA,,,,Sight Oracle is a cutting-edge computational oracle that enables secure and fair encrypted data computations using Fully Homomorphic Encryption (FHE).,Oracle,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/thesightai,,,,,,,true,false
Siglo,7gjqft,https://siglo.com/,WIRELESS,,,,Siglo is a wireless internet service provider.,,,,https://twitter.com/hashtag/siglobar,,,,,http://www.linkedin.com/company/siglointernet,,true,false
Sigmoid,v0hgwm,https://www.sigmoid.wtf/,AI,,SIGMA,,"Sigmoid is a coordination protocol between decentralized AI networks, node operators, and users.",,EV3 Sal,,https://twitter.com/sigmoidwtf,,,,,,,true,false
Sign,0ktyfb,https://sign.global/,NOT_DEPIN,,,,Sign is a Global Trust Layer that allows users to attest and verify data in user-defined formats on-chain.,,EV3 Sal,,https://twitter.com/ethsign,,,,,,,true,false
Silence,j2py3v,https://www.silencelaboratories.com/,NOT_DEPIN,,,,Silence Labs is a cybersecurity company specializing in decentralized MFA and MPC-based authentication.,,,,https://twitter.com/silentauth,,,https://medium.com/silence-laboratories,,https://www.linkedin.com/company/silencelaboratories/,,true,false
Silencio,5m6dp8,https://www.silencio.network/,SENSORS,,,,Silencio rewards users for providing hyper-local noise pollution data from smartphones.,,ZZ,,https://twitter.com/silencioNetwork,1034207908210147489,https://telegram.me/silencio17,https://medium.com/@eversept/about?source,https://github.com/topics/silencio,https://www.linkedin.com/company/silencio,,true,false
Silent Link,q5prya,https://silent.link/,WIRELESS,,,,Silent Link provides global mobile 4G/5G Internet access and burner phone numbers on any eSIM-compatible smartphone.,,,,https://twitter.com/silentlink1,,,,,,,true,false
SingularityDAO,g7dhjc,https://www.singularitydao.ai/,AI,ETHEREUM,SDAO,singularitydao,SingularityDAO: Decentralized Portfolio Management Protocol for safe and easy crypto asset management.,,,,https://twitter.com/SingularityDao,918044007521714239,https://t.me/SingDAO,https://medium.com/singularitydao,,http://www.linkedin.com/company/singularitydao,,true,false
SingularityNET,48m8lh,https://singularitynet.io/,AI,ETHEREUM,AGIX,singularitynet,"SingularityNET enables easy creation, sharing, and monetization of AI services through its global marketplace.",,,,https://twitter.com/singularitynet,909843832491896832,https://telegram.me/singularitynet,https://medium.com/tag/singularitynet,https://github.com/singnet,http://www.linkedin.com/company/singularitynet,,true,false
Sinso,tde0ef,https://www.sinso.io/,COMPUTE,,SINSO,,Sinso is a Web3.0 Infrastructure Simplifying Decentralized HotData Cache and Data Governance.,,,,,935486561368281139,,,,,,true,false
Sirius,tqnguc,https://www.siriuschain.io/,BLOCKCHAIN_INFRA,NATIVE,XPX,proximax,"Sirius Chain is an advanced Proof-of-Stake and Proof-of-Greed blockchain with built-in features such as multi-level multisig, validator rewards, fast finality, easy digital asset creation, and transaction management.",,ZZ,,,899791905204883476,,,,,,true,false
Sitenna,xeu3zu,https://sitenna.com/,WIRELESS,,,,"Sitenna streamlines the process of site acquisition, portfolio management and collocation sales for telecom companies.",Software,,,,,,,,http://www.linkedin.com/company/sitenna,,true,false
SK.eye net,799qwi,,PENDING,,,,,,EV3 Sal,,,,,,,,,true,false
SkAInet,fn1f6k,https://skainet.xyz/,AI,NATIVE,SKAI,,SKAINET is a decentralized AI platform that combats censorship and bias in artificial intelligence with uncensored models and decentralized inference.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/skainetxyz,,,,,,,true,false
Skey,v9jtu7,https://skey.network/,NOT_DEPIN,ETHEREUM,SKEY,skey-network,"Skey Network is an independent blockchain ecosystem that allows users to build adaptable products, services, and user-friendly apps, integrating IoT and NFTs to enable new business models.",DeFi,,,https://twitter.com/skeynetwork,,https://t.me/SkeyNetworkNews,https://skeynetwork.medium.com/,https://github.com/skey-network,http://www.linkedin.com/company/skeynetwork,,true,false
Skeye,lmzn0p,https://skeye.ai/,SENSORS,NATIVE,SKEYE,,"Skeye is a provider of a platform that democratizes access to celestial data, fostering collaboration among sky observers and researchers.  Skeye Recon is a monitoring device to capture and analyze sky-related activities and phenomena.",,ZZ,,https://twitter.com/skeyeai,,,,,,,true,false
Skiff,bts0sr,http://www.skiff.com/,NOT_DEPIN,,,,"Skiff is an end-to-end encrypted, privacy-first workspace built for communicating and collaborating freely. They offer Mail, Calendar, Pages (notes), and Drive products.",,ZZ,,https://twitter.com/skiffprivacy,,,https://skiff.com/blog,https://github.com/skiff-org,https://www.linkedin.com/company/skiffprivacy/,,true,false
Skillful,8lb0be,https://skillfulai.io/,AI,,SKAI,,"Skillful AI is a personalized AI ecosystem, offering domain-specific virtual assistants, tailored interactions, developer tools, and blockchain integration for staying ahead in a dynamic digital landscape.",,EV3 Sal,,,,,,,,,true,false
Sky Trades,mfvv88,https://sky.trade/,BLOCKCHAIN_INFRA,,,,Sky Trades is a marketplace for air rights for drone traffic.,,,,,,,http://www.linkedin.com/company/skytrades,,,,true,false
SkyLink,jtl9ek,https://skylink.city/,ROBOTICS,,,,"SkyLink operates a decentralized drone network, integrating blockchain technology to provide innovative sky shows, empower Web3 enterprises, and enable community-driven governance and commercial distribution.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/SkyLink1147988,,,,,,,true,false
Skynet,mlyhbm,https://www.skynet.io/,COMPUTE,,SKY,,"Skynet is a homogeneous AI-cloud, a ‘DePIN SuperCloud’, comprising interconnected GPU, compute, and storage clusters that empower AI systems globally.",,ZZ,,https://x.com/Skynet_AI_DePIN,,,,,,,true,false
Skypier,5dkcg6,https://skypier.io/,WIRELESS,,,,Skypier decentralized network is a subscription-based peer-to-peer VPN that enables anyone to create their own hybrid cloud.,VPN,ZZ,,https://twitter.com/SkypierIO,,,,,,,true,false
Skywire,uzm5fs,https://www.skycoin.com/,NOT_DEPIN,,,,"Skycoin (SKY) is an open-source, community-owned, hardware-based peer-to-peer internet that leverages the incentive structure of the blockchain.",,ZZ,,https://twitter.com/SkycoinProject,,https://t.me/Skycoin,https://www.skycoin.com/blog/,https://github.com/skycoin,https://www.linkedin.com/company/skycoin/,,true,false
Sleepagotchi,j3sv74,https://www.sleepagotchi.com/,SENSORS,,,,"Sleepagotchi is a sleep health mobile app that rewards users with digital collectibles and tokens for a consistent sleep schedule. Sleepagotchi leverages scientific research and gamification to incentivize users to sleep better. ",,EV3 Sal,,https://twitter.com/sleepagotchi,961446120364605540,,,,,,true,false
SLEEPASS,mqfgxj,https://sleepass.com/,SENSORS,ETHEREUM,GSPT,,SLEEPASS is a sleep improvement blockchain-based app with game-fi features that allows users to earn virtual currency and NFTs by having healthy sleeping habits.,,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/SleepassApp,,,,,,,true,false
SleepDAO,d7hd7t,https://www.waterbear.science/projects/9965fb91-d0da-4724-b925-9a503dc4af27,SENSORS,,ZZZ,,"SleepDAO is a decentralized platform that allows users to connect their Oura ring, gain insights into their sleep using AI, and earn tokens along the way.",,EV3 Sal,,,,,,,,,true,false
Sleepless,u5x0h7,https://www.sleeplessai.net/home,AI,BINANCE,AI,sleepless-ai,Sleepless AI is a Web3+AI companion gaming platform.,,ZZ,,https://twitter.com/SleeplessAI_Lab,1184356662774083604,,,,,,true,false
Sliceledger,eu6iys,https://sliceledger.io/,NOT_DEPIN,,,,Sliceledger is a decentralised Ethereum scaling platform empowering developers to build secure and low-fee dapps.,L1/L2,ZZ,,https://mobile.twitter.com/ledgerslice,,,,,https://www.linkedin.com/company/slice-ledger,,true,false
Smart Island,z60kpx,https://smartislandibiza.com/,BLOCKCHAIN_INFRA,,,,"Smart Island is an Internet of Things (loT) Living Lab and Service Provider for related applications in Ibiza, connecting people, things & territory through cutting-edge technology.",,,,https://twitter.com/smartislandibz,,,,,https://www.linkedin.com/company/smartislandibiza/,,true,false
SmartCredit,eiq46d,https://smartcredit.io/,AI,ETHEREUM,SMARTCREDIT,smartcredit-token,"SmartCredit connects lenders and borrowers globally, offering decentralized peer-to-peer lending.",,,,https://twitter.com/Smartcredit_io,,https://t.me/SmartCredit_Community,https://medium.com/smartcredit-io,https://github.com/SmartCredit-io,https://www.linkedin.com/company/smartcredit-io/,,true,false
SmartPoint,7su9n8,https://smartpoint.io/,SENSORS,IOTEX,,,SmartPoint is a decentralized edge computing network.,,,,https://twitter.com/SmartPointIO,,,https://github.com/topics/smartpoint-cloud-platform,,https://www.linkedin.com/company/smartpoint,,true,false
Smlxl,x6phis,https://smlxl.io/,COMPUTE,,,,"At smlXL, we spend much time diving into solc - our latest blog series (3 parts) will cover areas of solc that lack documentation yet are essential (and interesting).",,,,https://twitter.com/smlxldotio,,,https://blog.smlxl.io/,https://github.com/smlxl,https://www.linkedin.com/company/smlxl-tech,,true,false
Snickerdoodle,l4f7iq,https://www.snickerdoodle.com/,NOT_DEPIN,,,,"Snickerdoodle Labs is building a next-generation, web3-focused data management platform, and consumer data protocol that replaces cookies with specialized zkSNARK circuits and datalakes with client-side data custody.",,ZZ,,,,,,,,,true,false
SNP,jsx894,https://snpad.snp.network/,HUMAN_CAPITAL,ETHEREUM,SNPAD,snpad,SNPad is a TV advertising platform leveraging AI and blockchain to deliver personalized video ads and reward viewers with crypto tokens.,Advertising,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/SnpNetwork,,,,,,,true,false
SNPIT,zwl6g1,https://lp.snpit.xyz/,SENSORS,POLYGON,SNPT,snpit-token,"SNPIT is a Snap-to-Earn platform using Camera NFTs, offering a GameFi experience where users take photos and participate in battles to earn rewards.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/snpit_global,,,,,,,true,false
Soarchain,75ez8s,https://www.soarchain.com/,BLOCKCHAIN_INFRA,,,,"Soarchain is a Layer 1 Network that aims to establish a decentralized ecosystem where participants, including vehicles, data providers, and developers, can interact and exchange value securely.",,W. L.,,https://twitter.com/soar_chain,,,,,,,true,false
SoccerN,a0mxtw,https://www.soccern.io/,SENSORS,ETHEREUM,SOCN,,SoccerN is a decentralized football intelligence network that utilizes AIoT devices and blockchain technology to enable data ownership and monetization in football.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/soccern_global,,,,,,,true,false
Social Bicycles,eszhrl,https://www.socialbicycles.com/,WIRELESS,,,,SoBi is a smart Bikeshare system that uses wireless technology to enhance personal mobility.,,EV3 Sal,,https://twitter.com/socialbicycles,,,,,,,true,false
Social Layer,ij0xno,https://www.sociallayer.im/,BLOCKCHAIN_INFRA,,,,"Social Layer is a turnkey framework and infrastructure for the design, scale, and sustainability of Pop-up Communities and Cities.",,EV3 Sal,,https://twitter.com/SocialLayer_im,,,,,,,true,false
SocialTensor,6rifjz,https://www.socialtensor.io/,AI,BITTENSOR,,,SocialTensor is a Bittensor subnetwork for running image and text generation models.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/socialtensor,,,,,,,TRUE,FALSE
Society AI,uzdo0z,https://www.societyai.com/,AI,,,,"Society AI is building a decentralized AI infrastructure that empowers developers and communities to create, deploy, and monetize AI applications through a tokenized, community-driven platform.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/wearesocietyai,,,,,,,true,false
Sogni.ai,f1ms9h,https://www.sogni.ai/,AI,BASE,SOGNI,,"Sogni AI is an AI image generation app that allows users to create art privately with open-source models, powered by Sogni Swarm, a DePIN that leverages the compute power of autonomous devices for fast and scalable AI processing.",Inferencing,0x395aB080688983b5a2F203B49cE44D66b30360AB,,https://x.com/getsogni,,,,,,,TRUE,FALSE
Soileum,e02zzm,https://www.soileum.com/,HUMAN_CAPITAL,,SOIL,,Soileum Network is a decentralized identity network designed to provide secure and decentralized identity management services to individuals and organizations.,Identity,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/soileum_network,,,,,,,TRUE,FALSE
Solak,6om468,https://solak.app/,AI,,SGPT,,"Solak is an AI-powered browser and a DeFi platform, allowing users to earn SGPT tokens through activities like internet browsing, engaging in DeFi, participating in the NFT platform, and potentially through a referral program.",,ZZ,,https://twitter.com/solakgpt,,,,,,,true,false
Solana Mobile,dco6fo,https://solanamobile.com/,WIRELESS,SOLANA,,,"Solana Mobile, a subsidiary of Solana Labs, develops Saga, an Android mobile phone tightly integrated with the Solana blockchain, enabling easy and secure transactions in web3 and management of digital assets like tokens and NFTs.",Mobile,ZZ,,https://twitter.com/solanamobile,988649555283308564,,,,,,true,false
Solana Watch,5yy1tq,https://www.solanaaiwatch.com/,SENSORS,SOLANA,WATCH,,"Solana Watch is an AI-powered, decentralized smartwatch that integrates the Solana blockchain for seamless crypto trading, dApps, and DeFi access.",Health,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/solanaaiwatch,,,,,,,true,false
Solana,1rk8w5,https://solana.com/,NOT_DEPIN,,,,"Solana supports experiences for power users, new consumers, and everyone in between.",,EV3 Sal,,,,,,,,,true,false
SolanaSIM,dtba6m,https://www.solanasim.com/,WIRELESS,SOLANA,,,Solana SIM is an innovative mobile network solution that combines mobile and Web3 technology.,,EV3 Sal,,https://twitter.com/Solanasim,,,,,,,true,false
SolanaStock,kdsx3u,,AI,,,,SolanaStock: Decentralized stock photo marketplace monetizes photos with AI.,,,,https://solana.com/twitter,428295358100013066,https://solana.com/telegram,https://solana.com/news,https://solana.com/github,http://www.linkedin.com/company/solanalabs,,true,false
SOLAR dVPN,1j1plk,https://dvpn.solar/,WIRELESS,,,,"SOLAR dVPN is a decentralized blockchain-based VPN service that provides secure, censorship-resistant browsing.",VPN,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/solardvpn,,,,,,,true,false
Solarchain,r7xs4b,https://solarchainlabs.org/,ENERGY,,,,"Solarchain is a decentralized energy platform utilizing blockchain to provide renewable energy solutions through rent-to-own programs and token rewards for energy generation, helping communities in Africa achieve energy independence.",,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/solarchainlabs,,,,,,,TRUE,FALSE
Solareum,l0260h,https://www.solareuml1.com/,ENERGY,ETHEREUM,SRM,solareum-d260e488-50a0-4048-ace4-1b82f9822903,Solareum is a renewable energy generation-based blockchain where producers and consumers can trade renewable energy peer-to-peer on a decentralized renewable energy marketplace.,,ZZ,,,,,,,,,true,false
Solarpunk,3zux4w,https://solarpunkdao.earth/,RWA,POLYGON,EARTH,,Solarpunk DAO is creating a digital currency backed by climate assets and ecosystem services to fund zero-emission projects and create value through ecosystem services and a network of participating merchants.,,0x9d73ca4689788f6d4be686e9150d6efe75ffd751,,https://x.com/solarpunkdao,,,,,,,TRUE,FALSE
SolarShare,vk3z1a,https://www.solarshare.io/,RWA,,SOLAR,,"SolarShare leverages blockchain technology to tokenize solar farms, allowing individuals to own and trade fractionalized solar panels while earning revenue from real-world energy production.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd751,,https://x.com/solarsharenft,,,,,,,TRUE,FALSE
SolarWise,ka5wk6,https://www.solarwise.vet/,RWA,VECHAIN,,,"SolarWise tokenizes solar farms through Solar NFTs, enabling fractional ownership and global access to renewable energy investments while promoting financial inclusion and environmental sustainability.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd752,,https://x.com/TheSolarWise,,,,,,,TRUE,FALSE
Solchan,x2oelc,https://solchan.org/,NOT_DEPIN,,,,Solchan is a 4chan-inspired free speech board on Solana.,Social,EV3 Sal,,https://x.com/solchan_org,,,,,,,true,false
SolChat,qetxlj,https://www.solchat.io/,NOT_DEPIN,SOLANA,CHAT,solchat,"Solchat is a communication protocol on the Solana blockchain, offering text, voice, and video calls similar to Web2, but in a Web3 environment.",,EV3 Sal,,https://twitter.com/SolChatCoin,,,,,,,true,false
Solcial,x3xjx4,https://solcial.io/,NOT_DEPIN,SOLANA,SLCL,solcial,"Solcial is a permissionless social network allowing users to be rewarded fairly for their work, and promoting freedom of speech by allowing users to interact without fearing ban or censorship.",Social,ZZ,,,1140549119258140722,,,,,,true,false
SolCycle,jypbh1,,SENSORS,,,,"SolCycle Rewards incentivizes recycling, promoting sustainability and environmental conservation.",Environmental,,,https://twitter.com/soulcycle,,,,,https://linkedin.com/company/soulcycle,,true,false
Soledge,up2lee,https://soledge.org/,COMPUTE,SOLANA,EDGE,,"Edge is a platform for individuals to rent out edge computing power to businesses, earning tokens.",,ZZ,,,,,,,,,true,false
Solidus AI,hb9ly2,https://www.aitech.io/,COMPUTE,BINANCE,AITECH,solidus-ai-tech,Solidus Ai Tech is building an eco-friendly High Performance Computing (HPC) Data Centre and IaaS platform and are launching the $AITECH token.,,,,https://twitter.com/AITECHio,938725761865625600,https://t.me/solidusaichat,,,https://www.linkedin.com/company/solidus-ai-tech-ltd/,,true,false
Solity,jkk0cp,,BLOCKCHAIN_INFRA,,,,"Solity pioneers a data-driven approach to risk management in the decentralized finance space, recognizing the distinct challenges of DeFi's composability and offering a tailored solution set for intelligent risk tracking and management.",,ZZ,,,,,,,,,true,false
SolLinked,mdhiew,https://sollinked.com/,NOT_DEPIN,,,,,FHE,,,https://twitter.com/Sollinked_com,,,,,,,true,false
Sollong,m6er72,https://sollong.xyz/,WIRELESS,SOLANA,SOLG,,"Sollong is a DePIN that allows users to sell unused network resources to companies, laboratories, and institutions, enabling them to access diverse IP addresses for market research, network crawling, AI training, and other tasks.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/sollongworld,,,https://medium.com/@sollong,,,,true,false
SolNav,qlhykl,https://www.solnav.ai/,PENDING,,,,,,ZZ,,https://x.com/SolNavAI,,,,,,,true,false
SolRazr,0fi9q0,https://razrfi.ai/,NOT_DEPIN,SOLANA,SOLR,solrazr,SolRazr is a decentralized developer ecosystem for Solana.,,ZZ,,https://mobile.twitter.com/CSolrazr,886683619958079538,https://t.me/s/solrazr_app,https://medium.com/@RazrFi/solrazr-2021-in-review-5ba669ed2efc,https://github.com/solrazr-app,https://sg.linkedin.com/company/omnistart-network,,true,false
SolSplits,nyewp0,https://solsplits.xyz/,NOT_DEPIN,,,,SolSplits is a composable standard for splitting on-chain income on Solana.,,,,https://twitter.com/solsplits,934693914399633418,,https://medium.com/@solsplits,https://github.com/solsplits,https://www.linkedin.com/company/solsplits/,,true,false
Soltera,4f7t8d,https://soltera.ph/,ENERGY,,,,"Soltera provides Advanced Metering Infrastructure solutions, including hardware (smart meters/sensors) and software (energy management system), for distribution utilities in emerging markets.",,ZZ,,https://twitter.com/solteraenergy,,,,,,,true,false
SoluAI,ob1kw6,https://soluai.net/,PENDING,,,,,,W. L.,,https://x.com/SoluAI_net,,,,,,,true,false
SolveCare,hdih1r,https://solve.care/,NOT_DEPIN,ETHEREUM,SOLVE,solve-care,Solve.Care is a decentralized and distributed platform for the administration of healthcare and benefits programs.,,ZZ,,,1057977152764641320,,,,,,true,false
Solvpn,x4opgn,https://solvpn.xyz/,WIRELESS,SOLANA,Solvpn,,Solvpn is a free decentralized VPN for the Solana community.,VPN,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/VPNonSolana,,,,,,,true,false
Somos,ads6qy,https://www.somosinternet.co/,WIRELESS,,,,Somos Internet provides prepaid high-speed internet services in Latin America.,,,,,,,,,,,true,false
Sona,xbya3q,https://sonu.stream/,NOT_DEPIN,,,,"Co-founded by DJ and producer TOKiMONSTA, Sona is a whole new way to enjoy music and support your favorite artists.",,EV3 Sal,,https://twitter.com/sonu_stream,,,,,,,true,false
Sonaric,4n8ub7,https://sonaric.xyz/,COMPUTE,,,,Sonaric Network is a fully autonomous compute network that optimizes the allocation and management of all compute across all chains to perfectly reward all contributors.,,EV3 Sal,,https://x.com/sonaricnetwork,,,,,,,true,false
SONM,qjzgqy,https://sonm.com/,COMPUTE,ETHEREUM,SNM,sonm,SONM is a decentralized worldwide fog supercomputer for general purpose computing from site hosting to scientific calculations.,,ZZ,,https://twitter.com/sonmdevelopment,1140549119258140722,https://t.me/sonm_eng,https://sonm.medium.com/,https://github.com/sonm-io,https://www.linkedin.com/company/sonm/about/,,false,false
Sonr,admvie,https://sonr.io/home,NOT_DEPIN,,,,Sonr is an L1 blockchain for self-custody decentralized identity.,L1/L2,ZZ,,https://twitter.com/sonr_io,843061375160156170,,,https://sonr.io/github,http://www.linkedin.com/company/sonr-io,,true,false
SophiaVerse,7bo0uv,https://www.sophiaverse.ai/,AI,ETHEREUM,SOPH,sophiaverse,"SophiaVerse is a gamified infrastructure built in the pursuit of Sophia's development via gameplay, through AI programming and the use of the SOPH utility token.",,,,https://twitter.com/sophiaverse_ai,,https://t.me/sophia_verse,,,https://www.linkedin.com/company/sophiaverse/,,true,false
Sora,6fu2a0,https://coinsora-ai.com/,AI,ETHEREUM,SORA,sora-ai,Sora is the developer and supporter of the OpenAI text-to-video tech with a pioneering token project at the intersection of blockchain technology and AI.,,ZZ,,https://twitter.com/SoraAIToken,,,,,,,true,false
Sorella Labs,3mqf4i,,PENDING,,,,,,ZZ,,https://twitter.com/sorellalabs,,,,https://github.com/SorellaLabs,,,true,false
SoulAI,8qfgmf,https://soulai.io/,PENDING,,,,,,ZZ,,https://x.com/soulailabs,,,https://medium.com/@SoulAiOfficial,,,,true,false
SoulPrime,sfo58s,https://www.soulprime.io/,NOT_DEPIN,ETHEREUM,PRT,,"SoulPrime is a decentralized Web3 social network focused on privacy, user control, blockchain security, integration of a Web2 audience, NFT marketplace, AI personalization, and multiple user monetization options.",,,,https://twitter.com/SoulPrime_io,,,,,https://www.linkedin.com/company/soulprimeio/,,true,false
Souq,hprfe1,https://www.souq.finance/,NOT_DEPIN,,,,Souq is a blockchain company developing an NFT AMM aiming to revolutionize the trading dynamics of NFTs.,,,,,,,,,,,false,false
Source,0c3hjd,https://source.network/,PENDING,,,,,,,,https://x.com/sourcenetwrk,,,,,,,true,false
Space & Time,heeyow,https://www.spaceandtime.io/,BLOCKCHAIN_INFRA,,,,"Space & Time is a decentralized replacement for blockchain indexing, database, data warehouse, and API servers.",,,,https://twitter.com/SpaceTimeMedia/,953025874154893342,https://t.me/spaceandtimedb,https://medium.com/@SpaceandTimeDB,https://github.com/spaceandtimelabs,https://www.linkedin.com/company/space-and-time-media/,,true,false
Space ID,vb3z9t,http://www.space.id/,BLOCKCHAIN_INFRA,ETHEREUM,ID,space-id,SPACE ID (SID) is a decentralized universal name service network that runs on the blockchain and is a Web3 domain and identity management platform.,,ZZ,,https://twitter.com/SpaceIDProtocol,,,https://medium.com/@SpaceID,,https://www.linkedin.com/company/spaceidprotocol/about/,,true,false
SpaceChain,f6sjc4,https://www.spacechain.com/,SENSORS,ETHEREUM,SPC,spacechain-erc-20,"SpaceChain is a community-based space platform that combines space and blockchain technologies to build an open-source blockchain-based satellite network, allowing users to develop and run applications in space.",Satellites,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/SpaceChain,,,,,,,true,false
Spacecoin,1q8u2r,https://spacecoin.org/,WIRELESS,,,,"Spacecoin is a DePIN powered by blockchain-enabled LEO nanosatellite constellations, positioned to become the standard open protocol for trustless internet connectivity on a global scale.",Satellites,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/_spacecoin,,,,,,,TRUE,FALSE
Spacemesh,ojaphf,https://spacemesh.io/,NOT_DEPIN,,,,"Decentralized, energy-efficient blockmesh with unique consensus.",,,,https://twitter.com/teamspacemesh,623195163510046732,,https://medium.com/spacemesh,https://github.com/spacemeshos,http://www.linkedin.com/company/spacemesh,,true,false
Sparkle,h1flgz,https://www.sparkle.fun/home,AI,,WORK,,"Sparkle is an AI-powered decentralized platform that combines interactive entertainment with a comprehensive infrastructure for AI application development, enabling users to create, deploy, and innovate with advanced AI technologies.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/sparklefun2023,,,,,,,TRUE,FALSE
Spathion,3iqnal,https://spathion.com/,BLOCKCHAIN_INFRA,,,,"Spathion is building a decentralized internet of economic data that connects consumers, businesses, financial institutions, and regulators into a unified DePIN network ensuring seamless and secure data exchange across all parties.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/spathionlabs,,,,,,,true,false
Spectra Cities,3i14ar,https://www.spectracities.com/,NOT_DEPIN,,,,"Spectra is a cross-platform, open-source community where physical placemakers and virtual worldbuilders come together to create sustainable, human-centered, and technologically progressive urbanization.",,EV3 Sal,,https://twitter.com/spectracities,,,,,,,true,false
SpectralFi,rnxact,https://www.spectrallabs.xyz/,AI,,,,Machine Intelligence Network to consume zkML-verified inferences directly through smart contracts,,EV3 Sal,,https://twitter.com/Spectral_Labs,742257645989265432,,,,,,true,false
Spending Power,aup8gu,https://www.spendingpower.io/,HUMAN_CAPITAL,,POWER,,"Spending Power is a NexCommerce platform using RWAs, DePIN, and AI to connect traditional retail with Web 3.0, offering a dynamic platform that empowers individuals to shop smarter.",Loyalty,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/Spending_Power,,,,,,,TRUE,FALSE
Spexi,xjyor4,https://www.spexi.com//,SENSORS,,,,Spexi is a decentralized network of drone operators using the first fly-to-earn drone imagery platform.,Drones,W. L.,,https://twitter.com/spexinetwork,1005154271634931844,,,,https://www.linkedin.com/company/spexigon,,true,false
Sphere,76qa11,https://spherepay.co/,BLOCKCHAIN_INFRA,,,,"Sphere is building a permissionless payment infrastructure for web3 on Solana. ",,ZZ,,,,,,,,,true,false
SphereOne,q8dy9s,https://sphereone.xyz/,AI,,,,"SphereOne provides a decentralized AI infrastructure, enabling the creation and operation of autonomous AI agents and services across multiple blockchains.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/sphereone_,,,,,,,true,false
Spheron,bpnvkv,https://spheron.network/,COMPUTE,ARBITRUM,SPHN,spheron-network,Spheron Network is a decentralized GPU marketplace for AI.,,ZZ,,https://twitter.com/SpheronFDN,745315423783878757,,https://blog.spheron.network,https://github.com/spheronFdn,https://www.linkedin.com/company/spheron/,,true,false
Spiderweb,s768ye,https://www.spiderweb.club/en_US,BLOCKCHAIN_INFRA,,,,"Spiderweb is a patented blockchain-based decentralized underlying server infrastructure with Spiderweb Distribution Node, offering decentralized cloud services (DIDC) for enhanced cybersecurity, lower traffic costs, and easier access to Web3.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/cryptospidernft,,,,,,,true,false
SPIN.FASHION,34nqhs,https://spin.fashion/,RWA,,,,"SPIN.FASHION is an RWA-Based DePIN that merges connected luxury, art, and culture to empower brands and creators with human-centric, sustainable, and community-driven businesses through connected products and immersive experiences.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/spinbylablaco,,,,,https://www.linkedin.com/company/spin-by-lablaco/,,true,false
Splits,4p461t,https://splits.org/,NOT_DEPIN,,,,"0xSplits is a set of composable, open-source, and audited smart contracts that make it easy to split onchain payments.",DeFi,,,https://twitter.com/0xsplits,,,https://splits.org/blog/,https://github.com/0xSplits,https://www.linkedin.com/company/0xsplits/about/,,true,false
Sportstensor,fidydm,https://www.sportstensor.com/,AI,BITTENSOR,,,"Sportstensor harnesses cutting-edge decentralized intelligence to develop highly accurate predictive algorithms and revolutionize sports analytics. ",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/sportstensor,,,,,,,true,true
Spreads,s74bpn,https://spreadnetworks.io/,WIRELESS,,,,Spreads: Empowering communities for digital transformation.,,,,https://twitter.com/Mint_HNT,,,,,https://www.linkedin.com/company/minthnt,,true,false
SQE.io,ipaf0n,https://www.sqe.io/,BLOCKCHAIN_INFRA,,,,"SQE.io is a quantum secure, decentralized blockchain-based platform that uses Simulated Quantum Entanglement technology.",L1/L2,ZZ,,https://twitter.com/TheSQE,,,,,http://www.linkedin.com/company/sqe-io,,true,false
Srcful,k7ie81,https://srcful.io/,ENERGY,SOLANA,,,"Srcful is a Blockchain-powered Virtual Power Plant in the Helium ecosystem. ",VPPs,ZZ,,https://x.com/srcful/,1050323986271182849,,https://blog.srcful.io/,https://github.com/srcfl,https://linkedin.com/company/srcful,,true,false
SRP Coin,ckxp31,https://srptoken.io/,PENDING,,,,,,W. L.,,https://x.com/srpcoin,,,,,,,true,false
StackOS,kd6pyc,https://www.stackos.io/,COMPUTE,ETHEREUM,SFX,stackos,StackOS is a cross-chain open infrastructure protocol enabling decentralized cloud services.,,ZZ,,https://twitter.com/DeployOnStackOS,816238453519417346,https://t.me/DeployOnStackOS,https://medium.com/stackos,https://github.com/stackosofficial,https://linkedin.com/company/stackos,,true,false
Stackr,l3144f,https://www.stackrlabs.xyz/,NOT_DEPIN,,,,Stackr SDK is a framework to build app-specific micro-rollups in web2 programming languages.,Software,,,https://twitter.com/0xStackr,1018902999982161990,,,,https://www.linkedin.com/company/stackr-labs/about/,,true,false
Stacks,3ey5ys,https://stacks.org/,NOT_DEPIN,NATIVE,STX,stacks,Stacks is a Bitcoin L2 enabling smart contracts and apps with Bitcoin as a secure base layer.,,,,https://twitter.com/StacksOrg,621759717756370964,https://t.me/StacksChat,https://www.stacks.co/blog,https://github.com/stacks-network,https://www.linkedin.com/company/stacks-stx/,,true,false
Staex,w8ux4q,https://staex.io/,BLOCKCHAIN_INFRA,,,,"Staex provides a first-of-its-kind fully decentralized IoT-DevOps platform as a service, capable of effortlessly handling complex networking and deployments using a proprietary P2P protocol inspired by modern blockchains.",,EV3 Sal,,https://twitter.com/Staex_io,,,,,,,true,false
STAGE,n2uzg0,https://www.stage.community/,NOT_DEPIN,,,,"Stage is a Web3 music-only platform that combines the narrative impetus of TV talent competitions with a gamified user experience, and a unique play-to-earn model to allow artists to easily monetize and quickly grow their fanbase.",,ZZ,,https://twitter.com/stage_community,,,,,,,true,false
Stamp,cc337l,https://www.stamp.network/,AI,,,,Stamp Network is an L2 blockchain focusing on supporting digital entities.,Agents,,,https://twitter.com/stampDOTnetwork,,,,,,,true,false
Starknet,hki5n0,https://www.starknet.io/,NOT_DEPIN,,STRK,,"Starknet is a Validity-Rollup (ZK-Rollup) Layer 2 network that operates on top of Ethereum, enabling dApps to massively scale without compromising on security.",,,,https://twitter.com/Starknet,,,,,,,true,false
StarLandAI,hih4xm,https://starland.ai/,AI,,,,"StarLandAI is an AI Model-as-a-Service (MaaS) DePIN network, capable of running large multimodal models using any DePIN computing devices.",,ZZ,,https://twitter.com/starlandai,,,,,,,true,false
StarNest,r6tihx,https://www.starnest.app/,NOT_DEPIN,,NEST,,"StarNest is a Web3 music platform leveraging blockchain, VR, AR, and AI technologies to create an open and transparent entertainment ecosystem with opportunities for users to earn income through land NFTs.",,ZZ,,https://twitter.com/StarNestweb3,,,,,,,true,false
Starnet,o7zfx9,https://starcoin.one/,AI,SOLANA,AIBANG,starnet,"Starnet is a decentralized platform leveraging blockchain technology to share and optimize idle cell phone computational power, enabling users to efficiently and securely access and provide computing resources for AI training.",Mobile,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/starnet_aibang,,https://t.me/starnet_Information_Channel,,,,,true,false
Starpower,3gatyy,http://starpower.group/,ENERGY,,,,Starpower is an infrastructure company connecting distributed energy resources to decarbonize the energy sector.,,W. L.,,https://twitter.com/starpowerworld,,,,,https://www.linkedin.com/company/starpowerksa/about/,,true,false
stateless,92w9o1,https://www.stateless.solutions/,PENDING,,,,,,EV3 Sal,,https://x.com/statelessapi,,,https://medium.com/deep-state,https://github.com/stateless-solutions,,,true,false
Station,msq3dm,https://www.filstation.app/,NOT_DEPIN,,,,Station is an easy-to-use desktop app that connects users' computer’s idle resources to the Filecoin network and rewards them with FIL.,,ZZ,,,,,,,,,true,false
StationX,osv0he,https://www.stationx.network/,NOT_DEPIN,,,,StationX is a protocol for swiftly creating and overseeing DAOs in under a minute.,,,,https://twitter.com/stationxnetwork,945568396911738982,https://t.me/StationXnetwork,,,http://www.linkedin.com/company/stationxnetwork,,true,false
SteerFinance,nfdwqm,https://steer.finance/,COMPUTE,,,,SteerFinance is a developer of decentralized compute protocols.,,ZZ,,https://twitter.com/steerprotocol,826272379327741992,,,https://github.com/steerprotocol,https://www.linkedin.com/company/steer-protocol/,,true,false
Step,ho83ef,https://step.app/,SENSORS,BINANCE,FITFI,step-app,Step is a move-to-earn mobile app that lets users earn crypto for their fitness efforts.,,,,https://twitter.com/StepApp,959223427749801994,https://t.me/stepappchat,https://step.app/blog,https://github.com/step-app-fi,https://www.linkedin.com/company/step-app-fi/,,true,false
StepMint,f4mu3n,https://stepmint.io/,HUMAN_CAPITAL,BINANCE,MNT,,"Stepmint is a move-to-earn app that seamlessly rewards users with cryptocurrency for achieving their daily step goals, combining fitness with financial rewards.",Health,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/step_mint,,,,,,,TRUE,FALSE
StepN,9ptjw7,https://www.stepn.com/,SENSORS,ETHEREUM,GMT,stepn,"STEPN is a Web3 lifestyle app with inbuilt Game-Fi and Social-Fi elements that allow users to earn tokens for walking, jogging, or running.",,ZZ,,https://twitter.com/Stepnofficial,890163015561932840,https://t.me/STEPNofficial,https://stepnofficial.medium.com/,,https://www.linkedin.com/company/stepn-by-find-satoshi-lab/,,true,false
Storacha,p80e68,https://storacha.network/,COMPUTE,FILECOIN,,,"Storacha is a decentralized hot storage network for data at scale, offering user-owned data with decentralized permissioning and leveraging Filecoin and IPFS.",Storage,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/storachanetwork,,,,,,,TRUE,FALSE
StorageChain,p159ts,https://storagechain.io/,COMPUTE,ETHEREUM,WSTOR,storagechain,"StorageChain is a decentralized, cloud storage and file-sharing platform, that uses a network of “storage nodes” to store data in a fully distributed manner.",Storage,W. L.,,https://twitter.com/StorageChain,1068622468417331342,,,,,,true,false
Storchain,onl2ed,,COMPUTE,,,,"StorChain is a next-generation Distributed Storage Network using Storchain's decentralized ledger to ensure secure, transparent, and tamper-proof data storage, retrieval, and transactions.",Storage,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/Storchain_io,,,,,,,true,false
Store,nb0mpn,https://storecloud.org/,COMPUTE,,,,STORE is a new layer zero staking protocol at the intersection of cloud computing and WEB3.,Storage,,,,,,,,,,true,false
Storj,arwynb,https://www.storj.io/,COMPUTE,ETHEREUM,STORJ,storj,Storj is a decentralized cloud storage platform using nodes to host user data in an open-source environment.,Storage,,,https://twitter.com/storj,793919814623166525,,https://medium.com/@storjproject,https://github.com/Storj/,https://www.linkedin.com/company/storj/about/,,true,false
StorX,t69457,https://storx.tech/,COMPUTE,XDC,SRX,storx,StorX is a decentralized cloud storage network enabling permissionless selling/leasing of storage capacity.,Storage,ZZ,,https://twitter.com/StorXNetwork,805710560083181578,https://t.me/StorXNetwork,https://medium.com/storx-network,https://github.com/StorXNetwork,https://www.linkedin.com/company/storxnetwork,,true,false
Story Protocol,5maai7,https://www.storyprotocol.xyz/,INTELLECTUAL_PROPERTY,,,,,L1/L2,EV3 Sal,,https://x.com/StoryProtocol,1133510822975512708,,https://www.storyprotocol.xyz/media,https://github.com/storyprotocol,,,true,false
Stratos,4jq13p,https://www.thestratos.org/,BLOCKCHAIN_INFRA,ETHEREUM,STOS,stratos,"Stratos is a decentralized infrastructure that provides scalable, reliable, self-balanced storage, AI computation, and database networks and offers a solid foundation for data processing.",Data,ZZ,,https://twitter.com/Stratos_Network,799573145019219968,https://t.me/Stratos_announcement,https://stratos-network.medium.com/,https://github.com/stratosnet,https://www.linkedin.com/company/stratos-network,,true,false
Streamlivr,32bg4t,https://streamlivr.com/,INTELLECTUAL_PROPERTY,OPTIMISM,LIVR,,"Streamlivr is a livestreaming and event ticketing platform utilizing web3, crypto and NFTs to reward and connect creators and fans.",,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/Streamlivr_App,,,,,,,TRUE,FALSE
Streamr,o1pv7k,https://streamr.network/,BLOCKCHAIN_INFRA,ETHEREUM,DATA,streamr,"Streamr is a decentralised protocol providing data pipelines, network analytics, and instant messaging.",Data,W. L.,,https://twitter.com/streamr,801574432350928907,https://t.me/streamrdata,https://medium.com/streamrblog,https://github.com/streamr-dev,https://www.linkedin.com/company/streamr-network/,,true,false
Strobe,i8q7gz,https://strobe.org/,BLOCKCHAIN_INFRA,,,,"Strobe is building an open protocol for trust-minimized markets to allow users to build, exchange, and interact without permission or trust.",,EV3 Sal,,https://twitter.com/strobelabs,,,,,,,true,false
Studihub,lkrcvr,https://studihub.io/,AI,SOLANA,,,"Studihub is an AI-powered decentralized education platform on Solana, providing personalized, interactive, and secure learning experiences through advanced AI technology.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/Studihubedu,,,,,,,true,false
Suanbot,a4zdzs,,WIRELESS,,,,Suanbot is a Telegram bot-based eSIM and VPN services provider.,,,,,,t.me/Suanbot,,,,,true,false
Subconscious,5xypv6,https://subconscious.network/,COMPUTE,,,,Noosphere is a worldwide networked notes graph on IPFS.,,ZZ,,,1003419732516552724,,,https://github.com/subconsciousnetwork,https://www.linkedin.com/company/subconscious-network/,,true,false
SubQuery,kzaj07,https://www.subquery.network/,NOT_DEPIN,NATIVE,SQL,subquery-network,SubQuery is a decentralized data aggregation and querying layer for Layer-1 blockchains and dApps.,L1/L2,,,https://twitter.com/SubQueryNetwork,796198414798028831,https://t.me/subquerynetwork,https://medium.com/@subquery,https://github.com/OnFinality-io/subql,http://www.linkedin.com/company/subquery,,true,false
Subsquid,cp4cw6,https://www.subsquid.io/,BLOCKCHAIN_INFRA,,,,Subsquid: Open-source framework to extract & present blockchain data as GraphQL APIs for Web3 builders.,,,,https://twitter.com/subsquid,857105545135390731,https://t.me/subsquid,https://subsquid.medium.com/,https://github.com/subsquid,https://ch.linkedin.com/company/subsquid,,true,false
Substratum,nlustu,https://substratum.net/,WIRELESS,ETHEREUM,SUB,substratum,Substratum is an open-source network that leverages the power of the individuals to build a decentralized web.,,ZZ,,https://twitter.com/substratumnet,,,,,,,true,false
Succinct,moum0g,https://succinct.xyz/,NOT_DEPIN,,,,"Succinct builds a zero-knowledge infrastructure where developers can discover, develop, and deploy ZKs.",ZK,ZZ,,https://twitter.com/succinctlabs,,,,,,,true,false
Sudoswap,ea506r,https://sudoswap.xyz/#/,NOT_DEPIN,ETHEREUM,SUDO,sudoswap,sudoSwap: A gas-efficient AMM protocol for NFT-to-token swaps with customizable bonding curves. Supports various tokens.,,,,https://twitter.com/sudoswap,958946969106133023,,https://blog.sudoswap.xyz/,https://github.com/sudoswap,,,true,false
Sui,jhet5u,https://sui.io/,NOT_DEPIN,NATIVE,SUI,sui,"Sui is a layer 1 blockchain that allows simple transactions to be finalized in real-time without sacrificing security. ",,ZZ,,,916379725201563759,,,,,,true,false
Sunscreen,uao82z,https://sunscreen.tech/,NOT_DEPIN,,,,Sunscreen is a compiler for fully homomorphic encryption and zero-knowledge proofs.,FHE,EV3 Sal,,,892102359130460160,,,,,,true,false
SUNX,6zogsh,https://sunx.online/,PENDING,,,,,,W. L.,,https://x.com/sunxonline,,,,,,,TRUE,FALSE
Super Protocol,1lodgy,https://superprotocol.com/,COMPUTE,,,,Super Protocol is a Web3 confidential computing protocol that combines blockchain with advanced confidential computing technologies to create a universal decentralized cloud computing platform.,Storage,ZZ,,,951018794590023681,,,,,,true,false
Superalgos,3sy850,https://superalgos.org/,NOT_DEPIN,NATIVE,,,"Superalgos: crypto trading platform for open competition, allows traders to earn through signal broadcasting.",,,,https://twitter.com/superalgos,778730632812691488,,https://medium.com/superalgos,https://github.com/Superalgos/Superalgos,https://mt.linkedin.com/company/superalgos,,true,false
Superchain,0k93rc,https://www.superchain.network/,NOT_DEPIN,,,,"Developer of Open Index Protocol, an efficient decentralized indexer for on-chain data.",,,,https://twitter.com/OpenSuperchain,,,,https://github.com/SuperChainNetwork,http://www.linkedin.com/company/superchain-network,,true,false
Superchargd,3zlpbh,https://www.superchargd.com/,ENERGY,,,,"Superchargd is a pioneering app that connects EV drivers with a network of both public and private charging stations, enabling them to find, review, and book chargers easily. Superchargd allows charger owners to list their private chargers and earn.",,EV3 Sal,,https://twitter.com/Mapzlive,,,,,,,true,false
Superlocal,3czn02,https://www.superlocal.com/,SENSORS,,,,Superlocal is a social network and game that rewards users with points for checking in at various places.,Positioning,ZZ,,https://twitter.com/joinsuperlocal,820756104169652254,,https://medium.com/@superlocalapp,,https://www.linkedin.com/company/superlocalapp/,,true,false
Supermeta,41xvbt,https://www.supermetaplus.com/,BLOCKCHAIN_INFRA,,,,We create phenomenal NFT experiences with exceptional creators and brands.,Gaming,,,https://twitter.com/supermetafi,,https://t.me/supermetafi,,,,,true,false
SuperNoderz,nyfifh,https://www.supernoderz.com/,COMPUTE,,,,"SUPERNODERZ simplifies node deployment into a one-click process, enabling anyone to participate in blockchain networks easily.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/supernoderz,,,,,,,true,true
Superstake,1dp03n,https://superstake.club/,AI,BINANCE,SUPERSTAKE,superstake,Superstake is a staking platform and NFT marketplace for crypto enthusiasts in the SUPERPANCAKE ecosystem.,,,,,,,,,,,false,false
SuperWalk,s1oyd4,https://superwalk.io/,SENSORS,ARBITRUM,GRND,superwalk-grnd,SuperWalk is a Move-To-Earn dApp that rewards users with tokens for walking or running.,Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/SuperWalk_,,,,,,,true,true
Supra,2d4mvd,https://supra.com/,BLOCKCHAIN_INFRA,NATIVE,SUPRA,supra,"Supra is a powerful Layer-1 blockchain ecosystem that provides advanced cross-chain interoperability and decentralization through its suite of groundbreaking protocols, including decentralized oracles, bridges, and verifiable random functions.",L1/L2,ZZ,,https://twitter.com/SUPRA_Labs,850682587273625661,https://t.me/SupraOracles,https://medium.com/@SupraOracles,,https://www.linkedin.com/company/supraoracles/,,true,false
Suptho,rku44v,https://www.suptho.co/,WIRELESS,,,,Suptho: Geo-based social app merging digital experiences with in-person events.,,,,https://twitter.com/SupthoApp,837626991737307176,,https://medium.com/introducing-suptho,,https://www.linkedin.com/company/suptho/,,true,false
Surge,wmr4sm,https://getsurge.io/,COMPUTE,,,,Surge is a decentralized p2p filesharing app that ensures 100% anonymous file transfers through blockchain technology.,,,,https://twitter.com/SeattleSurge,443413382737952778,,,https://github.com/surge-sh,https://www.linkedin.com/company/surge/,,true,false
Swan Chain,v3ycrj,https://swanchain.io/,AI,,,,"Swan Chain (formerly FilSwan) is a full toolset AI blockchain infrastructure providing comprehensive solutions for storage, computing, bandwidth, and payments, accelerating AI adoption and fostering a decentralized AI computing market.",,,,https://twitter.com/swan_chain,867879887871672331,https://t.me/swan_chain/1,https://medium.com/@swanchain,https://github.com/filswan,https://www.linkedin.com/company/swancloud,,true,false
Swarm Logistics,6buao5,https://swarmlogistics.de/,MOBILITY,,,,"Swarm Logistics is a  Deep-Tech software technology company that develops a decentralized fleet control system powered by economic AI agents, enabling trucks to self-orchestrate and coordinate like swarms.",Logistics,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/SwarmLogistics,,,,,,,TRUE,FALSE
Swarm Markets,yb7eio,https://swarm.com/,RWA,ETHEREUM,SMT,swarm-markets,"Swarm provides a compliant, permissioned decentralized financial infrastructure where both institutions and retail investors can invest, stake and trade digitized traditional financial products alongside crypto assets in one unified environment.",,ZZ,,https://twitter.com/SwarmMarkets,,,,,,,true,false
Swarm,8s783v,https://www.ethswarm.org/,COMPUTE,ETHEREUM,BZZ,swarm-bzz,Swarm is a decentralised data storage and distribution technology.,Storage,ZZ,,https://twitter.com/ethswarm,799027393297514537,,https://blog.ethswarm.org/,https://github.com/ethersphere,http://www.linkedin.com/company/ethereum-swarm,,true,false
swarmzero,smzv5n,https://swarmzero.ai/,AI,,,,"SwarmZero.ai is a decentralized platform that empowers AI researchers, machine learning engineers, and agent builders by providing a transparent, community-driven ecosystem for AI development and monetization.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/swarmzeroai,,,,,,,true,false
Swash,8mycy6,https://swashapp.io/,NOT_DEPIN,ETHEREUM,SWASH,swash,"Swash enables internet users, developers, and businesses to cultivate new realities of data ownership and value creation through new incentivisation streams.",,,,https://twitter.com/swashapp,977736974733557791,,https://medium.com/swashapp,,https://www.linkedin.com/company/swashapp/,,true,false
Swaye,58duis,,NOT_DEPIN,,,,,Prediction Market,EV3 Sal,,https://x.com/swaye_co,,,,,,,true,false
Sweat Economy,c0amvh,https://sweateconomy.com/,SENSORS,ETHEREUM,SWEAT,sweat-economy,"Sweat Economy is a blockchain-based movement-to-earn system that offers a novel solution by incentivizing physical activity with its cryptocurrency, $SWEAT,",,,,https://twitter.com/sweatcoin,945374789026070618,,,,,,true,false
Sweetgum Labs,unzv1g,https://www.sweetgum.xyz/,ENERGY,,,,"Sweetgum Labs is developing an interoperable identity layer through hyper tokenization for environmentally leading organizations to understand, record, and exchange environmental impact and carbon footprint.",,0x911445B1d3eB2af49d08c67ca6E7dc1c464bE5F5,,,,,https://medium.com/@sweetgumlabs,,,,true,false
SweetyAI,hqx94b,https://sweety.ai/,AI,,,,SweetyAI: Decentralized dating game dApp with AI-driven virtual girlfriends (NFTs) on Solana.,,,,https://twitter.com/SweetHentaiAI,,,,,,,true,false
SWGT,t6pyc1,https://swg.io/,HUMAN_CAPITAL,ETHEREUM,SWGT,smartworld-global-token,"Smart World Global Token (SWGT) by SWG Global is a utility token that serves as a personal key to a blockchain-based ecosystem, supporting blockchain solutions for transportation and logistics, and a zero-commission decentralized freelance marketplace.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/SWGToken,,,,,,,true,false
Switch Electric,nm1uyh,https://www.whynotswitch.com/,SENSORS,IOTEX,,,Switch Electric Switch is a stealth project built on IoTeX.,,,,https://twitter.com/whyNotSwitch,,,,https://github.com/WhyNotSwitch,https://www.linkedin.com/company/switchelectric#,,true,false
Switchboard,iik6nb,https://switchboard.xyz/,BLOCKCHAIN_INFRA,,,,Switchboard is a permissionless Oracle network that allows developers to seamlessly connect dApps to real-world data.,Oracle,ZZ,,https://twitter.com/switchboardxyz,841525135311634443,https://t.me/switchboardxyz,https://switchboardxyz.medium.com/,https://github.com/switchboard-xyz,https://www.linkedin.com/company/switchboardxyz/,,true,false
SWOT,pvl1bk,https://swotai.org/,AI,ETHEREUM,SWOT,,"SWOT AI is a strategic analysis platform that leverages advanced AI to provide customized, data-driven insights and guidance for Web3 projects.",,ZZ,,,,,,,,,true,false
SX,6l05cw,https://www.sx.technology/,NOT_DEPIN,ETHEREUM,SX,sx-network,SX Bet is a peer-to-peer web3 betting exchange that allows users to both offer and take bets. This peer-to-peer model of betting leads to better odds and removes the ability of owners to exploit the users for profit.,,ZZ,,,541749812773519455,,,,,,true,false
Syd Intelligence,hf6l6j,https://sydintel.com/,HUMAN_CAPITAL,,,,"Syd Intelligence is a transparency engine built on Oz Protocol that uses crowd-sourced intelligence to help users and developers identify and avoid malicious actors, scams, and suspicious activity across the web.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/sydintel,,,,,,,TRUE,TRUE
SyFu,dor8xp,https://syfu.io/,HUMAN_CAPITAL,,,,"SyFu is a Web3 wallet with GameFi features that converts payment data into digital assets, offering comprehensive services from digital asset ownership and management to enhancing the consumer experience.",DeFi,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/syfuofficial,,,,,,,true,false
Sylo,8saiar,https://www.sylo.io/,COMPUTE,ETHEREUM,SYLO,sylo,"Sylo is a decentralized node network, protocol, and communications platform that offers a fully decentralized and secure messaging app, a confidential file-sharing and decentralized storage solution, and a Connected Applications Network.",,,,https://twitter.com/sylo,,https://t.me/sylo_io,https://medium.com/sylo-io,,,,true,false
Symres,xtw0p4,https://www.symres.ai,PENDING,,,,,,EV3 Sal,,https://x.com/symres_ai,,,,,,,TRUE,FALSE
SYNAPSEC,ua2pzu,https://www.synapsec.ai/,AI,BITTENSOR,,,"SYNAPSEC is a next-generation AI security platform that helps developers detect malicious intent within LLM-based applications such as prompt injections, sensitive information disclosures, and model denial of service. Built on Bittensor.",,EV3 Sal,,https://twitter.com/SYNAPSEC_AI,,,,,,,true,false
Synapx,ab3734,https://synapx.cc,SENSORS,,,,"Synapx is a software DePIN focused on sharing health data from wearable devices to connect data providers and acquirers, enabling seamless access and utilization of physio-data for innovation and collaboration.",Health,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,,,,,,,,true,false
SyncAI,pgwa6n,https://www.syncai.network/,BLOCKCHAIN_INFRA,CARDANO,SYNC,,"SyncAI is a DePIN communications network powered by AI on Cardano enabling seamless interactions between users, dapps, and blockchains.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/syncai_network,,,,,,,true,false
Synesis One,mhf5jn,https://www.synesis.one/,AI,SOLANA,SNS,synesis-one,Synesis One is a data crowdsourcing platform where anyone can earn $SNS by completing micro-tasks that train AI.,,,,https://twitter.com/synesis_one,914802829904982047,https://t.me/Synesis_One,https://medium.com/@synesisone,,http://www.linkedin.com/company/synesisone,,true,false
Synk,vtgf9j,https://synk.ws/#,PENDING,,,,,,ZZ,,https://x.com/Synk_ws,,,,,,,TRUE,FALSE
SynonAI,s6qqbx,https://www.synonai.net/,AI,,,,"SynonAI is a blockchain Layer 1 for AI that leverages GPU power to enable decentralized computing and advanced AI model training, ML, and LLM.",,ZZ,,https://twitter.com/SynonAI,,,,,,,true,false
Synternet,m9yv19,https://www.synternet.com/,NOT_DEPIN,ETHEREUM,NOIA,synternet,"Synternet is a blockchain that powers modular, interoperable data infrastructure for dApps across all major chains.",Bridges,ZZ,,https://twitter.com/synternet_com,503896258881126401,https://t.me/Synternet,,https://github.com/Synternet,https://www.linkedin.com/company/synternet/,,true,false
SynthNet,qviaat,https://www.synthnet.tech/,AI,NATIVE,SYNTH,,"SynthNet is a decentralized AI computing platform that allows users to lend their unused GPU and CPU resources for AI development and allows developers to upload, share, and monetize their AI models and datasets.",GPUs,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/SynthNet_AI,,,,,,,true,false
SYNX,iyyp59,https://alpha.synx.xyz/,COMPUTE,,,,SYNX is a safe personal storage platform that enables users to turn data into cash.,Storage,W. L.,,https://twitter.com/synx_xyz,,,,,,,true,false
SysCloud,8twyya,https://www.syscloudai.xyz/,COMPUTE,ETHEREUM,SYSAI,,"Syscloud AI is a decentralized cloud platform that leverages spare computing power from individuals and organizations to democratize AI and ML development, training, and deployment.",GPUs,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/SysCloudAI,,,,,,,true,false
Ta-Da,5mgqgs,https://ta-da.io/,AI,,TADA,ta-da,Ta-da is an AI data marketplace that uses blockchain technology to gamify the process of verifying AI data.,,,,https://twitter.com/Ta_da_io,,,,,,,true,false
TabbyPOS,x5fqva,https://www.tabbylab.io/,SENSORS,,EPOS,tabbypos,TabbyPOS is the First Community-Driven Blockchain Point of Sale. The blockchain payment solution integrates a hardware terminal with POS software that seamlessly merges the blockchain with real-world business operations.,,ZZ,,https://twitter.com/tabbypos,,,,,,,true,false
Tableland,q0t1nl,https://tableland.xyz/,PENDING,,,,,,,,https://x.com/tableland,,,,,,,true,false
TACEO,7c6zgs,https://taceo.io/,PENDING,,,,,,,,https://x.com/TACEO_IO,,,,,,,TRUE,FALSE
Tachyon,3gevoq,https://tachyon.eco/,WIRELESS,,IPX,tachyon-protocol,"Tachyon is a decentralized internet protocol that aims to create a libre, secure, and private internet. ",VPN,ZZ,,,,,,,,,true,false
Taiko,olo8b9,https://taiko.xyz/,NOT_DEPIN,,,,"Taiko is a fully open-source, permissionless, Ethereum-equivalent ZK-Rollup that will enable dApp developers and users to leverage the power of Ethereum Layer 1 (L1) without making any changes to their existing dApp.",ZK,ZZ,,,,,,,,,true,false
Tailz,69b0bj,https://www.tailz.xyz/,SENSORS,ETHEREUM,TAIL,,"Tailz is a walk-and-pet-to-earn app that enables pet owners to earn crypto rewards by walking their pets, using a smart collar that tracks their steps.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/tailz_xyz,,,,,,,true,false
talentDAO,g1mdtt,,SCIENCE,,,,"talentDAO is a digital organization building decentralized research collectives and open-source coordination software for the future. ",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/talentdao_,,,,,,,true,false
Taliot,a239fd,,AI,,,,"Taliot is a job search platform, providing AI-powered tools for efficient and streamlined job hunting.",,,,,,,,,http://www.linkedin.com/company/copilot-ai-disaster-management,,true,false
Talus,l56q27,,AI,,,,"Talus is building a next-gen blockchain network for AI that utilizes Move’s smart contract security, performance, and object-oriented programming to create an environment for AI to thrive on-chain.",,ZZ,,https://twitter.com/TalusNetwork,,,,,,,true,false
Tanssi,zc045a,https://www.tanssi.network/,BLOCKCHAIN_INFRA,,,,Tanssi is a blockchain protocol simplifying app chain deployment for appchain infrastructure.,L1/L2,ZZ,,https://twitter.com/Medium,1072940134040883251,,,,http://www.linkedin.com/company/medium-com,,true,false
Tao Black,auplyk,,WIRELESS,,,,Tao Black is a phone designed specifically for the Bittensor Environment on the Blockchain.,,EV3 Sal,,https://twitter.com/TaoBlackPhone,,,,,,,true,false
Tao Studio,h4cnmu,https://tao.studio/,AI,,,,Tao Studio is a developer of a text-based image generator that produces high-quality images.,,,,,,,,,https://www.linkedin.com/company/tao-studio/about/,,true,false
TAObets.ai,1wyd0b,N/A,NOT_DEPIN,,,,TAObets.ai is a sports prediction site powered by the cutting-edge Bittensor network with a focus on sports betting and fantasy sports.,Prediction Market,EV3 Sal,,,,,,,,,true,false
TAOlie,dwwwmj,https://taolie.ai/,COMPUTE,SOLANA,TAOLIE,taolie-coin,"TAOlie is a decentralized marketplace for renting GPU power, enabling users to commit unused GPU resources, rent GPU clusters, and use pre-built mining templates for Bittensor TAO mining.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/TAOlie_SOL,,,,,,,true,false
Taoshi,8p6wp2,https://www.taoshi.io/,AI,,,,"Taoshi harnesses the full potential of Bittensor to create dynamic and rewarding subnetworks that incentivize intelligence, revolutionizing how individuals and businesses interact with Bittensor.",,,,https://twitter.com/taoshiio,1163496128499683389,,,,,,true,false
Tape,081jvp,https://tape.xyz/,NOT_DEPIN,,,,"Discover a new era of content sharing on Lens with Tape. A decentralized, user-centric approach to online media.",Social,,,,980882088783913010,,,,,,true,false
Taroverse,ft0bj6,https://www.taroverse.com/,NOT_DEPIN,NATIVE,TARO,taroverse,Taroverse is a cross-platform metaverse platform enabling real-time interaction between players through digital avatars.,,,,,785165370927218708,,,,,,true,false
TARS,ra3011,https://tars.pro/,BLOCKCHAIN_INFRA,SOLANA,TAI,tars-protocol,"TARS Protocol is an AI-driven, scalable web3 modular infrastructure platform designed to empower projects with cutting-edge AI solutions, a decentralized GPU marketplace, and a one-stop Blockchain-As-A-Service.",,ZZ,,https://twitter.com/tarsprotocol,,,,,,,true,false
Tashi,cgjiem,https://tashi.gg/,COMPUTE,,,,"Tashi is a DePIN technology and ephemeral side-chain for gaming, introducing a Fully On-DAG Game (FODG) technology that moves the consensus engine from public layer 1 and layer 2 networks into the players’ game sessions.",Gaming,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/tashiggofficial,,,,,,,true,false
Tatami,56zb0b,https://www.tatami.games/,NOT_DEPIN,,,,"Tatami is the first-ever decentralized video game publisher, powered by a shared ecosystem.",,,,,,,,,,,false,false
Tatsu,ky4a2k,https://tatsuecosystem.io/,HUMAN_CAPITAL,BITTENSOR,TATSU,tatsu,"Tatsu is a decentralized protocol that uses a humanized scoring model to securely verify digital identities while preserving privacy, built on Bittensor. ",Identity,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/tatsuecosystem,,,,,,,TRUE,FALSE
Tau,ms4h4c,https://tau.net/,AI,ETHEREUM,AGRS,agoras-currency-of-tau,Tau is an AI software generation tool with AI safety features.,,,,https://twitter.com/TauLogicAI,695210246557138965,https://t.me/tauchain,https://tau.net/blog/,,https://www.linkedin.com/company/tau-network/,,true,false
Taubyte,zgv8uf,https://taubyte.com/,COMPUTE,,,,"Taubyte is a framework to build Cloud Computing Platforms/Networks. Taubyte enables organizations to build and manage their own cloud infrastructure in a flexible, interoperable, and transparent way, specifically designed to support the unique requirements of web3 and optimized for edge computing. ",,,,https://twitter.com/dtaubyte,,,https://medium.com/@taubyte,https://github.com/taubyte,https://www.linkedin.com/company/taubyte-page/,,true,false
Taxa,5zk1x8,https://taxa.network/,NOT_DEPIN,,,,"Taxa is a blockchain-agnostic layer-2 infrastructure ensuring privacy, power, and easy development.",L1/L2,ZZ,,https://twitter.com/taxanetwork,610854636785762369,https://t.me/taxanetwork,,,https://linkedin.com/company/taxanetwork,,true,false
TAZZ,lndlo6,https://tazz.finance/,NOT_DEPIN,,,,"Tazz creates capital-efficient debt markets, where borrowers issue debt against long-tail and hard-to-price collateral.",,,,,,,,,,,true,false
tDrive,63c0w9,https://tdrive.io/,COMPUTE,,,,tDrive is a decentralized storage platform built on the Telos Blockchain.,Storage,ZZ,,https://twitter.com/mytdrive_id,,,https://medium.com/@VeganLover/how-does-google-drive-work-2cda31c58ce8,https://github.com/linagora/TDrive,https://ca.linkedin.com/company/t-drive,,true,false
TEA Project,xmaehz,https://teaproject.org/,COMPUTE,,,,TEA Project: decentralized cloud computing for serverless apps.,,,,https://twitter.com/teaprojectorg,1042161438732603513,https://t.me/teaprojectorg,https://teaproject.medium.com/,,https://www.linkedin.com/company/tea-project/about/,,true,false
Teablocks,q5ajj8,https://teablocks.com/,PENDING,,,,,,ZZ,,https://twitter.com/teablocks_com,,,,,,,true,false
Techtics Engineering,1wmf1w,https://techticsengineering.com/,SENSORS,,,,Techtics Engineering is a specialized hardware manufacturer for decentralized physical infrastructure networks.,,,,,,,,,,,true,false
Tectum,72ks01,https://tectum.io/,NOT_DEPIN,ETHEREUM,TET,tectum,Tectum™ is a distributed ledger protocol managing platform that employs the proprietary record change signature management algorithm – HashDrive™.,,ZZ,,,,,,,,,true,false
TeezoVPN,4rtkl8,https://teezovpn.com/,WIRELESS,,TEEZO,,TeezoVPN is a decentralized VPN framework designed to provide users with a private and secure internet access solution.,VPN,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/Teezo_VPN,,,,,,,TRUE,FALSE
TEKKON,sel0t5,https://tekkon.com/,SENSORS,,,,TEKKON is a Web3 app that promotes social good by empowering users (citizens) to help fix their local community’s infrastructure. Users (Citizens) can earn a token by posting and reviewing infrastructure data.,,ZZ,,https://twitter.com/TEKKON_official,1227383314327933009,https://t.me/TEKKONOfficial,https://medium.com/@Tekkon,,,,true,true
Teleport,aehc1q,https://www.teleport.xyz/,MOBILITY,,,,"Teleport connects companies, drivers, and riders, promoting local economies and reducing costs.",,ZZ,,https://twitter.com/teleportxyz,,,,,http://www.linkedin.com/company/teleportxyz,,true,false
Telnyx,9a244u,https://telnyx.com/,NOT_DEPIN,,,,Telnyx helps enterprise manages connectivity need from a single platform.,,,,https://twitter.com/telnyx,,,,,https://www.linkedin.com/company/telnyx,,true,false
Telos,g8n4d7,https://www.telos.net/,NOT_DEPIN,NATIVE,TLOS,telos,Telos is a Layer-1 EVM blockchain with a DPoS consensus mechanism. It is EMV-compatible and powered by AntelopeIO.,L1/L2,,,https://twitter.com/HelloTelos,466757729508261889,https://t.me/HelloTelos,https://hellotelos.medium.com/,https://github.com/telosnetwork,http://www.linkedin.com/company/telos-blockchain-network,,true,false
Tempo,l84cmm,https://hellotempo.com/,MOBILITY,,,,"Tempo is an app-based service that makes it easy for users to own an electric bike, with roadside pickup, insurance, preventative maintenance, and security.",,,,,,,,,,,true,false
Ten,qa4qwx,https://obscu.ro/,NOT_DEPIN,,,,"Ten(formerly Obscuro) is developing a decentralized encryption Layer 2 built on top of Ethereum. Ten is designed to enable any Ethereum contract to operate at a larger scale, lower gas, without risk of MEV and crucially, with full encryption. It leverages a technology called Secure Enclaves.",,,,,916052669955727371,,,,,,true,false
Teneo,ckujoy,https://teneo.pro/,BLOCKCHAIN_INFRA,,TENEO,teneo-protocol,"Teneo Protocol is building a Data Layer for DePIN and AI enabling seamless device-to-device communication, tokenization of RWAs, and cross-chain data availability.",,EV3 Sal,,https://x.com/teneo_protocol,,,,,,,true,false
Tensor Space,cs2nu7,https://tensorspace.cloud/,COMPUTE,BITTENSOR,TPU,,Tensor Space is a Decentralized Platform for AI and ML Computing that allows users to run and fine-tune AI models without code and utilize GPU/TPU/LPU computational power in a decentralized marketplace. Built on Bittensor.,,EV3 Sal,,https://twitter.com/tensorspace_ai,,,,,,,true,false
Tensorplex,fuqiiy,https://www.tensorplex.ai/,AI,BITTENSOR,STTAO,tensorplex-staked-tao,"Tensorplex Labs is building applications, infrastructure, and tools to supercharge AI development, leveraging decentralized AI networks such as Bittensor, and developing novel mechanisms to boost decentralized AI adoption and capabilities.",,ZZ,,https://twitter.com/TensorplexLabs,,,,,,,true,false
Tenzro,hps6us,https://www.tenzro.com/,AI,,,,"Tenzro is a decentralized AI training and compute platform that enables anyone to contribute to and participate in AI development through distributed devices, peer-to-peer data exchange, and adaptive token systems.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/tenzr0,,,,,,,TRUE,FALSE
Tepax,pz0ffy,,BLOCKCHAIN_INFRA,,,,Tepax AI is a travel assistant company that utilizes artificial intelligence to enhance travel experiences.,,,,https://twitter.com/tepax_,,,,,http://www.linkedin.com/company/tepax,,true,false
Teq,fyfgb5,https://www.teq.network/,COMPUTE,ETHEREUM,TEQ,teq-network,"TEQ Network is a decentralized hosting platform offering AI-enhanced cloud computing, VPS Hosting, and a Virtual Private Network (VPN).",,ZZ,,https://twitter.com/TeqNetworkAI,,,,,,,true,false
Terathium,tm58se,,NOT_DEPIN,,,,Terathium is building a lithium-ion battery recycling plant.,,EV3 Sal,,,,,,,,,true,false
Terminal3,gf055c,https://www.terminal3.io/,COMPUTE,,,,"Terminal 3: Web3 startup for decentralized data storage, providing privacy and security.",Storage,,,https://twitter.com/terminal3gaming,,,,,https://www.linkedin.com/company/terminal3,,true,false
Ternoa,qg0thq,https://www.ternoa.network/,BLOCKCHAIN_INFRA,,,,"Ternoa is a multi-network and cross-layer protocol leveraging confidential computing technologies to make blockchain more secure, private, and scalable.",,ZZ,,https://twitter.com/ternoa_,,,,,,,true,false
Tesseract AI,lwnis1,https://tesseractai.cloud/,AI,ETHEREUM,TSAI,,"Tesseract AI provides Ethereum blockchain-based VPS services with high-performance GPU servers and advanced AI functionalities, enabling decentralized computing for cryptocurrency activities and AI model development.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/tesseract_ai,,,,,,,true,false
TestMachine,tfvxda,https://testmachine.ai/,AI,,,,TestMachine is an AI-powered blockchain security platform that aids smart contract developers in finding and fixing vulnerabilities in blockchain code at lightning speed.,,EV3 Sal,,,,,,,,,true,false
Thala,rrvozj,https://www.thala.fi/,NOT_DEPIN,APTOS,THL,thala,Thala is a DeFi protocol native to the Aptos blockchain.,,,,,1031262886863048834,,,,,,true,false
The Agriverse,28zy35,https://www.theagriverse.com/,RWA,BINANCE,AV,,"Agriverse is a decentralized agriculture platform combining Game-Fi with Web3, IoT, and AI, allowing users to own land, crops, and livestock as NFTs, monitor them via drones and cameras, earn rewards, and offset their carbon footprint.",Carbon Offsets/Credits,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/theagriverse,,,,,,,TRUE,FALSE
The Graph,x3ay3v,https://thegraph.com/,BLOCKCHAIN_INFRA,ETHEREUM,GRT,the-graph,"The Graph: a blockchain indexing protocol, providing efficient GraphQL-based access to blockchain data.",,,,https://twitter.com/graphprotocol,438038660412342282,https://t.me/graphprotocol,https://medium.com/graphprotocol,https://github.com/graphprotocol,https://www.linkedin.com/company/thegraph/,,true,false
The Mirror,zbly78,https://www.themirror.space/,PENDING,,,,,,EV3 Sal,,https://x.com/themirrorgdp,,,,,,,true,false
The Recharge,ba2ef9,https://www.therecharge.io/,ENERGY,ETHEREUM,RCG,recharge,The Recharge is a decentralized incentive solution that connects electric-charging platforms.,,,,,808417775978676265,,,,,,true,false
The Root Network,zlch56,https://www.therootnetwork.com/,NOT_DEPIN,ETHEREUM,ROOT,the-root-network,"The Root Network is a public decentralized blockchain network optimized for metaverse apps, games and experiences.",,,,,864685888830963742,,,,,,true,false
Theopetra,gaipt2,https://www.theopetralabs.com/,RWA,ETHEREUM,THEO,theopetra,Theopetra is a pioneering Network State where citizens collectively own land and influence real estate investments through a decentralized currency and governance tokens.,,ZZ,,https://twitter.com/TheopetraLabs,855236204491702302,,,,,,true,false
Theoriq,oahep1,https://www.theoriq.ai/,AI,,,,Theoriq is a modular and composable AI Agent Base Layer.,,EV3 Sal,,https://x.com/theoriqai,,,,,,,true,false
Theta Fuel,bsun3b,https://thetatoken.org/,COMPUTE,NATIVE,TFUEL,theta-fuel,Theta Fuel is a decentralized video delivery network.,,W. L.,,https://twitter.com/Theta_Network,808417775978676265,https://t.me/s/thetanetwork_announcements?before=516,https://medium.com/theta-network,https://github.com/thetatoken,http://www.linkedin.com/company/theta-labs-inc,,true,false
TheX,zsr4j2,https://thexprotocol.com/,NOT_DEPIN,,,,"Next-gen Web3 protocol for seamless transition, adoption, scalability, security, and user-friendliness.",,,,https://twitter.com/txprotocol,,https://t.me/thexprotocol,,,https://www.linkedin.com/company/the-x-protocol/,,true,false
Thingsix,488l20,https://www.thingsix.com/,WIRELESS,,,,"ThingsIX is a decentralized global Internet of Things network, built to reward gateway operators for providing reliable coverage and for delivering reliable data to end users.",,W. L.,,https://twitter.com/Things_IX,1008035508221378631,,,https://github.com/ThingsIXfoundation,,,false,false
Thought,0bu4wx,https://www.thought.live/,AI,NATIVE,THT,thought,ThoughtAI is an adaptive AI using Self-Aware Intelligent Software Agents.,Agents,,,,851496798731501598,,,,,,true,false
Thravos,rxp7o0,https://thravos.io/,HUMAN_CAPITAL,BASE,TRVS,,"Thravos is a gamified fitness and wellness platform that merges blockchain, AI, and RWA to connect athletes, brands, and fans, offering personalized challenges, real-world rewards, and crypto earnings for active participation.",Health,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/thravos_io,,,,,,,TRUE,FALSE
Three Protocol,84iurs,https://www.threeprotocol.ai/,BLOCKCHAIN_INFRA,NATIVE,THREE,,"Three Protocol is a decentralized platform utilizing No-KYC ZKP Pseudoanonymity, Neural Network AI, and Tri-Signature DAOs to establish autonomous marketplaces, enabling financial inclusion, efficient procurement, and crypto transactions.",,ZZ,,https://twitter.com/ThreeProtocol,,,,,,,true,false
ThreeFold,7exuma,https://threefold.io/,COMPUTE,ETHEREUM,TFT,threefold-token,"ThreeFold is a globally-distributed grid offering storage, compute, and network capacity.",,ZZ,,https://twitter.com/threefold_io,,https://t.me/threefoldnews,,https://github.com/threefoldfoundation,https://linkedin.com/company/threefold-foundation,,true,false
TICLE,iuemco,https://www.ticle.io/,AI,,,,"TICLE is a trustless low-code developer tool that autonomously plans, builds, and deploys cloud-native applications by integrating crowdsourced, user-owned APIs, governed by peer-to-peer reviews and AI-driven validation.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/ticleofficial,,,,,,,true,false
Ties.DB,4p06pz,https://tiesdb.com/,COMPUTE,,,,Ties.DB: Secure decentralized database for projects.,Storage,,,https://twitter.com/tiesnetwork-,,https://t.me/tiesdb,,https://github.com/tiesnetwork,https://www.linkedin.com/company/tiesdb/,,true,false
TIG,osr5fa,https://www.tig.foundation/,COMPUTE,,TIG,,TIG is a novel market-based framework designed to accelerate the development of computational methods crucial to data-driven sciences. It incentivizes open development through a unique proof-of-work mechanism and a hybrid licensing model.,,EV3 Sal,,https://x.com/tigfoundation,1232208402952753183,,,,,,true,false
Timpi,7npg1x,https://timpi.io/,BLOCKCHAIN_INFRA,,,,Timpi is the world’s first completely decentralized search engine with its own index. It is designed to integrate blockchain technology within the framework of traditional global commerce while being autonomously governed and globally scalable.,,W. L.,,https://twitter.com/Timpi_TheNewWay,,,,,,,true,false
tinygrad,n1ufl0,https://tinygrad.org/,AI,,,,"tinygrad is a simple and powerful neural network framework for deep learning that offers a balance between simplicity and functionality, with support for both training and inference on various hardware accelerators. ",,,,,1068976834382925865,,,,,,true,false
Titan,0seuc1,https://www.titannet.io/,COMPUTE,,,,"Titan Network is a digital resource network that incentivizes matching community idle resources with global demand, making it easy for everyone to leverage the power of DePIN services and participate in the construction of the Internet of Value.",,ZZ,,https://x.com/Titannet_dao,1182177005337325598,https://t.me/titannet_dao,https://medium.com/@titannetwork,https://github.com/Titannet-dao,,,true,false
TLay,3yvnxo,https://www.tlay.io/,BLOCKCHAIN_INFRA,,,,TLay is building a digital trust layer for DePIN infrastructure to enable large-scale collaboration and a public asset network for Real-World Assets (RWA).,,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/tlay_io,,,https://medium.com/@tlay_io,,,,true,false
Together.ai,rr8fxt,https://together.ai/,AI,,,,Together.ai is a decentralised cloud platform that empowers developers to train and deploy generative AI models.,GPUs,ZZ,,http://twitter.com/togethercompute,1082503318624022589,,,,http://www.linkedin.com/company/togethercomputer,,true,false
TOKAI,xhakt1,https://tokai.vip/,NOT_DEPIN,SOLANA,TOK,,"Tokai is an Al+ blockchain incentivized short-video social media platform that empowers content producers, processors, audiences, and advertisers in the Web3 Creator Economy.",Social,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/tokai_official_,,,,,,,true,false
TOKE,hgdrex,https://www.mctoken.xyz/,INTELLECTUAL_PROPERTY,,,,"$TOKE is a DePIN memecoin and liquidity token with 100% of supply airdropped and community-run dao. ",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/tokecommunity,,,,,,,true,true
tomi,hxlekf,https://tomi.com/,PENDING,,,,,,ZZ,,https://x.com/tomipioneers,983854078285201408,,https://medium.com/tomipioneers,,https://www.linkedin.com/company/tomidotcom/,,true,false
Ton,hdcw1i,https://ton.org/,BLOCKCHAIN_INFRA,NATIVE,TON,toncoin,TON is a fully decentralized layer-1 blockchain designed by Telegram to onboard billions of users.,L1/L2,ZZ,,https://twitter.com/ton_blockchain,,,,,,,true,false
TonGPU,wiu1h5,https://tongpu.xyz/,COMPUTE,TON,TGPU,,"TonGPU is a decentralized GPU/CPU network where users earn rewards for sharing their idle computational resources, allowing developers to utilize these resources for asynchronous AI training.",GPUs,W. L.,,https://x.com/TonGPU_Labs,,,,,,,true,false
Tontine,34j0w3,https://playtontine.com/,NOT_DEPIN,,,,"Tontine: retention-focused platform for web3 dApps, using onchain streaks to gamify user engagement.",,,,https://twitter.com/TontineTrust,,,https://tontine.com/blog/,,https://www.linkedin.com/company/tontinetrust/,,true,false
Top Network,y88p4m,https://www.topnetwork.org/en/,NOT_DEPIN,NATIVE,TOP,top-network,"TOP Network is a decentralized blockchain ecosystem composed of a public blockchain, DApps, and decentralized communication.",,ZZ,,https://twitter.com/topnetwork_top,,,,,,,true,false
Toronet,pdg3mv,https://toronet.org/,RWA,NATIVE,ToroG,,"Tórónet is an open fintech platform with a modular layer-1 blockchain protocol designed to empower emerging economies by enabling decentralized finance tools and real-world asset tokenization for inclusive, community-driven economic growth.",DeFi,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/toronet,,,,,,,TRUE,FALSE
Totem,6y1kh5,https://www.totem.gdn/bin/view/Main/,NOT_DEPIN,POLYGON,TOTEM,dragonmaster-totem,"Decentralized ecosystem for game developers, enabling collaboration and revenue earning.",Gaming,,,https://twitter.com/TotemGDN,,,,https://github.com/Totem-gdn,http://www.linkedin.com/company/totem-gdn,,true,false
Toucan,wyx859,https://toucan.earth/,ENERGY,POLYGON,BCT,toucan-protocol-base-carbon-tonne,Toucan Protocol provides a blockchain-based platform for tokenized trading of carbon credits from the Voluntary Carbon Market (VCM).,,,,https://twitter.com/ToucanProtocol,706114892666765375,,https://blog.toucan.earth/,https://github.com/ToucanProtocol,https://www.linkedin.com/company/toucan-protocol/,,true,false
TouchBrick,ocwr48,https://www.touchbrick.com/,NOT_DEPIN,,,,"TouchBrick is a revolutionary blockchain tokenization and cybersecurity solution built around decentralized privacy vaults, safeguarding sensitive data in healthcare, fintech, and AI applications, supported by an AI agent.",,EV3 Sal,,https://twitter.com/Touchbrick/,,,,,,,true,false
Trace,bjvhmg,https://trace.network/,NOT_DEPIN,ETHEREUM,TRACE,trace-network-labs,Trace is a metaverse technology for fashion and lifestyle powered by Web 3.0.,,,,https://twitter.com/trace_network,889566942678102016,,https://medium.com/@tracenetwork,,http://www.linkedin.com/company/trace-network-labs,,true,false
TRACEFLO,up2s95,https://www.traceflo.com/,NOT_DEPIN,,,,"TRACEFLO offers a DePIN Aggregator API, offering corporate customers streamlined access to the rapidly expanding decentralized world.",,ZZ,,https://twitter.com/traceflolabs,,,,,,,false,false
TRACKPAC,6nkbmk,https://trackpac.io/,PENDING,,,,,,,,https://x.com/Trackpacio,,,,,,,true,false
Travella,ttlilt,https://www.travella.io/,HUMAN_CAPITAL,,,,Travella is a peer-to-peer logistics platform that enables individual passengers to transport products for faster and less expensive delivery.,Logistics,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/Travellaio,,,,,,,true,false
TravelSwap,lsn7mu,https://travelswap.xyz/,NOT_DEPIN,,,,TravelSwap is a travel website that allows users to book hotel rooms & vacations directly with popular cryptocurrencies.,,EV3 Sal,,https://twitter.com/TravelSwap_xyz,,,,,,,true,false
Tree News,zrsqma,https://www.treeofalpha.com/,NOT_DEPIN,ETHEREUM,TREE,,Tree News is a Decentralized Community-Run News Aggregator.,,EV3 Sal,,https://twitter.com/treetokeneth,,,,,,,true,false
Trekn,xxpflh,https://trekn.xyz/,SENSORS,SOLANA,TRK,,"Trekn is a decentralized social mapping platform that lets users earn rewards by sharing and contributing valuable data, including photos, reviews, and ratings, of places in their local area.",,ZZ,,https://twitter.com/Trekn_xyz,,,,,,,true,false
Tresorio,l7nsll,https://www.tresorio.com/,COMPUTE,,,,Tresorio Operator is a fog computing platform providing carbon-friendly micro data centers and cloud computing services.,,,,https://twitter.com/TresorioCloud,,,,,https://www.linkedin.com/company/tresoriocloud/,,true,false
Triall,ppw0qm,https://www.triall.io/,NOT_DEPIN,ETHEREUM,TRL,triall,Triall is an end-to-end digital ecosystem of blockchain-enabled software solutions for clinical trials.,,ZZ,,,,,,,,,true,false
Trias,gcp7d3,https://www.trias.one/,NOT_DEPIN,ETHEREUM,TRIAS,trias-token,Trias is a cloud infrastructure solution with a native-application-compatible platform and token ecosystem.,,,,https://twitter.com/triaslab,871671996046512148,https://t.me/triaslab,https://triaslab.medium.com/,https://github.com/trias-lab/Documentation,http://www.linkedin.com/company/trias-lab,,true,false
Triathon,g1khhf,https://www.triathon.space/,SCIENCE,BINANCE,GROW,triathon,"Triathon is a decentralized AI training platform and Web3 marketplace for computing power, AI-driven security services, and self-evolving AI models, advancing the AI+DeSci revolution through community collaboration.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/TriathonLab,,,,,,,true,false
TripsIP,vsfg1l,https://tripsip.io/,NOT_DEPIN,,,,Creator monetization platform,,EV3 Sal,,,,,,,,,true,false
Triton One,fw5onx,https://www.triton.one/,BLOCKCHAIN_INFRA,,,,"Demonstrably Superior RPC for Solana, Sui, PythNet, and other blockchains. Build, iterate, and ship faster with Triton. ",,EV3 Sal,,,,,,,,,true,false
TritonAI,ikfd10,https://www.tritonai.network/,AI,,,,"TritonAI provides a unified, decentralized computing portal for AI, offering on-demand access to high-performance GPU, TPU, and cluster resources, empowering developers and researchers of all sizes. ",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/TritonAI_net,,,,,,,true,false
Trixta,3ztu6q,https://trixta.ai/,AI,,,,"Trixta is a decentralized business operating system that allows users to model, build and orchestrate distributed software with the use of Autonomous AI agents and Visual tools.",Agents,ZZ,,https://twitter.com/TrixtaTeam,,,https://medium.com/trixta,,https://www.linkedin.com/company/trixta/about/,,true,false
Tromero,hi03tk,https://www.tromero.ai/,AI,,,,"Tromero is a peer-to-peer blockchain that merges traditional proof of work consensus with ML to empower secure, democratic and decentralized ML applications.",,ZZ,,https://twitter.com/TromeroAI,1184778457780080691,,,,https://www.linkedin.com/company/tromero/about/,,true,false
TronNRG,k47dlk,https://tronnrg.com/,ENERGY,TRON,NRG,,TronNRG is a decentralized energy rental system on the Tron blockchain where users can provide or rent energy in a secure and transparent way.,,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/TronNRG,,,,,,,TRUE,FALSE
Tropiguna,q2xu7j,https://www.tropiguna.com/,NOT_DEPIN,,,,"Tropiguna is a Community Platform + Launchpad, ushering in the era of 'Community Acceptance Testing' in the Web3, DePIN, and RWA realms to revolutionize how projects validate, test, and evolve.",,EV3 Sal,,https://twitter.com/tropiguna,,,,,,,true,false
Trudenty,hz3nza,https://trudenty.com/,NOT_DEPIN,,,,"Trudenty Trust Network is a machine-learning powered network for data-sharing that enables merchants, acquirers and issuers to collaborate and identify friendly fraudsters in the ecosystem",,,,https://twitter.com/trudenty,,,,,https://www.linkedin.com/company/trudenty/,,true,false
Truebit,s2zdlj,https://truebit.io/,COMPUTE,ETHEREUM,TRU,truebit-protocol,"Truebit Verify is a verified computing platform that allows developers to build certified, interoperable applications that integrate seamlessly with any data source, interact across multiple ledgers, and execute complex code.",,ZZ,,https://twitter.com/Truebitprotocol,,,https://medium.com/truebit,https://github.com/TruebitProtocol,https://www.linkedin.com/company/truebit/,,true,false
Trueblocks,sfby9z,https://trueblocks.io/,BLOCKCHAIN_INFRA,,,,"High-quality, per smart contract, decentralized data delivered 100s of times faster than the RPC.",,EV3 Sal,,,570963863428661248,,,,,,true,false
Truffles,tcai80,https://trufflesuite.com/,NOT_DEPIN,,,,The most comprehensive suite of tools for smart contract development,,,,https://twitter.com/trufflesuite,,,,,,,false,false
Truflation,dl6pqe,https://truflation.com/,NOT_DEPIN,ETHEREUM,TRUF,truflation,"Truflation is an economic data aggregator and a Data Oracle for RWA, Indexes, and Inflation. ",Data,EV3 Sal,,https://twitter.com/truflation,945776468452069426,,,,,,true,false
Trustblock,52q2gb,https://trustblock.run/,BLOCKCHAIN_INFRA,,,,"Trustblock is a decentralized security hub that allows auditors to publish on-chain audits, ensuring verifiable authenticity and enabling web3 projects to enhance trust, security, and composability through critical audit data.",Security,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/trustblockhq,,,,,,,TRUE,FALSE
Trustpad,rj7rcg,https://trustpad.io/,NOT_DEPIN,BINANCE,TPAD,trustpad,TrustPad is a decentralized multi-chain fundraising platform enabling projects to raise capital and promise safety to early stage participants.,,,,https://twitter.com/TrustPad,967789840072585318,https://t.me/TrustPad,https://trustpad.medium.com/,,https://www.linkedin.com/company/trustpad/,,true,false
Truworld,bx69eq,https://www.truworld.xyz/,PENDING,,,,,,EV3 Sal,,https://x.com/truworld_web3,,,,,,,TRUE,FALSE
Tunnl,rpehc3,https://www.tunnl.io/,BLOCKCHAIN_INFRA,,,,Tunnl is an end-to-end on-chain marketing platform designed to streamline the deal flow between brands and creators.,,ZZ,,https://twitter.com/Tunnl_io,,,,,,,true,false
TurboGlobal,uke8jp,http://turboglobal.io/,WIRELESS,ETHEREUM,TGB,,"TurboGlobal is building a Web3 dVPN service platform that offers free connections to users, rewards miners and promotes advertisers.",,ZZ,,,,,,,,,true,false
Tusima,yjx59q,https://www.tusima.network/,PENDING,,,,,,ZZ,,https://x.com/TusimaNetwork,,,,,,,true,false
Tuumio,jx2ggt,https://tuumio.com/,BLOCKCHAIN_INFRA,,,,"TuumIO is a decentralized protocol and infrastructure empowering users to fully own and control their applications, data, and identity, enabling the creation of transparent, trustless apps without relying on centralized servers or cloud services.",,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/tuum_io,,,,,,,TRUE,FALSE
TwentySix Cloud,6624lr,https://www.twentysix.cloud/,COMPUTE,,,,"Twentysix Cloud is a decentralized cloud marketplace offering a full range of blockchain-based storage, compute engine, indexing, and AI solutions for businesses and applications, powered by Aleph.im.",,ZZ,,,,,,,,,true,false
Twilight,ivsy2s,https://twilightlayer.xyz/,WIRELESS,SOLANA,"TWI ",,"Twilight is a Layer 2 rollup privacy layer on Solana, leveraging geo-dispersed nodes operated by residential internet users or companies to help projects and users protect their data and ensure privacy.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/twilightlayer,,,,,,,true,false
TynmoSpace,a7y5as,https://www.tynmo.space/,COMPUTE,,TMO,,TynmoSpace is a VR Web3 social platform that integrates VR and blockchain with motion capture DePIN mining to provide immersive virtual reality experiences.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/tynmospace,,,,,,,true,false
U2 DPN,o5s8lu,https://u2dpn.xyz/,WIRELESS,,,,U2 DPN is a Decentralized Private Network that allows users to share their unused network bandwidth to earn passive income and provides a pay-as-you-go service for others to use this bandwidth for Internet privacy and security.,,W. L.,,https://twitter.com/u2_dpn,,,,,,,true,false
U2U,hz8qel,https://u2u.xyz/,BLOCKCHAIN_INFRA,,U2U,unicorn-ultra,U2U Network is a DAG (Directed Acyclic Graph) based and EVM-compatible chain that leverages Subnet technology to provide infinite scalability for DePIN projects.,,ZZ,,https://twitter.com/uniultra_xyz,,,,,,,true,false
UBIQnet,7lu677,https://ubiqnet.io/,COMPUTE,,,,"UBIQnetis a web3-based infrastructure for ubiquitous computing, with innovative dynamic fractional NFT smart contracts for efficient scheduling.",,ZZ,,https://twitter.com/UBIQ_net,1079671303801425942,,,https://github.com/ubiqnet,http://www.linkedin.com/company/ubiqnet,,false,false
UDAO,u3j1zw,https://udao.org/,NOT_DEPIN,ETHEREUM,UDAO,,"UDAO is an AI-driven Skills Platform on Web3 that enables members to control their skills development, connect, and collaborate in a transparent and fair environment, benefiting from personal development plans, skill models, and hands-on applications.",,ZZ,,https://twitter.com/udao_official,,,,,,,true,false
Ukama,fdirp9,https://www.ukama.com/,WIRELESS,,,,Ukama develops a cellular data network that allows users to create crowd-sourced cell networks by broadcasting their home internet connection as LTE using plug-and-play hardware.,,0x911445B1d3eB2af49d08c67ca6E7dc1c464bE5F5,,https://x.com/ukamanetworks,,,,https://github.com/ukama,,,true,false
Ukaton,g65bda,,SENSORS,,,,"Ukaton is a footwear company developing programmable insoles for health, VR/AR, and human interaction.",Health,ZZ,,https://twitter.com/ConcreteSciFi,,,,https://github.com/Ukaton-Inc,https://www.linkedin.com/company/ukaton/,,true,false
UKISS,4uhpxf,https://www.ukiss.io/,BLOCKCHAIN_INFRA,,KISS,,UKISS Technology is dedicated in building the next-gen digital security Ecosystem.,,,,,1143746313738010685,,,,,,true,false
Ultimate Digits,htddw8,https://www.ultimatedigits.com/,BLOCKCHAIN_INFRA,,ULT,,Ultimate Digits is building a protocol that makes users’ current mobile numbers their Web3 identity and provides +999-prefix virtual mobile numbers as Ethereum NFTs.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/ultimatedigits,,,,,,,true,false
Ultra,8yqcpk,https://ultra.io/,NOT_DEPIN,,,,"Ultra is a next-gen entertainment platform providing new possibilities for gamers, developers, and creators.",,,,,431591787321098270,,,,,,true,false
UltronGlow,4glwdr,https://www.ultronglow.io/,COMPUTE,NATIVE,,,UltronGlow is a decentralized storage network that allows anyone to store their data securely and privately on a network of distributed nodes.,Storage,ZZ,,https://twitter.com/ultronglow,,https://t.me/UltronGlowOfficial,https://ultronglow.medium.com/,https://github.com/UltronGlow,https://www.linkedin.com/company/ultronglow,,true,false
UMA,u27ctr,https://uma.xyz/,BLOCKCHAIN_INFRA,ETHEREUM,UMA,uma,"UMA is an optimistic oracle and dispute arbitration system that securely allows for arbitrary types of data to be brought on-chain. UMA’s oracle system provides data for projects including a cross-chain bridge, insurance protocols, custom derivatives, and prediction markets.",Oracle,ZZ,,,718590743446290492,,,,,,true,false
Umbrella,sjm2ka,https://umb.network/,BLOCKCHAIN_INFRA,ETHEREUM,UMB,umbrella-network,"Umbrella Network is a decentralized oracle and data layer offering scalable, customizable and high frequency data on chain.",Oracle,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/UmbNetwork,,,,,,,true,false
Umma,6rwsbm,https://umma.finance/,NOT_DEPIN,POLYGON,UMMA,umma-token,Umma.Finance is a platform that offers investors sustainable inflation-resistant returns backed by cash flows of hard assets while tackling the multi-trillion dollar finance gap in emerging markets.,,,,https://twitter.com/UmmaFinance,,https://t.me/ummafinancechat,https://medium.com/ummah-finance,https://ummafinance.substack.com/,https://www.linkedin.com/company/umma-finance,,true,false
Uncentered Systems,xb9cw4,https://uncentered.systems/,PENDING,,,,,,EV3 Sal,,https://x.com/UncenteredSys,,,,,,,true,false
UngateAI,d61891,https://ungate.ai/,AI,,,,"Ungate is a decentralized coordination protocol and economic infrastructure for AI development, offering a swarm intelligence network and marketplace for specialized agents, models, and datasets.",Agents,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/UngateAI,,,,,,,TRUE,FALSE
Unibase,qeihqn,https://www.unibase.io/,COMPUTE,,,,"Unibase is a zk-driven modular AI storage and computing network that enables anyone to easily build decentralized, verifiable, and interoperable AI applications.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/unibase_ai,,,,,,,true,false
Unifique,dto1yc,https://unifique.com.br/,NOT_DEPIN,,,,Home internet provider in Brazil.,,EV3 Sal,,,,,,,,,true,false
Unimoon,48jwhp,https://unimoon.ai/,AI,ETHEREUM,UMOON,unimoon-umoon,Unimoon maximizes token rewards using AI on Ethereum.,,,,https://twitter.com/Unimoonofficial,,https://t.me/unimoonportal,,,,,false,false
Union,bojh48,https://union.build/,NOT_DEPIN,,,,"Union is a hyper-efficient zero-knowledge infrastructure layer for general message passing, asset transfers, NFTs, and DeFi.",ZK,ZZ,,https://twitter.com/union_build,,,,,,,true,false
Unit,9e953q,https://www.unit.network/,BLOCKCHAIN_INFRA,NATIVE,UNIT,,"Unit Network is an interoperable Web3 operating system that allows you to create vibrant communities, borderless businesses, and token economies.",,,,,766259203278241823,,,,,,true,false
Units.Network,cullib,https://www.units.network/,BLOCKCHAIN_INFRA,,UNIT0,,"UNITS is an ecosystem of interconnected blockchain networks unified by common economic incentives and consensus. ",,ZZ,,,,,,,,,true,false
unityID,unyfcd,https://keyo.com/,SENSORS,SOLANA,,,"unityID is developing a DePIN and Secure Multi-Party Computing technology for a global, community-incentivized biometric identity network.",,EV3 Sal,,,,,,,,,true,false
Universal Basic Smartphone,dcyot8,https://universalphone.xyz/,WIRELESS,TON,,,Oyster Labs develops the Universal Basic Smartphone (UBS) to promote the mass adoption of the Toncoin (TON) blockchain and its Dapps and aims to empower users with control over their data and access to Web3 rewards.,Mobile,EV3 Sal,,https://twitter.com/oysterecosystem,,,,,,,true,false
Unlock,i7nidt,https://unlock-protocol.com/,NOT_DEPIN,,,,"Unlock is a protocol for creators to monetize content, using just a few lines of decentralized code.",,,,,,,,https://github.com/unlock-protocol,https://www.linkedin.com/company/joinunlock/,,true,false
Unofficial,ieoypf,https://unofficial.run/,NOT_DEPIN,,,,Unofficial is a composable social platform and subscription-based service that aims to revolutionize traditional social media.,Social,EV3 Sal,,,,,,,,,true,false
Unreal AI,a2zgjo,https://aiunreal.io/,COMPUTE,ETHEREUM,UNREAL,,"Unreal AI is a decentralized GPU supercomputing platform harnessing global GPU power for AI training, cloud mining, and movie rendering.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/theunrealai,,,,,,,true,false
Untangled,xexd0a,https://www.untangled.finance/,RWA,,,,"Untangled.Finance bridges traditional and DeFi, bringing institutional-grade, real-world assets on chain.",,,,https://twitter.com/untangledfin,863752120053006366,,https://www.linkedin.com/company/untangled-finance/,,https://github.com/untangledfinance,,true,false
Up Network,9divjf,https://www.upnetwork.xyz/,PENDING,,,,,,EV3 Sal,,https://x.com/upnetworkhq,1250726425422594080,https://discord.com/invite/upnetworkhq,,,,,true,false
Upfire,0e9eh3,https://upfire.com/,COMPUTE,ETHEREUM,UPR,upfire,"Upfire is a decentralized protocol for secure P2P file-sharing, enabling users to earn crypto.",,,,https://twitter.com/UpfireHQ,898179589531131904,https://t.me/UpfireOfficial,https://medium.com/upfire/,https://github.com/UpfireHQ/upfire,https://linkedin.com/company/upfireofficial,,false,false
uPlexa,856ev1,https://uplexa.com/,NOT_DEPIN,NATIVE,UPX,uplexa,uPlexa is a peer-to-peer electronic payment system utilizing IoT and privacy.,L1/L2,,,https://twitter.com/uPlexaCoin,417982588498477060,https://t.me/uplexaOfficial,https://medium.com/@uplexa,https://github.com/uPlexa,http://www.linkedin.com/company/uplexa,,false,false
Uplink,hq5oeh,https://www.uplink.xyz/,WIRELESS,,ULX,,Uplink is a decentralized Wifi network empowering human connectivity through internet access.,,ZZ,,https://twitter.com/uplink_xyz,,,,,,,true,false
UpOnly,kiskk2,https://www.uponly.com/,NOT_DEPIN,POLYGON,UPO,uponly,UpOnly is a Play to Earn Gaming Analytics and Prediction Platform.,Gaming,ZZ,,https://twitter.com/UpOnlyOfficial,,,,,,,true,false
UpRock,1rtzqi,https://uprock.com/,AI,,,,"UpRock AI revolutionizes decision-making with personalized, real-time insights.",,,,https://twitter.com/uprockcom,907363977527431270,https://t.me/uprockcom,,https://github.com/uprockcom,https://www.linkedin.com/company/uprock/,,true,false
UpSocial,9dm67q,https://upsocial.com/,COMPUTE,,,,"UpSocial is a decentralized video platform that gives creators full control over their content, prevents censorship, and provides reliable, secure hosting through community-driven distribution.",,ZZ,,,,,https://medium.com/@upsocials,https://github.com/0l6/up,https://www.linkedin.com/company/upsocial,,false,false
Upstreet,ke5ypn,https://upstreet.ai/,AI,,,,Upstreet is creating immersive experiences in browser-based products with multimodal AI agents built on top of a custom 3js game engine.,,EV3 Sal,,,,,,,,,true,false
US3R,hqj4vb,https://us3r.co/,BLOCKCHAIN_INFRA,,,,US3R: Dev platform and dApps with composable data using Ceramic for decentralized storage.,,,,https://twitter.com/getus3r,961112286733434950,,,https://github.com/us3r-network,,,true,false
Useful Sensors,25vqyc,https://usefulsensors.com/,SENSORS,,,,"Useful Sensors creates low-cost, easy-to-integrate hardware modules that bring ML capabilities like gesture recognition, presence detection, and voice interfaces to TVs, laptops, and appliances while preserving users’ privacy.",,ZZ,,,,,,https://github.com/usefulsensors,http://www.linkedin.com/company/useful-sensors-inc,,true,true
Utilink,pp6yep,https://utilink.xyz/,PENDING,,,,,,ZZ,,https://twitter.com/utilinkAI,,,,,,,true,false
UtilityNet,kms5fc,https://utnet.org/,COMPUTE,BINANCE,UNC,utility-net,UtilityNet is a global Decentralized Digital Chip Network that provides chip resources for next-generation edge computing and AI infrastructure.,,ZZ,,https://twitter.com/UtilityNet_,,,,,,,true,false
UXLINK,z1a1o1,https://www.uxlink.io/,NOT_DEPIN,,UXLINK,,"UXLINK is a leading user-driven web3 social platform for mass adoption, aiming to be a social DEX and social infrastructure.",Social,ZZ,,https://twitter.com/UXLINKofficial,,,,,,,true,false
V DAO,13i5ca,,PENDING,,,,,,EV3 Sal,,https://x.com/joinvdao,,,,,,,true,false
Vabble,el9mli,https://www.vabble.com/,PENDING,,,,,,EV3 Sal,,https://x.com/vabbleapp,,,,,,,TRUE,FALSE
Vaiot,sa6vqu,https://vaiot.ai/,AI,ETHEREUM,VAI,vaiot,Vaiot is a provider of blockchain-based AI Assistants and on-chain Intelligent Contracts for businesses and consumers.,,,,https://twitter.com/VAIOT_LTD,1062035044618743819,https://t.me/VAIOT_Community,https://vaiotltd.medium.com/,https://github.com/VAIoT,http://www.linkedin.com/company/vaiot-ltd,,true,false
Valence,adlfda,,AI,,,,"Valence is a permissionless execution layer for AI, offering scalable and cryptographically secure inference with a modular design for building diverse products ranging from on-chain AI agents to classical ML models in DeFi.",,ZZ,,https://x.com/0xValence,1132794141403791483,,,,,,true,false
Valid One,9piig3,https://valid.one/,PENDING,,,,,,EV3 Sal,,https://x.com/ValidOne_,,,,,,,true,false
Validation Cloud,rzmrjq,https://www.validationcloud.io/,COMPUTE,,,,"Validation Cloud is a Web3 infrastructure platform that delivers elite, high-performance node and staking infrastructure.",,,,https://twitter.com/ValidationCloud,,,https://validationcloud.medium.com/,,https://www.linkedin.com/company/validationcloud,,true,true
Valist,g2jtmx,https://www.valist.io/,NOT_DEPIN,,,,Valist: Decentralized platform for game deployment on Web2 and Web3.,Gaming,ZZ,,https://twitter.com/valist_io,785535462311591976,,,https://github.com/valist-io,http://www.linkedin.com/company/valist-inc,,false,false
ValleyDAO,rrbnx6,https://www.valleydao.bio/,NOT_DEPIN,ETHEREUM,GROW,valleydao,"ValleyDAO is an open, global community offering funding and translational support for synthetic biology research.",,ZZ,,,938351551314010163,,,,,,true,false
Vana,zt2nzn,https://www.vana.org/,AI,,,,"Create a mini “you” that lives in your pocket. Discover a new way to connect and experience the world. ",,EV3 Sal,,,1035319704224542832,,,,,,true,false
Vanar,6ls7z4,https://vanarchain.com/?lang=en,NOT_DEPIN,ETHEREUM,VANRY,vanar-chain,"Vanar offers a carbon-neutral, high-speed & low-cost layer 1 blockchain designed for entertainment and mainstream purposes.",,,,,,,,,,,true,false
Vara,9314iq,https://vara.network/,NOT_DEPIN,NATIVE,VARA,vara-network,"Vara Network is a Substrate-based, Proof-of-Stake, Layer-1 decentralized network powered by the Gear Protocol.",,,,,891063355526217738,,,,,,true,false
Vast.ai,2o9o23,https://vast.ai/,COMPUTE,,,,"Vast.ai is a GPU rental marketplace and cloud computing platform focused on reducing costs and friction for compute-intensive workloads, enabling users to rent or monetize GPU capacity. ",GPUs,ZZ,,https://twitter.com/vast_ai,466338952710979595,,,https://github.com/vast-ai,https://linkedin.com/company/vast-ai,,true,false
VaultTech,0tthma,https://vault.tech/,AI,ETHEREUM,VAULT,vaulttech,"Vault.tech offers a blockchain ecosystem with AI-enhanced escrow, OTC trading, and private swaps via VaultChain. Token holders gain exclusive benefits, while VaultAI's Escrow Bot ensures secure, impartial transactions.",,ZZ,,https://twitter.com/VaultAIHub,,,,,,,true,false
Vaxchain,adc9fo,https://devpost.com/software/vaxchain,SENSORS,,,,Devpost inspires the world's developers to build great software.,Health,,,https://twitter.com/devpost,861966823054639134,,https://info.devpost.com/blog,https://github.com/kie478/vaxchain,https://www.linkedin.com/company/devpost/,,true,false
Vayu,c6954r,https://www.vayurobotics.com/,ROBOTICS,,,,"Vayu is building a scalable mobile robotics platform using cutting edge bio-inspired sensing, ML, and robotics.",,,,https://twitter.com/VayuRobotics,,,http://www.linkedin.com/company/vayu-robotics,,,,true,true
VC Spectra,qbgfxz,https://vcspectra.io/,NOT_DEPIN,,,,Decentralized asset management and trading platform with secure investments.,DeFi,,,https://twitter.com/spectravcfund,,,,,,,false,false
VeChain,ed5hwr,https://www.vechain.org/,NOT_DEPIN,VECHAIN,VET,vechain,VeChain enables businesses to build decentralized apps for data transfer and supply-chain management.,,,,https://twitter.com/vechainofficial,875335100399771670,https://t.me/s/vechainannouncement,https://vechainofficial.medium.com/,https://github.com/vechain,http://www.linkedin.com/company/vechain-foundation,,true,false
Vectorspace,lzys3d,https://vectorspacebio.science/,AI,ETHEREUM,VXV,vectorspace,"Vectorspace AI provides correlation matrix datasets for data-driven innovation, with a focus on NLP/NLU.",,,,https://twitter.com/VectorSpaceBio,925153007266562168,https://t.me/joinchat/GrCYjA8rPgD8coAiEhRuBA,https://spacebiosciences.medium.com/,https://github.com/vectorspace-ai,http://www.linkedin.com/company/vector-space-biosciences,,true,false
Veera,luxgal,https://www.veera.com/,NOT_DEPIN,,,,Veera is a mobile-focused browser that brings everything desktop browsers have but is optimized for a mobile experience.,,EV3 Sal,,,,,,,,,true,false
Vega,ie91s7,https://vega.xyz/,NOT_DEPIN,ETHEREUM,VEGA,vega-protocol,Vega Protocol is a blockchain-backed network enabling automated trading and execution of financial products.,DeFi,ZZ,,https://twitter.com/vegaprotocol,720571334798737489,https://t.me/vegacommunity/,https://medium.com/@Vega_Protocol,https://github.com/vegaprotocol,https://linkedin.com/company/vega-protocol,,true,false
VEME,ok9cih,https://www.veme.com/,AI,,VEME,,"Veme is a generative AI video meme engine and short-form social video network built on Web3, rewarding users for content creation, training its AI model, and fostering a decentralized content economy.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/VEMEgod,,,,,,,true,false
Venice,z5x8p7,https://venice.ai/home,AI,,,,"Venice is a generative AI app that utilizes leading open-source AI models to deliver text, code, and image generation to its users.",,EV3 Sal,,https://twitter.com/tryvenice,,,,,,,true,false
Venn,52i8fa,https://www.venn.build/,BLOCKCHAIN_INFRA,,,,"Venn is a decentralized cybersecurity infra network for blockchains and applications, powered by EigenLayer.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/VennBuild,,,,,,,true,false
Verasity,20y2yy,https://verasity.io/,BLOCKCHAIN_INFRA,ETHEREUM,VRA,verasity,Verasity is a decentralized ecosystem of digital advertisers and merchants.,,,,https://twitter.com/verasitytech,850659368953577492,https://t.me/verasity,https://medium.com/verasity,https://github.com/veracity,https://vg.linkedin.com/company/verasity,,true,false
Verde Blocks,6d6fxu,,ENERGY,,,,"Verde Blocks is a DLT-enabled, user-friendly platform for large electric buyers to competitively source renewable power in the market, making it easier for companies to achieve their climate goals by replacing fossil fuels with clean energy.",,EV3 Sal,,,,,,,,,true,false
VeriCar,s61est,,PENDING,,,,,,ZZ,,https://twitter.com/vericar24,,,,,,,true,false
Verida,hjruy9,https://verida.io/,NOT_DEPIN,,,,"Verida is a decentralized data storage, messaging, and single sign-on solution.",,W. L.,,https://twitter.com/verida_io,664594912460668960,https://t.me/verida_community,https://news.verida.io/,,https://www.linkedin.com/company/verida-technology/,,true,false
VERIFY,fzvw4b,https://www.verifymedia.com/,NOT_DEPIN,,,,"VERIFY is a protocol for media companies to register content and grant usage rights to AI platforms, while also allowing end consumers to verify the origin of content.",,EV3 Sal,,,,,,,,,true,false
Verisoul,2gzcyz,https://www.verisoul.ai/,BLOCKCHAIN_INFRA,,,,Verisoul is a developer of an AI-based decentralized platform to help businesses stop fake users.,,ZZ,,https://twitter.com/verisoulxyz,,https://t.me/Verisoul,,https://github.com/verisoul,http://www.linkedin.com/company/verisoul-stops-fake-users,,true,false
VeriSync,p01qoh,https://www.verisynclabs.xyz/,BLOCKCHAIN_INFRA,,,,VeriSync Labs develops specialized micro-rollup infrastructure and a comprehensive ZKML library to streamline Zero-Knowledge proof generation and verification for ML models.,ZK,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/0xverisynclabs,,,,,,,true,false
Veritree,hhtpfc,https://www.veritree.com/,ENERGY,,,,Veritree is a blockchain company specializing in transparent and durable systems for verifying tree planting & growth.,Environmental,,,https://twitter.com/veritree_,,,https://medium.veritree.com/,,https://ca.linkedin.com/company/veritree,,true,false
Vicharak,sbclxl,https://vicharak.in/,COMPUTE,,,,Reconfigurable edge computing,,EV3 Sal,,,,,,,,,true,false
VIDT,u9uyrj,https://www.vidt-dao.com/,BLOCKCHAIN_INFRA,ETHEREUM,VIDT,vidt-dao,"VIDT DAO develops a blockchain technology that securely timestamps and authenticates users' digital documents. With VIDT developers and users can create timestamps, NFTs, and register digital assets such as certificates, sensor data, and firmware.",,ZZ,,,,,,,,,true,false
Vinci,pd96s1,https://staging.vinciworld.io/,AI,,,,"Vinci World provides AI models for blockchain games, enhancing gaming experiences with cutting-edge technology.",Gaming,,,https://twitter.com/VinciWorld,,,,,,,true,false
VIP3,517uvj,https://www.vip3.io/,BLOCKCHAIN_INFRA,,,,"VIP3 is a Web3 membership platform providing bonuses, discounts, and privileges via on-chain SBT membership cards.",,,,,1043916110694719579,,,,https://uk.linkedin.com/company/metafour,,true,false
Viper,1sbdg8,https://vipernet.xyz/,BLOCKCHAIN_INFRA,,,,Viper is a decentralized RPC for Solana.,RPC/Indexing,W. L.,,https://twitter.com/Nilfiskofficial,1035116329193189396,,,,https://www.linkedin.com/company/viper/,,true,false
Viridis,5kd57s,https://viridis.network/,ENERGY,ETHEREUM,VRD,viridis-network,"Viridis is building a novel protocol to deliver publicly auditable, on-chain and easily transactable carbon offsets for DeFi.",,ZZ,,,,,,,,,true,false
Virtu Cloud,98hqgn,https://www.virtuclouds.com/,COMPUTE,,VIRTU,,"Virtu Cloud is an innovative cloud computing platform dedicated to humanizing advanced technologies. It focuses on accessibility, offering an intuitive interface and simplified tools for tasks like mining, virtual machine setups, and more.",,W. L.,,https://twitter.com/VirtuCloud,,,,,,,true,false
Virtual,2a1uk3,https://www.virtuals.io/,AI,ETHEREUM,VIRTUAL,virtual-protocol,"Virtuals Protocol is an on-chain AI agents intelligence network that aligns incentives for the decentralized creation and monetization of AI agents across virtual interactions, including gaming, metaverses, and online interactions.",Agents,ZZ,,https://twitter.com/virtuals_io,,,,,,,true,false
Visionary,zwpehj,https://visionary.energy/,ENERGY,,,,"Decentralized energy storage solution for clean power supply, managed by cloud service.",,,,https://twitter.com/visionary_uk,,,https://medium.com/@almehawas,,https://www.linkedin.com/company/visionaryis/,,true,false
Vistara,jpfapn,https://app.vistara.dev/admin/home,BLOCKCHAIN_INFRA,,,,"Vistara Network is a hardware availability layer for the decentralized web that aims to democratize access to decentralized hardware, designed from the ground up to meet the needs of developers.",,EV3 Sal,,https://x.com/vistaralabs,,,,,,,true,false
VitaDAO,g0o72l,https://www.vitadao.com/,BLOCKCHAIN_INFRA,ETHEREUM,VITA,vitadao,"VitaDAO is a globally distributed, community-owned collective that funds and incubates translational aging research with a view to commercialise the resulting IP. VITA is their governance token, which is used to vote on and govern longevity research funding proposals.",,EV3 Sal,,https://twitter.com/vita_dao,810893413880561704,https://t.me/vitadao,https://www.vitadao.com/blog,https://github.com/VitaDAO,https://www.linkedin.com/company/vitadao/,,true,false
VitalVEDA,fxlb3d,https://vitalveda.fit/,NOT_DEPIN,BINANCE,VVFIT,,"VitalVEDA is a Web3-powered fitness app integrating AI and AR technologies, offering a social workout training platform with incentivized virtual gym sessions, curated workout programs, and a social video-sharing network for fitness enthusiasts.",Health,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,,,,,,,,true,false
Vitreus,m41s9y,https://vitreus.io/,NOT_DEPIN,,,,"VITREUS is a decentralized infrastructure designed as a blockchain-as-aservice specifically for the BFSI (Banking, Financial Services, and Insurance) industry.",,ZZ,,https://twitter.com/VitreusChain,1050540395559403590,https://t.me/VitreusChainTG,,,https://www.linkedin.com/company/vitreus-chain/,,true,false
Vivid Labs,pmtbrw,https://www.vividlabs.com/,NOT_DEPIN,ETHEREUM,VID,,"Vivid is a content publishing and media processing infrastructure for a new generation of creators and builders, developed on Web3 tech.",,,,https://twitter.com/VividLabsHQ,,https://t.me/vividlabs,https://medium.com/vivid-labs,https://github.com/videocoin,https://www.linkedin.com/company/vividlabshq/,,true,false
vlayer,df40n1,https://www.vlayer.xyz/,PENDING,,,,,,,,https://x.com/vlayer_xyz,,,,,,,TRUE,FALSE
vLLM,x2t025,,PENDING,,,,,,ZZ,,https://twitter.com/vllm_project,,,,,,,true,false
VO2,6q3z9k,https://www.vo2.fans/,NOT_DEPIN,,,,VO2 is a platform for fans to become stakeholders in their favourite athletes.,,,,,,,,,,,true,false
Vocdoni,ms6sq8,https://www.vocdoni.io/,NOT_DEPIN,,,,"Vocdoni is an open-source blockchain voting protocol that is scalable, auditable, censorship-resistant, and anonymous.",,EV3 Sal,,https://twitter.com/vocdoni,,,,,,,true,false
Volatilis,iqc8zd,https://www.volatilis.io/,NOT_DEPIN,,,,"Volatilis is a secure and efficient derivatives protocol for digital currency options, ensuring fund integrity.",DeFi,,,https://twitter.com/volatilistech,,,,,,,true,false
Volmex,7055ri,https://volmex.finance/,NOT_DEPIN,,,,Volmex Finance is a protocol for volatility indices and non-custodial trading built on Ethereum.,,,,,747599778421932196,,,,,,true,false
VPN3,tficxt,https://www.hotspotvpn.io/,WIRELESS,,,,VPN3 is a provider of a decentralized VPN protocol,VPN,,,,,,,,,,true,false
VPNSatoshi,e1mjkj,https://vpnsatoshi.com/,WIRELESS,COSMOS,,,"VPNSatoshi is a decentralized, secure, and fast VPN based on the Cosmos blockchain.",VPN,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/vpn_satoshi,,,,,,,true,false
VPS AI,35no6v,https://vpsai.io/,COMPUTE,ETHEREUM,VPS,vps-ai,"VPS AI is a decentralized AI and cloud ecosystem providing high-performance GPU-equipped Virtual Private Servers for AI and blockchain applications, enabling developers, businesses, and innovators to access the computing resources they need.",GPUs,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/VPS_AI,,,,,,,true,false
VulaCoin,4xae6i,https://about.vulacoin.com/,WIRELESS,,,,VulaCoin digitizes prepaid cash with stable coin for mobile wallets.,Wallet,,,,,,https://medium.com/@vulacoin,,http://www.linkedin.com/company/vulacoin,,true,false
Vulcan,y6ydao,https://vulcanforged.com/,NOT_DEPIN,ETHEREUM,PYR,vulcan-forged,"Vulcan Studios - web3 gaming, Elysium - carbon-neutral blockchain, MetaScapes - upcoming Metaverse-as-a-Service",Gaming,,,https://twitter.com/VulcanForged,,https://t.me/s/VulcanAnnouncements?before=1565,https://vulcanforgedco.medium.com/,,http://www.linkedin.com/company/vulcan-forged,,true,false
Vuzec,oogh3l,https://www.vuzec.com/work,NOT_DEPIN,,,,Vuzec is a decentralized Record Label.,,ZZ,,https://twitter.com/vuzecmx,,,https://vuzecmx.medium.com/,,http://www.linkedin.com/company/vuzec,,false,false
W3AIRouter,29n75r,https://www.w3airouter.com/,PENDING,,,,,,ZZ,,https://x.com/W3AIRouter,,,,,,,true,false
W3bstream,g62mpn,https://w3bstream.com/,NOT_DEPIN,,,,W3bstream is a decentralized infrastructure for connecting smart devices to smart contracts,,,,,,,,,,,true,false
WABA,ef7r80,https://www.wabanetwork.org/,ENERGY,,,,"WABA is a blockchain network that aims to revolutionize the energy industry by enabling decentralized energy trading, real-time data access, virtual power plants, and scalable solutions for efficient energy management and future demand.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/wabaorg,,,,,,,true,false
Waev,mwkpfa,https://waevdata.com/,BLOCKCHAIN_INFRA,,,,"Waev Data is an open-source protocol focused on trustless consumer data exchange, providing secure, compliant, and ethical data sharing with built-in encryption and smart contracts on the blockchain.",Data,ZZ,,https://x.com/datawaev,,,,,https://www.linkedin.com/company/waevdata/,,true,false
Wagon,dizdqt,https://wagon.network/,SENSORS,ETHEREUM,WAG,,"Wagon Network is a decentralized platform that connects supply chains through DeFi and a Data Network, facilitating the on-chain financing of real-world assets while ensuring data privacy and enabling AI-driven optimization.",Logistics,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/WagonNetwork,,,,,,,true,false
Waku,4dq4eq,https://waku.org/,BLOCKCHAIN_INFRA,,,,"Waku is a family of robust, censorship-resistant peer-to-peer communication protocols enabling privacy-focused messaging for Web3 apps, allowing users to integrate decentralized communication into their dApp without compromising security or privacy.",,0x911445B1d3eB2af49d08c67ca6E7dc1c464bE5F5,,https://x.com/waku_org,,https://t.me/waku_org,https://blog.waku.org/,https://github.com/waku-org,,,true,false
Walk Up,n5plbf,https://walkup.world/,SENSORS,POLYGON,WUT,walk-up,"WALK UP is a web3 fitness and lifestyle app that incorporates NFT gaming and Social-Fi elements to allow users to earn rewards in tokens or NFTs by engaging in physical activities like walking, jogging, and running.",Health,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/walkupglobal,,,,,,,true,false
Walken,kt77as,https://walken.io/,SENSORS,SOLANA,WLKN,walken,Walken is a play and exercise-to-earn mobile app that aims to connect real-life sports activities with online gaming and earning crypto.,,ZZ,,,897468313507074049,,,,,,true,false
WALKERS,wv408s,https://walkerscardano.xyz/,SENSORS,CARDANO,WLK,,"Walkers is a Cardano-based NFT project that combines GameFi and a ""move-to-earn"" model, allowing users to earn rewards by walking while engaging in various activities through its Walkers app.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/WalkersCNFT,,,,,,,true,false
Walrus,y0bqzo,https://www.walrus.xyz/,COMPUTE,,,,"Walrus is a decentralized storage and data availability protocol optimized for affordable and reliable storage of large binary files, or ""blobs.""",Storage,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/walrusprotocol,,,,,,,true,false
Warp,q30kuh,https://warp.cc/,COMPUTE,,,,Warp Contracts is a data processing Smart Contract layer on top of the Arweave data storage chain.,,,,https://twitter.com/warp_contracts,1103577987007397919,,https://medium.com/@warp_contracts,https://github.com/warp-contracts,https://www.linkedin.com/company/joinwarp,,true,false
Wasset,0iiinh,https://wasset.io/,MOBILITY,,WST,,"Wasset is a blockchain protocol that tackles global waste challenges via its token, marketplace, DAO, and Oracle. ",Environmental,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/wassetltd,,,,,,,true,false
WatchX,pa7uyl,https://www.watchx.io/,NOT_DEPIN,,,,watchX is a Do it Yourself easy to program Smartwatch Kit for STEM Education.,,EV3 Sal,,https://twitter.com/officialwatchx,,,,,,,true,false
WatchxNetwork,52beog,https://watchx.network/,SENSORS,IOTEX,WATCH,,"WatchXNetwork develops a wearable Web3 ecosystem powered by AI and Zero-Knowledge technology, centered around a smartwatch that connects millions of users to blockchain while prioritizing data privacy and security.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/watchxnetwork,,,,,,,true,false
Waterbear,j1wiq5,https://t.co/IXusMRST9t,SCIENCE,,,,"Waterbear is a Layer 2 blockchain for science that decentralizes scientific research, enabling global collaboration, data collection, and rewarding contributions with tokens to accelerate scientific discoveries.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/waterbearsci,,,,,,,true,false
WaterLAB,5e8mxc,https://www.rh2o.app/,ENERGY,,RH2O,,WaterLAB is a decentralized organization producing regenerative water (RH2O) through the advancement of distributed desalination.,,EV3 Sal,,https://twitter.com/_WaterDAO,,,,,,,true,false
WaveNodes,84rrjz,https://wavenodes.io/,WIRELESS,,WMT,,WaveNodes is a World Mobile EarthNode operator.,,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/wavenodes_io,,,,,,,TRUE,TRUE
Way,nbcm1f,https://way.network/,NOT_DEPIN,,,,"Way Network is a Zero-Knowledge Omnichain Interoperability Protocol that achieves zero-knowledge asset and data interoperability across chains using zkRelayer, ZK Verifier, IPFS, Sender, and Receiver.",ZK,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/waynetwork_labs,,,,,,,true,false
Wayfinder,p5jx6h,https://www.wayfinder.ai/,AI,NATIVE,,,"Wayfinder is a new AI-focused omni-chain tool enabling user-owned, autonomous AI agents to securely and efficiently navigate within and across blockchain ecosystems and applications while independently transacting assets they control via dedicated Web3 wallets.",,EV3 Sal,,https://twitter.com/aiwayfinder,,,,,,,true,false
Wayru,e9hjh5,https://www.wayru.io/,WIRELESS,,,,Wayru is a blockchain-based Unified Global WiFi Network.,,EV3 Sal,,https://x.com/wayrunetwork,835242215973978152,,https://wayru.medium.com/,,,,true,false
Weather Union,00xbqx,https://www.weatherunion.com/,SENSORS,,,,"Weather Union by Zomato is a crowd-supported weather infrastructure providing real-time weather data through a network of on-ground weather stations, aimed at boosting productivity and aiding research institutes and enterprises.",Environmental,EV3 Sal,,,,,,,,,true,false
Weatherflow,4xa4u6,https://tempest.earth/,SENSORS,IOTEX,,,Weatherflow is a decentralized weather monitoring network.,,,,https://twitter.com/tempest_wx,,,,https://github.com/WeatherFlow,https://www.linkedin.com/company/weatherflow,,true,false
WeatherXM,ff9s3p,https://weatherxm.com/,SENSORS,POLYGON,WXM,weatherxm,WeatherXM is a decentralized weather data collection network.,Environmental,ZZ,,https://twitter.com/weatherxm,813503633278631946,,https://blog.weatherxm.com/,,https://gr.linkedin.com/company/weatherxm,,true,false
Weavechain,s1imi6,https://www.weavechain.com/,BLOCKCHAIN_INFRA,,,,Weavechain is a secure data exchange layer that unlocks Web3 immutability and data lineage.,Data,ZZ,,https://twitter.com/weavechainweb3,943094754802036767,,https://medium.com/weavechain,https://github.com/weavechain,https://www.linkedin.com/company/weavechain,,true,false
WeaveDB,fasbh5,https://weavedb.dev/,COMPUTE,,,,"WeaveDB is a decentralized, NoSQL database system that uses the Arweave network as its underlying storage layer. It is designed to offer a scalable, secure, and fast solution for data storage.",Storage,ZZ,,https://twitter.com/weave_db,952234240840454194,,,,,,true,false
Weaver Labs,nyvs73,https://www.weaverlabs.io/,WIRELESS,,,,"Weaver Labs is developing an open and shared marketplace of connectivity assets, Cell-Stack.",,W. L.,,,,,,,,,true,false
Web3 Storage,4grkvx,https://www.web3storage.app/,COMPUTE,SOLANA,W3S,,"Web3 Storage is a decentralized storage and content delivery network infrastructure driven by blockchain technology, enabling builders to create and implement DApps, while users and producers utilize the platform for on-chain data sharing.",Storage,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/Web3Storage_Hub,,,,,,,true,false
WebAI,n03geb,https://www.webai.com/,AI,,,,"webAI provides a unified execution layer that integrates cloud-based services and local devices to streamline the training, deployment, and execution of AI models, aiming to revolutionize AI and enable the development of Super Intelligence (SI).",,ZZ,,https://x.com/thewebai,,,,,https://www.linkedin.com/company/webai-official/,,true,false
WebKey,7cye3v,https://webkey.pages.dev/,WIRELESS,,KEY,,"WebKey is a next-generation mobile terminal and platform that integrates blockchain, AI, decentralized identity, and Web3 applications, providing a secure, user-friendly gateway for global users to seamlessly access and engage in the Web3 ecosystem.",Mobile,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/webkey01,,,,,,,TRUE,FALSE
WeChipN,8i9tvk,https://wechipn.com/,NOT_DEPIN,,,,WeChipN is a provider of a Rewards Community that mobilizes culture with web3 technology.,,,,,,,,,,,true,false
WeDataNation,ah17kx,https://wedatanation.io/,NOT_DEPIN,,,,WeDataNation: Secure platform for user data aggregation.,Advertising,ZZ,,https://twitter.com/wedatanation,947527916403699772,,,,,,false,false
WeFi,wfvjio,https://wefi.xyz/,NOT_DEPIN,ETHEREUM,WEFI,wefi-finance,WeFi is a decentralized protocol that opens up under collateralized borrowing and lending options in the DeFi space.,DeFi,ZZ,,https://twitter.com/wefi?lang=en,915517391520276510,,,https://github.com/wefi,https://www.linkedin.com/company/wefi,,true,false
WeHealth,80us6v,https://www.wehealth.org/,BLOCKCHAIN_INFRA,,,,WeHealth: Innovative digital solutions for remote patient monitoring and personalized healthcare.,Health,,,https://twitter.com/WeHealthOrg,,,,,https://www.linkedin.com/company/wehealthorg/,,true,false
WELL3,2sme5b,https://well.eco/,PENDING,,,,,,ZZ,,https://x.com/well3official,930328152117485569,,,,,,true,false
Welshare,83ftnm,https://www.welshare.health/,SCIENCE,ETHEREUM,WEL,,Welshare Health is developing a decentralized app to help patients personalize how they contribute to AI-driven medical research by leveraging web3 technologies.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/welsharehealth,,,,,,,true,false
Werenode,7uy82l,https://werenode.com/,ENERGY,BINANCE,WRC,,Werenode is a Web3 energy platform enabling users to share and monetize their EV charging stations seamlessly through decentralized payments and real-time connectivity.,,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/werenode,,,,,,,TRUE,FALSE
WeSendit,tx9874,https://wesendit.io/,COMPUTE,BINANCE,WSI,wesendit,WeSendit is a file transfer service specializing in anonymous data transfer and decentralized storage solutions.,,ZZ,,https://twitter.com/WeSendit,,https://t.me/wesenditcom,,,https://www.linkedin.com/company/wesendit/,,true,false
Weve,yb56ub,https://www.weve.co/,WIRELESS,,,,Weveweve is a decentralized mail system on Arweave network. It ensures permanent availability of messages and web app.,,,,,,,,,https://www.linkedin.com/company/weve/,,true,false
Whive,rh0h7h,https://www.whive.io/,PENDING,,,,,,ZZ,,https://x.com/whiveIO,,,,,,,true,false
WiCrypt,ynsj12,https://wicrypt.com/,WIRELESS,POLYGON,WNT,wicrypt,WiCrypt is a decentralized WiFi sharing network.,,ZZ,,https://twitter.com/wicrypt,892017585711886366,https://t.me/s/wicryptann?before=486,https://medium.com/wicrypt,https://github.com/AmyXandra/wicrypt-new,https://ng.linkedin.com/company/wicrypt,,true,false
WiFi Map,xz6ffz,https://www.wifimap.io/,WIRELESS,POLYGON,WIFI,wifi,WiFi Map is a decentralized connectivity ecosystem mapping 10m+ WiFi hotspots globally.,,,,https://twitter.com/wifimapapp,1027968689439510639,https://t.me/+GhVechqawKk5OTk0,https://medium.com/@wifimap,,http://www.linkedin.com/company/wifi-map-llc,,true,false
WifiDabba,sc8bst,https://dabba.com/,WIRELESS,,,,"WifiDabba builds low-cost, scalable, distributed Wi-Fi infrastructure using lasers.",,ZZ,,https://twitter.com/DabbaNetwork,1120323012240085014,,,,https://in.linkedin.com/company/wifidabba,,true,false
WiHi,yg5k1j,https://www.wihi.cc/,SENSORS,,,,WiHi is a decentralized protocol incentivizing weather and climate data collection and predictions through cyrptoeconomics.,,W. L.,,https://twitter.com/WiHiWeather,1051081018150498404,,https://medium.com/wihi-weather,https://github.com/wihi-labs,,,true,false
Wiman,ypklkh,https://www.wiman.me/,WIRELESS,,,,Wiman is the Sharing Economy WiFi Company that provides seamless mobile WiFi connectivity globally.,,,,https://x.com/wiMANme,,,https://medium.com/modern-women,https://github.com/wimanwifi,https://www.linkedin.com/company/wiman-the-social-wifi-network/,,false,false
Windfall Token,ubj9z4,https://windfalltoken.io/,RWA,BINANCE,WFT,windfall-token,"Windfall is a decentralized blockchain-based real estate platform that gives investors the ability to buy, sell, and manage their assets in an immersive marketplace.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/windfalltoken,,,,,,,true,false
Wingbits,dxk2mc,https://wingbits.com/,SENSORS,,,,Wingbits is a decentralized flight tracking network.,,ZZ,,https://twitter.com/wingbits,1082294632689455154,,https://medium.com/@wingbits,https://github.com/wingbit,https://www.linkedin.com/company/wingits,,true,false
Wink3,20qu9r,https://wink3.xyz/,AI,,WINK3,,"Wink3 is a decentralized network leveraging global GPU resources to provide scalable, cost-effective AI computation and social media connectivity.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/wink3xyz,,,,,,,true,false
WINR,jhyqcs,https://winr.games/,NOT_DEPIN,ARBITRUM,WINR,winr-protocol,WINR Protocol is a blockchain-based platform enabling developers to build secure on-chain games with the WINR SDK.,Gaming,,,https://twitter.com/WINRProtocol,1044586317742358529,https://t.me/WINRProtocol,,https://github.com/winrprotocol/WINR_Protocol,,,true,false
Wire,yih1xv,https://wire.network/,NOT_DEPIN,,,,Wire: blockchain with APOS consensus for user growth.,L1/L2,,,https://twitter.com/wire,378315541083062282,,,https://github.com/wireapp,https://www.linkedin.com/company/wire-secure-communication/,,true,false
Wirtual,6k69oz,https://wirtual.co/,SENSORS,BINANCE,WIRTUAL,wirtual,WIRTUAL is a Web3 Exercise to Earn platform that allows users to earn WIRTUAL coins through exercise and exchange coins for store purchases or discounts.,,ZZ,,,937718515891310622,,,,,,true,false
Witness Chain,ooq2m5,https://www.witnesschain.com/,BLOCKCHAIN_INFRA,,,,Witness Chain offers a DePIN Coordination Layer that translates physical network attributes into verifiable digital proofs enabling the creation of new applications and services across decentralized networks.,,ZZ,,https://twitter.com/witnesschain,1008647991919382629,,,,,,true,false
Witnet,09nrgb,https://witnet.io/,BLOCKCHAIN_INFRA,ETHEREUM,WIT,witnet,Witnet is a decentralized oracle network that connects smart contracts to the outer world. It aims to allow any piece of software to retrieve the contents published at any web address with complete and verifiable proof of its integrity and without blindly trusting any third party.,,,,https://twitter.com/witnet_io,492453503390842880,https://t.me/witnetio,https://medium.com/witnet,https://github.com/witnet,https://www.linkedin.com/company/witnet/,,true,false
WOMBO EdgeMaxxing,0o58fw,https://www.w.ai/,PENDING,,,,,,ZZ,,https://x.com/WOMBO,,,,https://github.com/womboai/edge-optimization-subnet?tab=readme-ov-file,,,true,false
Woolly Farms,xh846b,https://woolly.io/,BLOCKCHAIN_INFRA,,,,Woolly Farms - connecting consumers and growers to build sustainable cities and ready our food systems.,,,,https://twitter.com/woollyfarms,,,,,https://www.linkedin.com/company/woollyfarms/,,true,false
WootzApp,1hxjaa,,AI,,,,WootzApp is an open-source Chromium fork that allows users to earn while browsing by contributing data to AI.,,ZZ,,https://twitter.com/wootzapp,,,,https://github.com/wootzapp/wootz-browser,,,true,false
Work X,thxsbg,https://www.work-x.io/,HUMAN_CAPITAL,BINANCE,WORK,work-x,"Work X is a decentralized job platform that enables seamless, AI-powered job matching empowering both talent and employers.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/workx_official,,,,,,,TRUE,FALSE
World Mobile,fo1iua,https://worldmobile.io/,WIRELESS,CARDANO,WMT,world-mobile-token,World Mobile is a decentralized mobile network operating globally.,Mobile,W. L.,,https://twitter.com/WorldMobileTeam/,739450842108919828,https://t.me/WorldMobileTeam,,https://github.com/worldmobilegroup,https://www.linkedin.com/company/worldmobilegroup/,,true,false
WorldBrain,hfv1iq,https://worldbrains.org/,AI,,WBC,,"WorldBrain is a large-scale neural network combining AI, neuroscience, and blockchain through Web3 to create a global, participatory AI system using distributed computing and a DePIN network.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,"project initiated by the Worldbrains Foundation, a subsidiary of OpenAI.",https://x.com/worldbrains_org,,,,,,,true,false
Worldcoin,y4tubw,https://worldcoin.org/,NOT_DEPIN,ETHEREUM,WLD,worldcoin,"Worldcoin is building the world's largest identity and financial network to serve as a public utility, giving ownership to everyone.",,,,,956750052771127337,,,,,,true,false
WSB Shills,knsxty,https://www.wsb.sh/,NOT_DEPIN,,,,"WSB Shills is a decentralised prediction market platform, allowing users to predict outcomes and earn rewards.",Prediction Market,ZZ,,https://twitter.com/wsb_sh,725851172266573915,https://t.me/wsbsh,,,,,false,false
Wysdom,trnymt,https://wysdom.xyz/,NOT_DEPIN,,,,Wysdom is a collaboration platform for web3 development and publishing.,,,,https://twitter.com/WysdomXyz,,,,,https://www.linkedin.com/company/wysdomxyz/about/,,true,false
Xa Net Services,kj6adp,https://xns.tech/,COMPUTE,,,,"Xa Net Services is a public cloud platform for business users, leveraging S3 convergence to deliver secure and high-performance cloud services, powered by the ScPrime Distributed Datacenter.",,0x9d73ca4689788f6d4be686e9150d6efe75ffd743,,https://x.com/xnscloud,,,,,,,true,true
Xai,at80xk,https://www.xai.games/,NOT_DEPIN,ETHEREUM,XAI,,Xai is developed to enable real economies and open trade in the next generation of video games.\,,,,https://twitter.com/XAI_GAMES,870683519230308372,,,,,,true,false
Xally,dxsly0,https://xally.ai/,AI,BITCOIN,XALLY,,"Xally simplifies AI development with scalable, secure blockchain infrastructure on Bitcoin Layer 2, offering pre-built AI modules, powerful computing resources, and a collaborative ecosystem to enable the effortless creation of advanced AI applications.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/xallyai,,,,,,,true,false
XCAD,xpvsgg,https://xcadnetwork.com/,NOT_DEPIN,ETHEREUM,XCAD,xcad-network,"XCAD Network is a platform harnessing the value of Content Creator audiences via Creator tokenization, viewers earn rewards used for fan governance.",,,,,848847833133481994,,,,,,true,false
XEI,gncydk,https://xei.ai/,AI,,XEI,,"Xei AI is a dApp that enables developers to build and deploy AI-powered applications on the blockchain, powered by Decentralized Computing for ML Engineers and DePIN.",,EV3 Sal,,https://x.com/xei_official,,,,,,,true,false
XELS,u8jemf,https://linktr.ee/xelsproject,PENDING,,,,,,ZZ,,https://x.com/xels_PR,,,,,,,true,false
XenonBox,gsllb7,https://xenonbox.xyz/,COMPUTE,ETHEREUM,XEBOX,,"XenonBox is a decentralized computing hub where users can buy or rent cutting-edge services that include Web3 Infrastructure, GPU Computing, GPU/Node Marketplace, Servers, CPU/TPU, and VPN (Virtual Private Network) Services.",GPUs,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/xenonboxerc,,,,,,,TRUE,FALSE
Xero AI,89qdnb,https://www.xeroai.io/,AI,ETHEREUM,XEROAI,xero-ai,"XERO AI is a free decentralized platform specializing in Text-to-Video conversion, empowering users to transform text into captivating video content effortlessly.",,ZZ,,https://twitter.com/xeroai_erc,,,,,,,true,false
XG Network,zreaha,https://xgnet.work/,COMPUTE,BINANCE,XG,x-game,XG Network is a parallel-chain DePIN project that provides decentralized gaming and payment module engines designed to empower developers and gamers alike.,CDN,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/xgnetwork_2024,,,,,,,TRUE,FALSE
XGPT,2aryqe,https://xgpt-ai.com/,AI,ETHEREUM,XGPT,x-gpt,"XGPT is an AI-powered Conversational Interface for Blockchain that integrates all existing dApps and services into a single platform, offering convenience and simplicity for users.",,ZZ,,,,,,,,,true,false
Xield,zalsra,https://www.xield.io/,COMPUTE,,,,"Xield Protocol integrates DePIN and DeFi with gaming through a decentralized overlay infrastructure, enabling gamers to monetize idle devices to earn rewards and enhance gameplay with staking, yield farming, and NFT trading.",Gaming,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/xieldio,,,,,,,true,false
XLANDER,e6vqyh,https://xlander.io/,BLOCKCHAIN_INFRA,,,,"XLANDER is a Layer1 blockchain designed to revolutionize existing blockchain architectures and applications through innovative hybrid POS + Green POW autonomous consensus, bandwidth sharding, and native implementation of evolutionary protocols, developed by Meson Network.",L1/L2,EV3 Sal,,https://twitter.com/xlanderio,,,,,,,true,false
XMAQUINA,j1e8vy,https://www.xmaquina.io/,ROBOTICS,,,,"XMAQUINA is a DePIN of tokenized autonomous robots, transforming robotics companies into scalable public investments, enabling users to profit from automation.",,ZZ,,https://twitter.com/Xmaquinanetwork,,,,,,,true,false
XMTP,rvdlk1,https://xmtp.org/,BLOCKCHAIN_INFRA,,,,The Extensible Message Transport Protocol (XMTP) is a secure messaging protocol that enables communication between blockchain accounts.,,,,https://twitter.com/xmtp_,831836269558235136,,https://xmtp.org/blog,https://github.com/xmtp,https://www.linkedin.com/company/xmtp-labs/,,true,false
XNET,pyz7yz,https://xnet.company/,WIRELESS,POLYGON,XNET,xnet-mobile,XNET is a blockchain-powered mobile carrier building neutral-host telecommunications infrastructure.,Mobile,W. L.,,https://twitter.com/XNET_Mobile,984268252815446107,,https://medium.com/@XNET_Mobile,,http://www.linkedin.com/company/xnet-mobile,,true,false
Xpanse,x21nw2,https://www.xpanse.gg/,AI,,XPA,,"Xpanse is a decentralized ecosystem empowering developers to create personalized AI NPCs with unscripted conversations and dynamic interactions, integrated with blockchain technology for rewarding quests and language model providers.",Agents,EV3 Sal,,https://twitter.com/xpanse_gg,,,,,,,true,false
XPIN,f53vk2,https://www.xpin.network/,WIRELESS,,,,"XPIN Network is a decentralized wireless platform built on blockchain, utilizing 4G/5G/WIFI/satellite NTN/SDWAN cross-protocol communication technologies to enable secure, encrypted communication worldwide.",Mobile,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/XPINNetwork,,,,,,,TRUE,FALSE
XProtocol,lawgds,https://xprotocol.org/,WIRELESS,BASE,KICK,,"XProtocol is a DePIN Entertainment Superchain designed for mass adoption, utilizing Xardian Nodes for network security and rewards, and featuring XForge, a blockchain-powered smartphone for direct participation in the decentralized ecosystem.",Mobile,0x395aB080688983b5a2F203B49cE44D66b30360AB,,https://x.com/xprotocol_org,,,,,,,TRUE,FALSE
XTblock,1jma5r,https://xtblock.io/,AI,BINANCE,XTT,xtblock-token,"XTblock is a hyper-capable blockchain network that enables decentralized AI and bot computing, solving issues of scalability, speed, and computational power for a wide range of industries.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/xtblockio,,,,,,,true,false
XX,61nayi,https://xx.network/,NOT_DEPIN,NATIVE,XX,xxcoin,XX: Blockchain for quantum-resistant and private smartphone communication and value exchange.,L1/L2,,,https://twitter.com/xx_network,491648371556220954,,https://medium.com/@todear4ever,https://github.com/xx-labs,https://www.linkedin.com/company/xxteam,,true,false
XYO,2icwvy,https://xyo.network/,BLOCKCHAIN_INFRA,ETHEREUM,XYO,xyo,"XYO is a tech network and protocol designed to improve the validity, certainty, and value of data. ",Positioning,ZZ,,https://twitter.com/OfficialXYO,935586624392298547,https://t.me/xyonetwork,,,https://www.linkedin.com/company/officialxyo/,,true,false
Y8U,lhirwt,https://y8u.ai/,AI,BINANCE,Y8U,y8u,"Y8U.AI is a native decentralized protocol that combines content-addressable storage with smart contract-based consent management, allowing users to control how their traits, encoded as protected data NFTs are processed by AI Miners.",,ZZ,,https://twitter.com/y8udotai,,,,,,,true,false
YAI,ukv6pn,https://www.yoracle.ai/,BLOCKCHAIN_INFRA,ETHEREUM,YAI,y,"YAI is an AP-powered Market Data Oracle that connects to all market data, and predicts the impact of events, price moves and narratives, and chain rotations and airdrop events.",Oracle,ZZ,,https://twitter.com/yai_erc,,,,,,,true,false
Yeahaw,6yugzm,https://yeahawai.xyz/,COMPUTE,ARBITRUM,YEHW,,Yeahaw AI is a decentralized platform that trades computing power using AI-driven matching and dynamic pricing models to efficiently match supply with demand.,Storage,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/Yeahaw_AI,,,,,,,TRUE,FALSE
Ylide,zug89a,http://www.ylide.io/,BLOCKCHAIN_INFRA,,,,"Ylide Protocol is a Web3 communication protocol that empowers developers and Web3 founders to create advanced communication apps easily. ",,,,https://twitter.com/ylide_,988385336713429004,https://t.me/ylide_chat,https://medium.com/@ylide,https://github.com/ylide-io,http://www.linkedin.com/company/ylide,,true,false
YogaPetz,1gh368,https://yogapetz.com/,NOT_DEPIN,,WELL,,"Yogapetz is a decentralised wellness ecosystem that prioritizes mindfulness, community and rewards.",,,,https://twitter.com/yogapetz,,,,,,,true,false
Yokai,jbyfc1,http://www.yokai.network/,BLOCKCHAIN_INFRA,,,,Yokai Developer: Security network with crowdsourced audit and bug bounty platform.,,,,https://twitter.com/yokai_network,874678777748279316,,https://yokainetwork.medium.com/,,http://www.linkedin.com/company/yokainetwork,,true,false
YOM,y1aj1g,https://www.yom.ooo/,COMPUTE,SOLANA,YOM,yom,YOM is the 1st decentralized pixel-streaming infrastructure (DePIN) powering cloud gaming at low-latency and near-zero prices across all devices and channels.,,ZZ,,https://twitter.com/YOMetaverse,895630020117155840,,,,,,true,false
Yoosend,89c3bx,https://yoosend.com/,COMPUTE,,,,Yoosend is an advanced decentralized cloud storage and file transfer solution for personal and business use.,Storage,W. L.,,https://twitter.com/yoosend,1088807081047511151,,,,,,true,false
Yotta Labs,v7ya4b,https://www.yottalabs.ai/,AI,,YOT,,"Yotta Labs is a decentralized AI computing platform that connects geo-distributed GPUs through a highly optimized software framework, offering scalable and high-performance AI development and deployment.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/yottalabs,,,,,,,TRUE,FALSE
Yozoo,4ggrwa,,SENSORS,,,,"Yozoo is a DePIN-powered AI+Health wearable and smart device that provides health data analysis and personalized health recommendations, helping users better understand and manage their health.",,EV3 Sal,,https://x.com/GMYozoo,,,,,,,true,false
Zama,3cujtx,https://www.zama.ai/,NOT_DEPIN,,,,"Zama provides a range of open-source FHE tooling for both crypto and non-crypto use cases. Its fhEVM library enables private smart contracts, guaranteeing both on-chain confidentiality and composability.",FHE,EV3 Sal,,,,,,,,,true,false
Zano,jog9r3,https://zano.org/,BLOCKCHAIN_INFRA,ETHEREUM,ZANO,zano,"Zano is an enterprise-grade privacy platform, scalable and private, built for privacy-protected tokens and decentralized applications.",,ZZ,,,538361472691077130,,,,,,true,false
Zarathustra,nceet0,,PENDING,,,,,,EV3 Sal,,https://x.com/teamzarathustra,,,,,,,true,false
ZayaAI,1debkh,https://zayablockchain.com/,AI,,ZAYA,,"ZayaAI is an AI and blockchain-based comprehensive ecosystem that aims to combat cancers by leveraging the latest AI technologies and medical screening procedures to provide early detection, prevention, and treatment.",Health,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/zayaai_pathdx,,https://t.me/ZayaAI_EN,,,https://www.linkedin.com/company/zaya-artificial-intelligence/,,TRUE,FALSE
zCloak,h8aibd,https://zcloak.network/,BLOCKCHAIN_INFRA,,,,"zCloak Network is a Web3 real-world identity infrastructure that prioritizes data privacy, utilizing ZK proofs for user data sovereignty and shifting data handling from centralized servers to user devices for more secure digital interaction.",ZK,EV3 Sal,,https://x.com/zcloaknetwork,,,https://zcloaknetwork.medium.com/,,https://www.linkedin.com/company/zcloak-network?originalSubdomain=hk,,TRUE,FALSE
Zeal,l2t357,https://www.zeal.app/,NOT_DEPIN,,,,"Zeal offers a smart wallet for personal financial management, integrating DeFi services like payments, swaps, and lending.",DeFi,EV3 Sal,,https://x.com/zealwallet,961390365708009524,,https://blog.zeal.app/?gi=6a82a4af02dc,https://github.com/zealwallet/wallet,,,TRUE,FALSE
Zebec,6krmhm,https://zebec.io/,BLOCKCHAIN_INFRA,SOLANA,ZBCN,zebec-protocol,"Zebec Network is a DePIN and RWA Payments Network that enables real-time and secure transactions for assets, services, or contracts.",,ZZ,,https://x.com/Zebec_HQ,881716805234745375,https://t.me/zebecprotocol,https://medium.com/zebec-protocol,,,,TRUE,FALSE
Zeebu,pzr9vo,https://www.zeebu.com/,BLOCKCHAIN_INFRA,ETHEREUM,ZEEBU,zeebu,"Zeebu is an on-chain invoice settlement platform for the Telecom Carrier Industry leveraging blockchain technology to enable trustless, frictionless, and superfast global transactions.",,EV3 Sal,,https://x.com/zeebuofficial,,https://t.me/+QdDCbYC_HsRhMjg0,https://www.zeebu.com/blog,,https://www.linkedin.com/company/zeebuofficial/,,TRUE,FALSE
Zeetta,6gz71b,https://zeetta.com/,WIRELESS,,,,Zeetta is a network virtualization company specializing in SDN solutions for enterprise and carrier networks.,Software,ZZ,,https://x.com/zeettanetworks,,https://t.me/s/ZeetaaProjects?before=209,,https://github.com/zeeta,https://uk.linkedin.com/company/zeetta,,FALSE,FALSE
Zeitgeist,yfqm09,https://zeitgeist.pm/,NOT_DEPIN,POLKADOT,ZTG,zeitgeist,Zeitgeist is a prediction markets protocol using collective wisdom and futarchy governance to reveal truth and drive progress.,Prediction Market,,,https://x.com/zeitgeist_xyz,737780518313000960,https://t.me/zeitgeist_official,https://medium.com/@zeitgeist.pro,https://github.com/ZeitgeistPM,https://uk.linkedin.com/company/the-zeitgeist-agency-ltd,,TRUE,FALSE
Zenithereum,yi3cpi,https://zenithereum.ai/,AI,,,,Zenithereum: Decentralized AI for agent growth in crypto and real-world environments.,,,,https://twitter.com/zenithereum,,https://t.me/ZenithereumAIofficial,,,,,FALSE,FALSE
ZENQIRA,iy43wk,https://zenqira.com/,AI,NATIVE,ZENQ,,"Zenqira is a marketplace that bridges the Golem Network's computing resources with a community of investors and AI technology companies, facilitating the trading of computing power for AI training.",Training,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/zenqiratech,,https://t.me/zenqiratech,https://zenqira.com/#blog-news,,,,TRUE,FALSE
Zentachain,n33nuc,https://zentachain.io/,WIRELESS,,CHAIN,,Zentachain is a decentralized high-throughput blockchain ecosystem designed for secure offline IoT communication.,IoT,ZZ,,https://x.com/zentachain,1017427959981822084,https://t.me/ZentachainOfficialChat/,,https://github.com/ZentaChain,,,TRUE,FALSE
Zephyr,7d8n5l,https://www.zephyrprotocol.com/,NOT_DEPIN,NATIVE,ZEPH,zephyr-protocol,Zephyr Protocol is a cryptocurrency protocol aiming to combine and refine the best proven privacy and stablecoin protocols.,,,,https://x.com/zephyr_org,,https://t.me/zephyrprotocol,https://medium.com/@zephyrcurrencyprotocol,https://github.com/ZephyrProtocol/Zephyr,,,TRUE,FALSE
Zero Citizen,o7thut,https://zerocitizen.io/,RWA,,,,"Zero Citizen is a ClimateTech company developing Renewable Energy Fractions, a transparent platform that tokenizes and fractionalizes renewable energy assets, allowing individuals to invest in and earn rewards from solar energy generation.",,0x6997bcc18dea68ae3cbf243e92ce831e541cd9e4,,https://x.com/zerocitizen_io,,,,,,,TRUE,FALSE
Zero Computing,4hi0gh,https://zerocomputing.xyz/,BLOCKCHAIN_INFRA,,,,Zero Computing is a dedicated compute platform for generating zero-knowledge proofs.,ZK,ZZ,,https://x.com/zero_computing,,,https://zerocomputing.xyz/blog,,https://www.linkedin.com/company/zerocomputing/,,TRUE,FALSE
Zero1 Labs,bate7g,https://z1labs.ai/,AI,ETHEREUM,DEAI,zero1-labs,"Zero1 is a decentralized AI ecosystem focused on Data Governance with a mission to simplify the development process and enhance the discoverability, growth, and monetization of DeAI products while protecting user's data.",,ZZ,,https://x.com/zero1_labs,,https://t.me/zero1labs,https://z1labs.ai/blog/,,,,TRUE,FALSE
ZeroSync,qe85lx,https://zerosync.org/,NOT_DEPIN,,,,"ZeroSync has designed and is currently implementing a Layer 2 protocol that has remarkable privacy and scalability properties, enabling Bitcoin to process more than 100 token transactions per second.",ZK,EV3 Sal,,https://x.com/zerosync_,,https://t.me/zerosync_chat,,https://github.com/ZeroSync/ZeroSync,,,FALSE,FALSE
Ziesha,fc7rgx,https://ziesha.network/,NOT_DEPIN,,,,Ziesha is a new layer-1 cryptocurrency that uses Zero-Knowledge proof technology for transaction compression.,ZK,ZZ,,https://x.com/ZieshaNetwork,923604493378154496,,,https://github.com/ziesha-network,,,FALSE,FALSE
ZIGDAO,safef0,https://zigdao.com/,NOT_DEPIN,ETHEREUM,ZIG,zignaly,"Zignaly is a Cryptocurrency Social Investment Platform that lets regular people invest via the expertise and leverage of the world’s top, vetted crypto traders — while only paying a fee on profits.",,,,https://x.com/zignaly,486954374845956097,https://t.me/ZignalyHQ,https://content.zignaly.com/blog,https://github.com/zignaly-open,https://www.linkedin.com/company/zignaly/,,TRUE,FALSE
Zion,4wmnm0,http://www.zion.fyi/,NOT_DEPIN,NATIVE,ZION,,Zion is a platform that allows creators to get paid for their content using the Bitcoin Lightning Network.,Social,,,https://x.com/get_zion,,,,https://github.com/getzion/,,,TRUE,FALSE
ZippyChain,p1zzqg,https://www.zippychain.ai/,AI,,ZPT,,"ZippyChain is a decentralized AI computing platform that enables individuals and enterprises to share computing resources, creating a decentralized AI supercomputer for secure, scalable, and efficient AI and blockchain applications.",,0x25052A4B28a35FfdBf2FaBA7DCCEB350e91b908F,,https://x.com/zippychain,,,,,https://www.linkedin.com/company/zippychain/,,TRUE,FALSE
Zircuit,jjl0jw,https://www.zircuit.com/,NOT_DEPIN,OPTIMISM,ZRC,zircuit,Zircuit is a zk rollup with parallelized circuits and AI-enabled security at the sequencer level.,ZK,EV3 Sal,,https://x.com/ZircuitL2,,,https://www.zircuit.com/blog,,,,TRUE,FALSE
Zizle,dfyom5,https://www.zizle.com/,INTELLECTUAL_PROPERTY,SOLANA,ZIZLE,,"Zizle is a Web3 social media platform built on Solana, empowering users and creators with data privacy, decentralized governance, and fair monetization.",Social,ZZ,,https://x.com/lets_zizle,,,https://blog.zizle.com/,,,,TRUE,FALSE
ZkAGI,x3idpo,https://zkagi.ai/,AI,,ZkAGI,,"ZkAGI is a privacy-conscious decentralized AGI built on DePIN, designed to democratize access to advanced AI technologies while ensuring the utmost privacy and security.",ZK,EV3 Sal,,https://x.com/zk_agi,,,,,,,TRUE,FALSE
zkCloud,01khbv,https://www.zkcloud.io/,NOT_DEPIN,,,,zkcloud is a cloud-based service that allows users to create zero-knowledge proofs on the cloud.,ZK,EV3 Sal,,,,,,,,,FALSE,FALSE
zkHUB,5ylhgz,https://zkhub.dev/,NOT_DEPIN,,,,zkHub is a decentralized marketplace for generating zero-knowledge proofs. The platform enables proof-gen in an efficient and privacy-preserving manner using MPC & parallelization techniques.,ZK,EV3 Sal,,https://x.com/zkHubHQ,,,https://blog.zkhub.dev/,,,,FALSE,FALSE
zkMe,o9x3hn,https://zk.me/,BLOCKCHAIN_INFRA,,,,"zkMe builds Identity Oracles that leverage the power of zero-knowledge-proofs to enable secure, self-sovereign, and private credential verifications.",Oracle,EV3 Sal,,https://x.com/zkme_,,https://t.me/+4dsTVtnFf7o0OTdl,https://medium.com/@zkMe,https://github.com/zkMeLabs,https://www.linkedin.com/company/zkme/,,TRUE,FALSE
zKML,z7dthf,https://www.zkml.systems/,NOT_DEPIN,ETHEREUM,ZKML,zkml,ZKML harnesses machine learning to create zero-knowledge proofs and secure multiparty computation for data privacy.,ZK,ZZ,,https://x.com/ZKMLsystems,,https://t.me/zkmlsystems,,,,,TRUE,FALSE
ZKPass,uhupn6,https://zkpass.org/,BLOCKCHAIN_INFRA,BINANCE,ZKP,,zkPass is a zkTLS oracle protocol that brings verifiable private Internet data on-chain.,Oracle,,,https://x.com/zkPass,950858460122206228,,https://medium.com/zkpass,https://github.com/zkPassOfficial,http://www.linkedin.com/company/zkpass,,TRUE,FALSE
ZkTsunami,7n7stw,https://www.zktsunami.io/,NOT_DEPIN,BINANCE,:ZKT:,tenset,"ZKTsunami pioneers privacy-centric solutions with its ZK-AnonSNARK technology, offering an interoperable ecosystem for anonymous digital assets.",ZK,ZZ,,https://x.com/ZKTsunami,,https://t.me/ZkTsunamiERC,,,,,FALSE,FALSE
Zo,tticpq,https://zo.me/,PENDING,,,,"Zo.me is a Web3 messaging platform that integrates AI for secure, decentralized communication.",,EV3 Sal,,https://x.com/joinzo,,https://t.me/+6O8AA1sqjC5lN2Ix,,,,,TRUE,FALSE
Zonal,gsucx5,,PENDING,,,,Zonal is building a proof of micro-location protocol that uses a decentralized mesh network powered by wireless communication technologies to provide proximity validation and enable highly reliable global and indoor positioning.,,,,,,,,,,,TRUE,FALSE
Zoo,acb6no,https://zoo.dev/,PENDING,,,,,,EV3 Sal,,https://x.com/zoodotdev,915388055236509727,,,https://github.com/kittycad,https://www.linkedin.com/company/zoodotdev/,,TRUE,FALSE
Zoth,4l25dn,https://zoth.io/,RWA,ETHEREUM,ZTLN,,Zoth is an RWA ecosystem bringing institutional-grade yield avenues onchain.,,,,https://x.com/zothdotio,1206918500900413480,https://telegram.me/+nFUrC_I1hA1iNWU9,http://www.linkedin.com/company/zoth-io,,https://github.com/0xZothio,,TRUE,FALSE
ZTM,tl6ivi,https://flomesh.io/,BLOCKCHAIN_INFRA,,,,ZTM - Zero Trust Mesh by Flomesh is an open-source network infrastructure software for running a decentralized network.,,EV3 Sal,,https://x.com/pipyproxy,,,https://blog.flomesh.io/,https://github.com/flomesh-io/ztm,,,TRUE,FALSE
Zukiverse,v0gdkl,https://zukiverse.org/,PENDING,,,,,,ZZ,,https://x.com/Zukiverses,,,,,,,TRUE,FALSE
Zura Could,fq5cv8,https://zuracloud.com/,PENDING,,,,,,ZZ,,https://x.com/Zuracloud1,,,,,,,TRUE,FALSE
Zus,q97oiz,https://zus.network/,COMPUTE,ETHEREUM,ZCN,0chain,Zus is a decentralized storage network with built-in privacy and security compliance.,Storage,W. L.,,https://x.com/zus_network,992566329632641056,https://t.me/zus_network,https://medium.com/0chain,https://github.com/0chain,http://www.linkedin.com/company/zusnetwork,,TRUE,FALSE
ZwapX,t4czq1,https://zwapx.com/,RWA,,,,"ZwapX is a Real World Assets On-Chain online marketplace, allowing users to buy, sell, bid, and trade physical watches in the form of tokens.",Collectibles,EV3 Sal,,https://x.com/zwapxofficial,,,,,https://www.linkedin.com/company/zwapx/,,TRUE,FALSE
Zyber 365,sapapu,http://www.zyber365.com/,NOT_DEPIN,,,,"Zyber 365 are providing a robust, decentralized, and cyber-secured operating system which adheres to the fundamental principles of environmental sustainability.",,,,https://x.com/Zyber365,1118081430346530927,https://t.me/zyber365,,,https://www.linkedin.com/company/zyber-365,,FALSE,FALSE